
FreeRTOS_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac6c  10000000  10000000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  1000ac6c  1000ac6c  0000cc6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000510  1000acbc  1000acbc  0000ccbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  1000b1cc  1000b1cc  0000e1b0  2**0
                  CONTENTS
  5 .ARM          00000008  1000b1cc  1000b1cc  0000d1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  1000b1d4  1000b1d4  0000e1b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1000b1d4  1000b1d4  0000d1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  1000b1d8  1000b1d8  0000d1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000124  10020000  1000b1dc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020124  1000b300  0000e124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          00001bcc  100201b0  1000b38c  0000e1b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  10021d7c  1000cf58  0000e1b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000e1b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fa6d  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004eeb  00000000  00000000  0002dc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015e0  00000000  00000000  00032b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000105a  00000000  00000000  00034118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004a62b  00000000  00000000  00035172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ea63  00000000  00000000  0007f79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001d3275  00000000  00000000  0009e200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00271475  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005f90  00000000  00000000  002714b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00277448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	@ (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	@ (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	@ (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201b0 	.word	0x100201b0
1000001c:	00000000 	.word	0x00000000
10000020:	1000ac54 	.word	0x1000ac54

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	@ (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	@ (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	@ (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201b4 	.word	0x100201b4
1000003c:	1000ac54 	.word	0x1000ac54

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr
	...

10000060 <memchr>:
10000060:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10000064:	2a10      	cmp	r2, #16
10000066:	db2b      	blt.n	100000c0 <memchr+0x60>
10000068:	f010 0f07 	tst.w	r0, #7
1000006c:	d008      	beq.n	10000080 <memchr+0x20>
1000006e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000072:	3a01      	subs	r2, #1
10000074:	428b      	cmp	r3, r1
10000076:	d02d      	beq.n	100000d4 <memchr+0x74>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	b342      	cbz	r2, 100000d0 <memchr+0x70>
1000007e:	d1f6      	bne.n	1000006e <memchr+0xe>
10000080:	b4f0      	push	{r4, r5, r6, r7}
10000082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000008a:	f022 0407 	bic.w	r4, r2, #7
1000008e:	f07f 0700 	mvns.w	r7, #0
10000092:	2300      	movs	r3, #0
10000094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000098:	3c08      	subs	r4, #8
1000009a:	ea85 0501 	eor.w	r5, r5, r1
1000009e:	ea86 0601 	eor.w	r6, r6, r1
100000a2:	fa85 f547 	uadd8	r5, r5, r7
100000a6:	faa3 f587 	sel	r5, r3, r7
100000aa:	fa86 f647 	uadd8	r6, r6, r7
100000ae:	faa5 f687 	sel	r6, r5, r7
100000b2:	b98e      	cbnz	r6, 100000d8 <memchr+0x78>
100000b4:	d1ee      	bne.n	10000094 <memchr+0x34>
100000b6:	bcf0      	pop	{r4, r5, r6, r7}
100000b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
100000bc:	f002 0207 	and.w	r2, r2, #7
100000c0:	b132      	cbz	r2, 100000d0 <memchr+0x70>
100000c2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000c6:	3a01      	subs	r2, #1
100000c8:	ea83 0301 	eor.w	r3, r3, r1
100000cc:	b113      	cbz	r3, 100000d4 <memchr+0x74>
100000ce:	d1f8      	bne.n	100000c2 <memchr+0x62>
100000d0:	2000      	movs	r0, #0
100000d2:	4770      	bx	lr
100000d4:	3801      	subs	r0, #1
100000d6:	4770      	bx	lr
100000d8:	2d00      	cmp	r5, #0
100000da:	bf06      	itte	eq
100000dc:	4635      	moveq	r5, r6
100000de:	3803      	subeq	r0, #3
100000e0:	3807      	subne	r0, #7
100000e2:	f015 0f01 	tst.w	r5, #1
100000e6:	d107      	bne.n	100000f8 <memchr+0x98>
100000e8:	3001      	adds	r0, #1
100000ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
100000ee:	bf02      	ittt	eq
100000f0:	3001      	addeq	r0, #1
100000f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
100000f6:	3001      	addeq	r0, #1
100000f8:	bcf0      	pop	{r4, r5, r6, r7}
100000fa:	3801      	subs	r0, #1
100000fc:	4770      	bx	lr
100000fe:	bf00      	nop

10000100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000100:	b480      	push	{r7}
10000102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000104:	4b0f      	ldr	r3, [pc, #60]	@ (10000144 <SystemInit+0x44>)
10000106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000010a:	4a0e      	ldr	r2, [pc, #56]	@ (10000144 <SystemInit+0x44>)
1000010c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10000110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000114:	4b0c      	ldr	r3, [pc, #48]	@ (10000148 <SystemInit+0x48>)
10000116:	2200      	movs	r2, #0
10000118:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000011a:	4b0b      	ldr	r3, [pc, #44]	@ (10000148 <SystemInit+0x48>)
1000011c:	2200      	movs	r2, #0
1000011e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000120:	4b09      	ldr	r3, [pc, #36]	@ (10000148 <SystemInit+0x48>)
10000122:	2200      	movs	r2, #0
10000124:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000126:	4b08      	ldr	r3, [pc, #32]	@ (10000148 <SystemInit+0x48>)
10000128:	2200      	movs	r2, #0
1000012a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000012c:	4b06      	ldr	r3, [pc, #24]	@ (10000148 <SystemInit+0x48>)
1000012e:	2200      	movs	r2, #0
10000130:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000132:	4b05      	ldr	r3, [pc, #20]	@ (10000148 <SystemInit+0x48>)
10000134:	2200      	movs	r2, #0
10000136:	625a      	str	r2, [r3, #36]	@ 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000138:	bf00      	nop
1000013a:	46bd      	mov	sp, r7
1000013c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000140:	4770      	bx	lr
10000142:	bf00      	nop
10000144:	e000ed00 	.word	0xe000ed00
10000148:	5000d0c0 	.word	0x5000d0c0

1000014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
1000014c:	b580      	push	{r7, lr}
1000014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000150:	f000 fb96 	bl	10000880 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000154:	4b18      	ldr	r3, [pc, #96]	@ (100001b8 <main+0x6c>)
10000156:	681b      	ldr	r3, [r3, #0]
10000158:	f003 0307 	and.w	r3, r3, #7
1000015c:	2b04      	cmp	r3, #4
1000015e:	d101      	bne.n	10000164 <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000160:	f000 f838 	bl	100001d4 <SystemClock_Config>
  }

  if(IS_ENGINEERING_BOOT_MODE())
10000164:	4b14      	ldr	r3, [pc, #80]	@ (100001b8 <main+0x6c>)
10000166:	681b      	ldr	r3, [r3, #0]
10000168:	f003 0307 	and.w	r3, r3, #7
1000016c:	2b04      	cmp	r3, #4
1000016e:	d102      	bne.n	10000176 <main+0x2a>
  {
    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
10000170:	f000 f9a6 	bl	100004c0 <PeriphCommonClock_Config>
10000174:	e005      	b.n	10000182 <main+0x36>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
10000176:	f000 f9d1 	bl	1000051c <MX_IPCC_Init>
    /* OpenAmp initialisation ---------------------------------*/
    MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
1000017a:	2100      	movs	r1, #0
1000017c:	2001      	movs	r0, #1
1000017e:	f009 fcf7 	bl	10009b70 <MX_OPENAMP_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000182:	f000 f9f0 	bl	10000566 <MX_GPIO_Init>
  MX_DMA_Init();
10000186:	f000 f9dd 	bl	10000544 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
1000018a:	f004 fbd9 	bl	10004940 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
1000018e:	4a0b      	ldr	r2, [pc, #44]	@ (100001bc <main+0x70>)
10000190:	2100      	movs	r1, #0
10000192:	480b      	ldr	r0, [pc, #44]	@ (100001c0 <main+0x74>)
10000194:	f004 fc3e 	bl	10004a14 <osThreadNew>
10000198:	4603      	mov	r3, r0
1000019a:	4a0a      	ldr	r2, [pc, #40]	@ (100001c4 <main+0x78>)
1000019c:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
1000019e:	4a0a      	ldr	r2, [pc, #40]	@ (100001c8 <main+0x7c>)
100001a0:	2100      	movs	r1, #0
100001a2:	480a      	ldr	r0, [pc, #40]	@ (100001cc <main+0x80>)
100001a4:	f004 fc36 	bl	10004a14 <osThreadNew>
100001a8:	4603      	mov	r3, r0
100001aa:	4a09      	ldr	r2, [pc, #36]	@ (100001d0 <main+0x84>)
100001ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
100001ae:	f004 fbfb 	bl	100049a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
100001b2:	bf00      	nop
100001b4:	e7fd      	b.n	100001b2 <main+0x66>
100001b6:	bf00      	nop
100001b8:	50020000 	.word	0x50020000
100001bc:	1000b018 	.word	0x1000b018
100001c0:	10000589 	.word	0x10000589
100001c4:	10020208 	.word	0x10020208
100001c8:	1000b03c 	.word	0x1000b03c
100001cc:	10000599 	.word	0x10000599
100001d0:	1002020c 	.word	0x1002020c

100001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100001d4:	b580      	push	{r7, lr}
100001d6:	b0d2      	sub	sp, #328	@ 0x148
100001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100001da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100001e2:	4618      	mov	r0, r3
100001e4:	f44f 738a 	mov.w	r3, #276	@ 0x114
100001e8:	461a      	mov	r2, r3
100001ea:	2100      	movs	r1, #0
100001ec:	f009 fe9d 	bl	10009f2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100001f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001f4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100001f8:	4618      	mov	r0, r3
100001fa:	2330      	movs	r3, #48	@ 0x30
100001fc:	461a      	mov	r2, r3
100001fe:	2100      	movs	r1, #0
10000200:	f009 fe93 	bl	10009f2a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
10000204:	f000 fed4 	bl	10000fb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10000208:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000020c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10000210:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
10000214:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000218:	f043 0320 	orr.w	r3, r3, #32
1000021c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI
10000220:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000224:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000228:	2217      	movs	r2, #23
1000022a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
1000022c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000230:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000234:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
10000238:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
1000023a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000023e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000242:	2201      	movs	r2, #1
10000244:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
10000246:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000024a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000024e:	2201      	movs	r2, #1
10000250:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000252:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000256:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000025a:	2200      	movs	r2, #0
1000025c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
1000025e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000262:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000266:	2210      	movs	r2, #16
10000268:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
1000026a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000026e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000272:	2200      	movs	r2, #0
10000274:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
10000276:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000027a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000027e:	2202      	movs	r2, #2
10000280:	661a      	str	r2, [r3, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
10000282:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000286:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000028a:	2201      	movs	r2, #1
1000028c:	665a      	str	r2, [r3, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
1000028e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000292:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000296:	2203      	movs	r2, #3
10000298:	669a      	str	r2, [r3, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
1000029a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000029e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002a2:	2242      	movs	r2, #66	@ 0x42
100002a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
100002a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002ae:	2202      	movs	r2, #2
100002b0:	671a      	str	r2, [r3, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
100002b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002ba:	2201      	movs	r2, #1
100002bc:	675a      	str	r2, [r3, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
100002be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002c6:	2201      	movs	r2, #1
100002c8:	679a      	str	r2, [r3, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
100002ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002d2:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
100002d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
100002da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002e2:	2201      	movs	r2, #1
100002e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
100002e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002f0:	2202      	movs	r2, #2
100002f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
100002f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002fe:	2201      	movs	r2, #1
10000300:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
10000304:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000308:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000030c:	2202      	movs	r2, #2
1000030e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
10000312:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000316:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000031a:	2222      	movs	r2, #34	@ 0x22
1000031c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000320:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000324:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000328:	2202      	movs	r2, #2
1000032a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
1000032e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000332:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000336:	2211      	movs	r2, #17
10000338:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
1000033c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000340:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000344:	2225      	movs	r2, #37	@ 0x25
10000346:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
1000034a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000034e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000352:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
10000356:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
1000035a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000035e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000362:	f641 2204 	movw	r2, #6660	@ 0x1a04
10000366:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
1000036a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000036e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000372:	2201      	movs	r2, #1
10000374:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
10000378:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000037c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000380:	2202      	movs	r2, #2
10000382:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
10000386:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000038a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000038e:	2201      	movs	r2, #1
10000390:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
10000394:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000398:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000039c:	2204      	movs	r2, #4
1000039e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
100003a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003aa:	2263      	movs	r2, #99	@ 0x63
100003ac:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
100003b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003b4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003b8:	2206      	movs	r2, #6
100003ba:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
100003be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003c6:	2208      	movs	r2, #8
100003c8:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
100003cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003d4:	2208      	movs	r2, #8
100003d6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
100003da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003e2:	2200      	movs	r2, #0
100003e4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
100003e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003f0:	2200      	movs	r2, #0
100003f2:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
100003f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003fe:	2200      	movs	r2, #0
10000400:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000404:	f107 0334 	add.w	r3, r7, #52	@ 0x34
10000408:	4618      	mov	r0, r3
1000040a:	f000 fde1 	bl	10000fd0 <HAL_RCC_OscConfig>
1000040e:	4603      	mov	r3, r0
10000410:	2b00      	cmp	r3, #0
10000412:	d001      	beq.n	10000418 <SystemClock_Config+0x244>
  {
    Error_Handler();
10000414:	f000 f8c8 	bl	100005a8 <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000418:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000041c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000420:	22fe      	movs	r2, #254	@ 0xfe
10000422:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
10000424:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000428:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000042c:	2202      	movs	r2, #2
1000042e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000430:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000434:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000438:	2200      	movs	r2, #0
1000043a:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
1000043c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000440:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000444:	2203      	movs	r2, #3
10000446:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000448:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000044c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000450:	2200      	movs	r2, #0
10000452:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000454:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000458:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000045c:	2201      	movs	r2, #1
1000045e:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10000460:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000464:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000468:	2202      	movs	r2, #2
1000046a:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
1000046c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000470:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000474:	2201      	movs	r2, #1
10000476:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000478:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000047c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000480:	2201      	movs	r2, #1
10000482:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000484:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000488:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000048c:	2201      	movs	r2, #1
1000048e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000490:	1d3b      	adds	r3, r7, #4
10000492:	4618      	mov	r0, r3
10000494:	f001 fb3a 	bl	10001b0c <HAL_RCC_ClockConfig>
10000498:	4603      	mov	r3, r0
1000049a:	2b00      	cmp	r3, #0
1000049c:	d001      	beq.n	100004a2 <SystemClock_Config+0x2ce>
  {
    Error_Handler();
1000049e:	f000 f883 	bl	100005a8 <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
100004a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100004a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100004a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
100004ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100004b0:	f043 0317 	orr.w	r3, r3, #23
100004b4:	6453      	str	r3, [r2, #68]	@ 0x44
}
100004b6:	bf00      	nop
100004b8:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
100004bc:	46bd      	mov	sp, r7
100004be:	bd80      	pop	{r7, pc}

100004c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
100004c0:	b580      	push	{r7, lr}
100004c2:	b0d6      	sub	sp, #344	@ 0x158
100004c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
100004c6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
100004ca:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
100004ce:	4618      	mov	r0, r3
100004d0:	f44f 73ac 	mov.w	r3, #344	@ 0x158
100004d4:	461a      	mov	r2, r3
100004d6:	2100      	movs	r1, #0
100004d8:	f009 fd27 	bl	10009f2a <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
100004dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
100004e0:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
100004e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
100004e8:	f04f 0300 	mov.w	r3, #0
100004ec:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.CkperClockSelection = RCC_CKPERCLKSOURCE_HSE;
100004f0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
100004f4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
100004f8:	2202      	movs	r2, #2
100004fa:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
100004fe:	463b      	mov	r3, r7
10000500:	4618      	mov	r0, r3
10000502:	f002 fb81 	bl	10002c08 <HAL_RCCEx_PeriphCLKConfig>
10000506:	4603      	mov	r3, r0
10000508:	2b00      	cmp	r3, #0
1000050a:	d001      	beq.n	10000510 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
1000050c:	f000 f84c 	bl	100005a8 <Error_Handler>
  }
}
10000510:	bf00      	nop
10000512:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
10000516:	46bd      	mov	sp, r7
10000518:	bd80      	pop	{r7, pc}
	...

1000051c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
1000051c:	b580      	push	{r7, lr}
1000051e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
10000520:	4b06      	ldr	r3, [pc, #24]	@ (1000053c <MX_IPCC_Init+0x20>)
10000522:	4a07      	ldr	r2, [pc, #28]	@ (10000540 <MX_IPCC_Init+0x24>)
10000524:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
10000526:	4805      	ldr	r0, [pc, #20]	@ (1000053c <MX_IPCC_Init+0x20>)
10000528:	f000 fb2c 	bl	10000b84 <HAL_IPCC_Init>
1000052c:	4603      	mov	r3, r0
1000052e:	2b00      	cmp	r3, #0
10000530:	d001      	beq.n	10000536 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
10000532:	f000 f839 	bl	100005a8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
10000536:	bf00      	nop
10000538:	bd80      	pop	{r7, pc}
1000053a:	bf00      	nop
1000053c:	100201cc 	.word	0x100201cc
10000540:	4c001000 	.word	0x4c001000

10000544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
10000544:	b480      	push	{r7}
10000546:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX_CLK_ENABLE();
10000548:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000054c:	2204      	movs	r2, #4
1000054e:	f8c3 2a98 	str.w	r2, [r3, #2712]	@ 0xa98
  __HAL_RCC_DMA1_CLK_ENABLE();
10000552:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000556:	2201      	movs	r2, #1
10000558:	f8c3 2a98 	str.w	r2, [r3, #2712]	@ 0xa98

}
1000055c:	bf00      	nop
1000055e:	46bd      	mov	sp, r7
10000560:	f85d 7b04 	ldr.w	r7, [sp], #4
10000564:	4770      	bx	lr

10000566 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
10000566:	b480      	push	{r7}
10000568:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
1000056a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000056e:	2204      	movs	r2, #4
10000570:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
10000574:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000578:	2280      	movs	r2, #128	@ 0x80
1000057a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
1000057e:	bf00      	nop
10000580:	46bd      	mov	sp, r7
10000582:	f85d 7b04 	ldr.w	r7, [sp], #4
10000586:	4770      	bx	lr

10000588 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
10000588:	b580      	push	{r7, lr}
1000058a:	b082      	sub	sp, #8
1000058c:	af00      	add	r7, sp, #0
1000058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
10000590:	2001      	movs	r0, #1
10000592:	f004 fae5 	bl	10004b60 <osDelay>
10000596:	e7fb      	b.n	10000590 <StartTask1+0x8>

10000598 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
10000598:	b580      	push	{r7, lr}
1000059a:	b082      	sub	sp, #8
1000059c:	af00      	add	r7, sp, #0
1000059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
100005a0:	2001      	movs	r0, #1
100005a2:	f004 fadd 	bl	10004b60 <osDelay>
100005a6:	e7fb      	b.n	100005a0 <StartTask02+0x8>

100005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100005a8:	b480      	push	{r7}
100005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100005ac:	b672      	cpsid	i
}
100005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100005b0:	bf00      	nop
100005b2:	e7fd      	b.n	100005b0 <Error_Handler+0x8>

100005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100005b4:	b580      	push	{r7, lr}
100005b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
100005b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100005bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
100005c0:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
100005c4:	2200      	movs	r2, #0
100005c6:	2101      	movs	r1, #1
100005c8:	f06f 000b 	mvn.w	r0, #11
100005cc:	f000 faa3 	bl	10000b16 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
100005d0:	2200      	movs	r2, #0
100005d2:	2101      	movs	r1, #1
100005d4:	f06f 000a 	mvn.w	r0, #10
100005d8:	f000 fa9d 	bl	10000b16 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
100005dc:	2200      	movs	r2, #0
100005de:	2101      	movs	r1, #1
100005e0:	f06f 0009 	mvn.w	r0, #9
100005e4:	f000 fa97 	bl	10000b16 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
100005e8:	2200      	movs	r2, #0
100005ea:	2101      	movs	r1, #1
100005ec:	f06f 0004 	mvn.w	r0, #4
100005f0:	f000 fa91 	bl	10000b16 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
100005f4:	2200      	movs	r2, #0
100005f6:	2101      	movs	r1, #1
100005f8:	f06f 0003 	mvn.w	r0, #3
100005fc:	f000 fa8b 	bl	10000b16 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
10000600:	2200      	movs	r2, #0
10000602:	210f      	movs	r1, #15
10000604:	f06f 0001 	mvn.w	r0, #1
10000608:	f000 fa85 	bl	10000b16 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
1000060c:	2200      	movs	r2, #0
1000060e:	2100      	movs	r1, #0
10000610:	2091      	movs	r0, #145	@ 0x91
10000612:	f000 fa80 	bl	10000b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
10000616:	2091      	movs	r0, #145	@ 0x91
10000618:	f000 fa99 	bl	10000b4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
1000061c:	bf00      	nop
1000061e:	bd80      	pop	{r7, pc}

10000620 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
10000620:	b580      	push	{r7, lr}
10000622:	b082      	sub	sp, #8
10000624:	af00      	add	r7, sp, #0
10000626:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
10000628:	687b      	ldr	r3, [r7, #4]
1000062a:	681b      	ldr	r3, [r3, #0]
1000062c:	4a0e      	ldr	r2, [pc, #56]	@ (10000668 <HAL_IPCC_MspInit+0x48>)
1000062e:	4293      	cmp	r3, r2
10000630:	d115      	bne.n	1000065e <HAL_IPCC_MspInit+0x3e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
10000632:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000636:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
1000063a:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
1000063e:	2200      	movs	r2, #0
10000640:	2101      	movs	r1, #1
10000642:	2067      	movs	r0, #103	@ 0x67
10000644:	f000 fa67 	bl	10000b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
10000648:	2067      	movs	r0, #103	@ 0x67
1000064a:	f000 fa80 	bl	10000b4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
1000064e:	2200      	movs	r2, #0
10000650:	2101      	movs	r1, #1
10000652:	2068      	movs	r0, #104	@ 0x68
10000654:	f000 fa5f 	bl	10000b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
10000658:	2068      	movs	r0, #104	@ 0x68
1000065a:	f000 fa78 	bl	10000b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
1000065e:	bf00      	nop
10000660:	3708      	adds	r7, #8
10000662:	46bd      	mov	sp, r7
10000664:	bd80      	pop	{r7, pc}
10000666:	bf00      	nop
10000668:	4c001000 	.word	0x4c001000

1000066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
1000066c:	b480      	push	{r7}
1000066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10000670:	bf00      	nop
10000672:	e7fd      	b.n	10000670 <NMI_Handler+0x4>

10000674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10000674:	b480      	push	{r7}
10000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10000678:	bf00      	nop
1000067a:	e7fd      	b.n	10000678 <HardFault_Handler+0x4>

1000067c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
1000067c:	b480      	push	{r7}
1000067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10000680:	bf00      	nop
10000682:	e7fd      	b.n	10000680 <MemManage_Handler+0x4>

10000684 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10000684:	b480      	push	{r7}
10000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10000688:	bf00      	nop
1000068a:	e7fd      	b.n	10000688 <BusFault_Handler+0x4>

1000068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
1000068c:	b480      	push	{r7}
1000068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10000690:	bf00      	nop
10000692:	e7fd      	b.n	10000690 <UsageFault_Handler+0x4>

10000694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000694:	b480      	push	{r7}
10000696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10000698:	bf00      	nop
1000069a:	46bd      	mov	sp, r7
1000069c:	f85d 7b04 	ldr.w	r7, [sp], #4
100006a0:	4770      	bx	lr

100006a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100006a2:	b580      	push	{r7, lr}
100006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100006a6:	f000 f93b 	bl	10000920 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
100006aa:	f006 fc5d 	bl	10006f68 <xTaskGetSchedulerState>
100006ae:	4603      	mov	r3, r0
100006b0:	2b01      	cmp	r3, #1
100006b2:	d001      	beq.n	100006b8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
100006b4:	f004 ff08 	bl	100054c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100006b8:	bf00      	nop
100006ba:	bd80      	pop	{r7, pc}

100006bc <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
100006bc:	b580      	push	{r7, lr}
100006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
100006c0:	4802      	ldr	r0, [pc, #8]	@ (100006cc <IPCC_RX1_IRQHandler+0x10>)
100006c2:	f000 fba7 	bl	10000e14 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
100006c6:	bf00      	nop
100006c8:	bd80      	pop	{r7, pc}
100006ca:	bf00      	nop
100006cc:	100201cc 	.word	0x100201cc

100006d0 <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
100006d0:	b580      	push	{r7, lr}
100006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
100006d4:	4802      	ldr	r0, [pc, #8]	@ (100006e0 <IPCC_TX1_IRQHandler+0x10>)
100006d6:	f000 fb4f 	bl	10000d78 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
100006da:	bf00      	nop
100006dc:	bd80      	pop	{r7, pc}
100006de:	bf00      	nop
100006e0:	100201cc 	.word	0x100201cc

100006e4 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
100006e4:	b580      	push	{r7, lr}
100006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
100006e8:	f001 fe2e 	bl	10002348 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
100006ec:	bf00      	nop
100006ee:	bd80      	pop	{r7, pc}

100006f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
100006f0:	b480      	push	{r7}
100006f2:	af00      	add	r7, sp, #0
  return 1;
100006f4:	2301      	movs	r3, #1
}
100006f6:	4618      	mov	r0, r3
100006f8:	46bd      	mov	sp, r7
100006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100006fe:	4770      	bx	lr

10000700 <_kill>:

int _kill(int pid, int sig)
{
10000700:	b580      	push	{r7, lr}
10000702:	b082      	sub	sp, #8
10000704:	af00      	add	r7, sp, #0
10000706:	6078      	str	r0, [r7, #4]
10000708:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
1000070a:	f009 fc81 	bl	1000a010 <__errno>
1000070e:	4603      	mov	r3, r0
10000710:	2216      	movs	r2, #22
10000712:	601a      	str	r2, [r3, #0]
  return -1;
10000714:	f04f 33ff 	mov.w	r3, #4294967295
}
10000718:	4618      	mov	r0, r3
1000071a:	3708      	adds	r7, #8
1000071c:	46bd      	mov	sp, r7
1000071e:	bd80      	pop	{r7, pc}

10000720 <_exit>:

void _exit (int status)
{
10000720:	b580      	push	{r7, lr}
10000722:	b082      	sub	sp, #8
10000724:	af00      	add	r7, sp, #0
10000726:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
10000728:	f04f 31ff 	mov.w	r1, #4294967295
1000072c:	6878      	ldr	r0, [r7, #4]
1000072e:	f7ff ffe7 	bl	10000700 <_kill>
  while (1) {}    /* Make sure we hang here */
10000732:	bf00      	nop
10000734:	e7fd      	b.n	10000732 <_exit+0x12>

10000736 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10000736:	b580      	push	{r7, lr}
10000738:	b086      	sub	sp, #24
1000073a:	af00      	add	r7, sp, #0
1000073c:	60f8      	str	r0, [r7, #12]
1000073e:	60b9      	str	r1, [r7, #8]
10000740:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000742:	2300      	movs	r3, #0
10000744:	617b      	str	r3, [r7, #20]
10000746:	e00a      	b.n	1000075e <_read+0x28>
  {
    *ptr++ = __io_getchar();
10000748:	f3af 8000 	nop.w
1000074c:	4601      	mov	r1, r0
1000074e:	68bb      	ldr	r3, [r7, #8]
10000750:	1c5a      	adds	r2, r3, #1
10000752:	60ba      	str	r2, [r7, #8]
10000754:	b2ca      	uxtb	r2, r1
10000756:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000758:	697b      	ldr	r3, [r7, #20]
1000075a:	3301      	adds	r3, #1
1000075c:	617b      	str	r3, [r7, #20]
1000075e:	697a      	ldr	r2, [r7, #20]
10000760:	687b      	ldr	r3, [r7, #4]
10000762:	429a      	cmp	r2, r3
10000764:	dbf0      	blt.n	10000748 <_read+0x12>
  }

  return len;
10000766:	687b      	ldr	r3, [r7, #4]
}
10000768:	4618      	mov	r0, r3
1000076a:	3718      	adds	r7, #24
1000076c:	46bd      	mov	sp, r7
1000076e:	bd80      	pop	{r7, pc}

10000770 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10000770:	b580      	push	{r7, lr}
10000772:	b086      	sub	sp, #24
10000774:	af00      	add	r7, sp, #0
10000776:	60f8      	str	r0, [r7, #12]
10000778:	60b9      	str	r1, [r7, #8]
1000077a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
1000077c:	2300      	movs	r3, #0
1000077e:	617b      	str	r3, [r7, #20]
10000780:	e009      	b.n	10000796 <_write+0x26>
  {
    __io_putchar(*ptr++);
10000782:	68bb      	ldr	r3, [r7, #8]
10000784:	1c5a      	adds	r2, r3, #1
10000786:	60ba      	str	r2, [r7, #8]
10000788:	781b      	ldrb	r3, [r3, #0]
1000078a:	4618      	mov	r0, r3
1000078c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000790:	697b      	ldr	r3, [r7, #20]
10000792:	3301      	adds	r3, #1
10000794:	617b      	str	r3, [r7, #20]
10000796:	697a      	ldr	r2, [r7, #20]
10000798:	687b      	ldr	r3, [r7, #4]
1000079a:	429a      	cmp	r2, r3
1000079c:	dbf1      	blt.n	10000782 <_write+0x12>
  }
  return len;
1000079e:	687b      	ldr	r3, [r7, #4]
}
100007a0:	4618      	mov	r0, r3
100007a2:	3718      	adds	r7, #24
100007a4:	46bd      	mov	sp, r7
100007a6:	bd80      	pop	{r7, pc}

100007a8 <_close>:

int _close(int file)
{
100007a8:	b480      	push	{r7}
100007aa:	b083      	sub	sp, #12
100007ac:	af00      	add	r7, sp, #0
100007ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
100007b0:	f04f 33ff 	mov.w	r3, #4294967295
}
100007b4:	4618      	mov	r0, r3
100007b6:	370c      	adds	r7, #12
100007b8:	46bd      	mov	sp, r7
100007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
100007be:	4770      	bx	lr

100007c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
100007c0:	b480      	push	{r7}
100007c2:	b083      	sub	sp, #12
100007c4:	af00      	add	r7, sp, #0
100007c6:	6078      	str	r0, [r7, #4]
100007c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
100007ca:	683b      	ldr	r3, [r7, #0]
100007cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
100007d0:	605a      	str	r2, [r3, #4]
  return 0;
100007d2:	2300      	movs	r3, #0
}
100007d4:	4618      	mov	r0, r3
100007d6:	370c      	adds	r7, #12
100007d8:	46bd      	mov	sp, r7
100007da:	f85d 7b04 	ldr.w	r7, [sp], #4
100007de:	4770      	bx	lr

100007e0 <_isatty>:

int _isatty(int file)
{
100007e0:	b480      	push	{r7}
100007e2:	b083      	sub	sp, #12
100007e4:	af00      	add	r7, sp, #0
100007e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
100007e8:	2301      	movs	r3, #1
}
100007ea:	4618      	mov	r0, r3
100007ec:	370c      	adds	r7, #12
100007ee:	46bd      	mov	sp, r7
100007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
100007f4:	4770      	bx	lr

100007f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
100007f6:	b480      	push	{r7}
100007f8:	b085      	sub	sp, #20
100007fa:	af00      	add	r7, sp, #0
100007fc:	60f8      	str	r0, [r7, #12]
100007fe:	60b9      	str	r1, [r7, #8]
10000800:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10000802:	2300      	movs	r3, #0
}
10000804:	4618      	mov	r0, r3
10000806:	3714      	adds	r7, #20
10000808:	46bd      	mov	sp, r7
1000080a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000080e:	4770      	bx	lr

10000810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10000810:	b580      	push	{r7, lr}
10000812:	b086      	sub	sp, #24
10000814:	af00      	add	r7, sp, #0
10000816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10000818:	4a14      	ldr	r2, [pc, #80]	@ (1000086c <_sbrk+0x5c>)
1000081a:	4b15      	ldr	r3, [pc, #84]	@ (10000870 <_sbrk+0x60>)
1000081c:	1ad3      	subs	r3, r2, r3
1000081e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10000820:	697b      	ldr	r3, [r7, #20]
10000822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10000824:	4b13      	ldr	r3, [pc, #76]	@ (10000874 <_sbrk+0x64>)
10000826:	681b      	ldr	r3, [r3, #0]
10000828:	2b00      	cmp	r3, #0
1000082a:	d102      	bne.n	10000832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
1000082c:	4b11      	ldr	r3, [pc, #68]	@ (10000874 <_sbrk+0x64>)
1000082e:	4a12      	ldr	r2, [pc, #72]	@ (10000878 <_sbrk+0x68>)
10000830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10000832:	4b10      	ldr	r3, [pc, #64]	@ (10000874 <_sbrk+0x64>)
10000834:	681a      	ldr	r2, [r3, #0]
10000836:	687b      	ldr	r3, [r7, #4]
10000838:	4413      	add	r3, r2
1000083a:	693a      	ldr	r2, [r7, #16]
1000083c:	429a      	cmp	r2, r3
1000083e:	d207      	bcs.n	10000850 <_sbrk+0x40>
  {
    errno = ENOMEM;
10000840:	f009 fbe6 	bl	1000a010 <__errno>
10000844:	4603      	mov	r3, r0
10000846:	220c      	movs	r2, #12
10000848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
1000084a:	f04f 33ff 	mov.w	r3, #4294967295
1000084e:	e009      	b.n	10000864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10000850:	4b08      	ldr	r3, [pc, #32]	@ (10000874 <_sbrk+0x64>)
10000852:	681b      	ldr	r3, [r3, #0]
10000854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10000856:	4b07      	ldr	r3, [pc, #28]	@ (10000874 <_sbrk+0x64>)
10000858:	681a      	ldr	r2, [r3, #0]
1000085a:	687b      	ldr	r3, [r7, #4]
1000085c:	4413      	add	r3, r2
1000085e:	4a05      	ldr	r2, [pc, #20]	@ (10000874 <_sbrk+0x64>)
10000860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
10000862:	68fb      	ldr	r3, [r7, #12]
}
10000864:	4618      	mov	r0, r3
10000866:	3718      	adds	r7, #24
10000868:	46bd      	mov	sp, r7
1000086a:	bd80      	pop	{r7, pc}
1000086c:	10040000 	.word	0x10040000
10000870:	00000400 	.word	0x00000400
10000874:	10020210 	.word	0x10020210
10000878:	10021d80 	.word	0x10021d80

1000087c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
1000087c:	e7fe      	b.n	1000087c <ADC1_IRQHandler>
	...

10000880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10000880:	b580      	push	{r7, lr}
10000882:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10000884:	2003      	movs	r0, #3
10000886:	f000 f93b 	bl	10000b00 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000088a:	f001 fd1c 	bl	100022c6 <HAL_RCC_GetSystemCoreClockFreq>
1000088e:	4603      	mov	r3, r0
10000890:	4a07      	ldr	r2, [pc, #28]	@ (100008b0 <HAL_Init+0x30>)
10000892:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10000894:	200f      	movs	r0, #15
10000896:	f000 f80d 	bl	100008b4 <HAL_InitTick>
1000089a:	4603      	mov	r3, r0
1000089c:	2b00      	cmp	r3, #0
1000089e:	d001      	beq.n	100008a4 <HAL_Init+0x24>
  {
    return HAL_ERROR;
100008a0:	2301      	movs	r3, #1
100008a2:	e002      	b.n	100008aa <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
100008a4:	f7ff fe86 	bl	100005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
100008a8:	2300      	movs	r3, #0
}
100008aa:	4618      	mov	r0, r3
100008ac:	bd80      	pop	{r7, pc}
100008ae:	bf00      	nop
100008b0:	10020000 	.word	0x10020000

100008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100008b4:	b580      	push	{r7, lr}
100008b6:	b082      	sub	sp, #8
100008b8:	af00      	add	r7, sp, #0
100008ba:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
100008bc:	4b15      	ldr	r3, [pc, #84]	@ (10000914 <HAL_InitTick+0x60>)
100008be:	781b      	ldrb	r3, [r3, #0]
100008c0:	2b00      	cmp	r3, #0
100008c2:	d101      	bne.n	100008c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
100008c4:	2301      	movs	r3, #1
100008c6:	e021      	b.n	1000090c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100008c8:	4b13      	ldr	r3, [pc, #76]	@ (10000918 <HAL_InitTick+0x64>)
100008ca:	681a      	ldr	r2, [r3, #0]
100008cc:	4b11      	ldr	r3, [pc, #68]	@ (10000914 <HAL_InitTick+0x60>)
100008ce:	781b      	ldrb	r3, [r3, #0]
100008d0:	4619      	mov	r1, r3
100008d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
100008d6:	fbb3 f3f1 	udiv	r3, r3, r1
100008da:	fbb2 f3f3 	udiv	r3, r2, r3
100008de:	4618      	mov	r0, r3
100008e0:	f000 f943 	bl	10000b6a <HAL_SYSTICK_Config>
100008e4:	4603      	mov	r3, r0
100008e6:	2b00      	cmp	r3, #0
100008e8:	d001      	beq.n	100008ee <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
100008ea:	2301      	movs	r3, #1
100008ec:	e00e      	b.n	1000090c <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100008ee:	687b      	ldr	r3, [r7, #4]
100008f0:	2b0f      	cmp	r3, #15
100008f2:	d80a      	bhi.n	1000090a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
100008f4:	2200      	movs	r2, #0
100008f6:	6879      	ldr	r1, [r7, #4]
100008f8:	f04f 30ff 	mov.w	r0, #4294967295
100008fc:	f000 f90b 	bl	10000b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000900:	4a06      	ldr	r2, [pc, #24]	@ (1000091c <HAL_InitTick+0x68>)
10000902:	687b      	ldr	r3, [r7, #4]
10000904:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
10000906:	2300      	movs	r3, #0
10000908:	e000      	b.n	1000090c <HAL_InitTick+0x58>
    return HAL_ERROR;
1000090a:	2301      	movs	r3, #1
}
1000090c:	4618      	mov	r0, r3
1000090e:	3708      	adds	r7, #8
10000910:	46bd      	mov	sp, r7
10000912:	bd80      	pop	{r7, pc}
10000914:	10020008 	.word	0x10020008
10000918:	10020000 	.word	0x10020000
1000091c:	10020004 	.word	0x10020004

10000920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10000920:	b480      	push	{r7}
10000922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10000924:	4b06      	ldr	r3, [pc, #24]	@ (10000940 <HAL_IncTick+0x20>)
10000926:	781b      	ldrb	r3, [r3, #0]
10000928:	461a      	mov	r2, r3
1000092a:	4b06      	ldr	r3, [pc, #24]	@ (10000944 <HAL_IncTick+0x24>)
1000092c:	681b      	ldr	r3, [r3, #0]
1000092e:	4413      	add	r3, r2
10000930:	4a04      	ldr	r2, [pc, #16]	@ (10000944 <HAL_IncTick+0x24>)
10000932:	6013      	str	r3, [r2, #0]
}
10000934:	bf00      	nop
10000936:	46bd      	mov	sp, r7
10000938:	f85d 7b04 	ldr.w	r7, [sp], #4
1000093c:	4770      	bx	lr
1000093e:	bf00      	nop
10000940:	10020008 	.word	0x10020008
10000944:	10020214 	.word	0x10020214

10000948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000948:	b480      	push	{r7}
1000094a:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
1000094c:	4b03      	ldr	r3, [pc, #12]	@ (1000095c <HAL_GetTick+0x14>)
1000094e:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10000950:	4618      	mov	r0, r3
10000952:	46bd      	mov	sp, r7
10000954:	f85d 7b04 	ldr.w	r7, [sp], #4
10000958:	4770      	bx	lr
1000095a:	bf00      	nop
1000095c:	10020214 	.word	0x10020214

10000960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000960:	b480      	push	{r7}
10000962:	b085      	sub	sp, #20
10000964:	af00      	add	r7, sp, #0
10000966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10000968:	687b      	ldr	r3, [r7, #4]
1000096a:	f003 0307 	and.w	r3, r3, #7
1000096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10000970:	4b0c      	ldr	r3, [pc, #48]	@ (100009a4 <__NVIC_SetPriorityGrouping+0x44>)
10000972:	68db      	ldr	r3, [r3, #12]
10000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10000976:	68ba      	ldr	r2, [r7, #8]
10000978:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
1000097c:	4013      	ands	r3, r2
1000097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10000980:	68fb      	ldr	r3, [r7, #12]
10000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10000984:	68bb      	ldr	r3, [r7, #8]
10000986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10000988:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
1000098c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
10000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10000992:	4a04      	ldr	r2, [pc, #16]	@ (100009a4 <__NVIC_SetPriorityGrouping+0x44>)
10000994:	68bb      	ldr	r3, [r7, #8]
10000996:	60d3      	str	r3, [r2, #12]
}
10000998:	bf00      	nop
1000099a:	3714      	adds	r7, #20
1000099c:	46bd      	mov	sp, r7
1000099e:	f85d 7b04 	ldr.w	r7, [sp], #4
100009a2:	4770      	bx	lr
100009a4:	e000ed00 	.word	0xe000ed00

100009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
100009a8:	b480      	push	{r7}
100009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
100009ac:	4b04      	ldr	r3, [pc, #16]	@ (100009c0 <__NVIC_GetPriorityGrouping+0x18>)
100009ae:	68db      	ldr	r3, [r3, #12]
100009b0:	0a1b      	lsrs	r3, r3, #8
100009b2:	f003 0307 	and.w	r3, r3, #7
}
100009b6:	4618      	mov	r0, r3
100009b8:	46bd      	mov	sp, r7
100009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
100009be:	4770      	bx	lr
100009c0:	e000ed00 	.word	0xe000ed00

100009c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100009c4:	b480      	push	{r7}
100009c6:	b083      	sub	sp, #12
100009c8:	af00      	add	r7, sp, #0
100009ca:	4603      	mov	r3, r0
100009cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100009ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100009d2:	2b00      	cmp	r3, #0
100009d4:	db0b      	blt.n	100009ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100009d6:	88fb      	ldrh	r3, [r7, #6]
100009d8:	f003 021f 	and.w	r2, r3, #31
100009dc:	4907      	ldr	r1, [pc, #28]	@ (100009fc <__NVIC_EnableIRQ+0x38>)
100009de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100009e2:	095b      	lsrs	r3, r3, #5
100009e4:	2001      	movs	r0, #1
100009e6:	fa00 f202 	lsl.w	r2, r0, r2
100009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
100009ee:	bf00      	nop
100009f0:	370c      	adds	r7, #12
100009f2:	46bd      	mov	sp, r7
100009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
100009f8:	4770      	bx	lr
100009fa:	bf00      	nop
100009fc:	e000e100 	.word	0xe000e100

10000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10000a00:	b480      	push	{r7}
10000a02:	b083      	sub	sp, #12
10000a04:	af00      	add	r7, sp, #0
10000a06:	4603      	mov	r3, r0
10000a08:	6039      	str	r1, [r7, #0]
10000a0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000a10:	2b00      	cmp	r3, #0
10000a12:	db0a      	blt.n	10000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000a14:	683b      	ldr	r3, [r7, #0]
10000a16:	b2da      	uxtb	r2, r3
10000a18:	490c      	ldr	r1, [pc, #48]	@ (10000a4c <__NVIC_SetPriority+0x4c>)
10000a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000a1e:	0112      	lsls	r2, r2, #4
10000a20:	b2d2      	uxtb	r2, r2
10000a22:	440b      	add	r3, r1
10000a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10000a28:	e00a      	b.n	10000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000a2a:	683b      	ldr	r3, [r7, #0]
10000a2c:	b2da      	uxtb	r2, r3
10000a2e:	4908      	ldr	r1, [pc, #32]	@ (10000a50 <__NVIC_SetPriority+0x50>)
10000a30:	88fb      	ldrh	r3, [r7, #6]
10000a32:	f003 030f 	and.w	r3, r3, #15
10000a36:	3b04      	subs	r3, #4
10000a38:	0112      	lsls	r2, r2, #4
10000a3a:	b2d2      	uxtb	r2, r2
10000a3c:	440b      	add	r3, r1
10000a3e:	761a      	strb	r2, [r3, #24]
}
10000a40:	bf00      	nop
10000a42:	370c      	adds	r7, #12
10000a44:	46bd      	mov	sp, r7
10000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a4a:	4770      	bx	lr
10000a4c:	e000e100 	.word	0xe000e100
10000a50:	e000ed00 	.word	0xe000ed00

10000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000a54:	b480      	push	{r7}
10000a56:	b089      	sub	sp, #36	@ 0x24
10000a58:	af00      	add	r7, sp, #0
10000a5a:	60f8      	str	r0, [r7, #12]
10000a5c:	60b9      	str	r1, [r7, #8]
10000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000a60:	68fb      	ldr	r3, [r7, #12]
10000a62:	f003 0307 	and.w	r3, r3, #7
10000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000a68:	69fb      	ldr	r3, [r7, #28]
10000a6a:	f1c3 0307 	rsb	r3, r3, #7
10000a6e:	2b04      	cmp	r3, #4
10000a70:	bf28      	it	cs
10000a72:	2304      	movcs	r3, #4
10000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10000a76:	69fb      	ldr	r3, [r7, #28]
10000a78:	3304      	adds	r3, #4
10000a7a:	2b06      	cmp	r3, #6
10000a7c:	d902      	bls.n	10000a84 <NVIC_EncodePriority+0x30>
10000a7e:	69fb      	ldr	r3, [r7, #28]
10000a80:	3b03      	subs	r3, #3
10000a82:	e000      	b.n	10000a86 <NVIC_EncodePriority+0x32>
10000a84:	2300      	movs	r3, #0
10000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000a88:	f04f 32ff 	mov.w	r2, #4294967295
10000a8c:	69bb      	ldr	r3, [r7, #24]
10000a8e:	fa02 f303 	lsl.w	r3, r2, r3
10000a92:	43da      	mvns	r2, r3
10000a94:	68bb      	ldr	r3, [r7, #8]
10000a96:	401a      	ands	r2, r3
10000a98:	697b      	ldr	r3, [r7, #20]
10000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10000a9c:	f04f 31ff 	mov.w	r1, #4294967295
10000aa0:	697b      	ldr	r3, [r7, #20]
10000aa2:	fa01 f303 	lsl.w	r3, r1, r3
10000aa6:	43d9      	mvns	r1, r3
10000aa8:	687b      	ldr	r3, [r7, #4]
10000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000aac:	4313      	orrs	r3, r2
         );
}
10000aae:	4618      	mov	r0, r3
10000ab0:	3724      	adds	r7, #36	@ 0x24
10000ab2:	46bd      	mov	sp, r7
10000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
10000ab8:	4770      	bx	lr
	...

10000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10000abc:	b580      	push	{r7, lr}
10000abe:	b082      	sub	sp, #8
10000ac0:	af00      	add	r7, sp, #0
10000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10000ac4:	687b      	ldr	r3, [r7, #4]
10000ac6:	3b01      	subs	r3, #1
10000ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10000acc:	d301      	bcc.n	10000ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10000ace:	2301      	movs	r3, #1
10000ad0:	e00f      	b.n	10000af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (10000afc <SysTick_Config+0x40>)
10000ad4:	687b      	ldr	r3, [r7, #4]
10000ad6:	3b01      	subs	r3, #1
10000ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10000ada:	210f      	movs	r1, #15
10000adc:	f04f 30ff 	mov.w	r0, #4294967295
10000ae0:	f7ff ff8e 	bl	10000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10000ae4:	4b05      	ldr	r3, [pc, #20]	@ (10000afc <SysTick_Config+0x40>)
10000ae6:	2200      	movs	r2, #0
10000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10000aea:	4b04      	ldr	r3, [pc, #16]	@ (10000afc <SysTick_Config+0x40>)
10000aec:	2207      	movs	r2, #7
10000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10000af0:	2300      	movs	r3, #0
}
10000af2:	4618      	mov	r0, r3
10000af4:	3708      	adds	r7, #8
10000af6:	46bd      	mov	sp, r7
10000af8:	bd80      	pop	{r7, pc}
10000afa:	bf00      	nop
10000afc:	e000e010 	.word	0xe000e010

10000b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000b00:	b580      	push	{r7, lr}
10000b02:	b082      	sub	sp, #8
10000b04:	af00      	add	r7, sp, #0
10000b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10000b08:	6878      	ldr	r0, [r7, #4]
10000b0a:	f7ff ff29 	bl	10000960 <__NVIC_SetPriorityGrouping>
}
10000b0e:	bf00      	nop
10000b10:	3708      	adds	r7, #8
10000b12:	46bd      	mov	sp, r7
10000b14:	bd80      	pop	{r7, pc}

10000b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000b16:	b580      	push	{r7, lr}
10000b18:	b086      	sub	sp, #24
10000b1a:	af00      	add	r7, sp, #0
10000b1c:	4603      	mov	r3, r0
10000b1e:	60b9      	str	r1, [r7, #8]
10000b20:	607a      	str	r2, [r7, #4]
10000b22:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10000b24:	2300      	movs	r3, #0
10000b26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10000b28:	f7ff ff3e 	bl	100009a8 <__NVIC_GetPriorityGrouping>
10000b2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10000b2e:	687a      	ldr	r2, [r7, #4]
10000b30:	68b9      	ldr	r1, [r7, #8]
10000b32:	6978      	ldr	r0, [r7, #20]
10000b34:	f7ff ff8e 	bl	10000a54 <NVIC_EncodePriority>
10000b38:	4602      	mov	r2, r0
10000b3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10000b3e:	4611      	mov	r1, r2
10000b40:	4618      	mov	r0, r3
10000b42:	f7ff ff5d 	bl	10000a00 <__NVIC_SetPriority>
}
10000b46:	bf00      	nop
10000b48:	3718      	adds	r7, #24
10000b4a:	46bd      	mov	sp, r7
10000b4c:	bd80      	pop	{r7, pc}

10000b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000b4e:	b580      	push	{r7, lr}
10000b50:	b082      	sub	sp, #8
10000b52:	af00      	add	r7, sp, #0
10000b54:	4603      	mov	r3, r0
10000b56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10000b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000b5c:	4618      	mov	r0, r3
10000b5e:	f7ff ff31 	bl	100009c4 <__NVIC_EnableIRQ>
}
10000b62:	bf00      	nop
10000b64:	3708      	adds	r7, #8
10000b66:	46bd      	mov	sp, r7
10000b68:	bd80      	pop	{r7, pc}

10000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10000b6a:	b580      	push	{r7, lr}
10000b6c:	b082      	sub	sp, #8
10000b6e:	af00      	add	r7, sp, #0
10000b70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10000b72:	6878      	ldr	r0, [r7, #4]
10000b74:	f7ff ffa2 	bl	10000abc <SysTick_Config>
10000b78:	4603      	mov	r3, r0
}
10000b7a:	4618      	mov	r0, r3
10000b7c:	3708      	adds	r7, #8
10000b7e:	46bd      	mov	sp, r7
10000b80:	bd80      	pop	{r7, pc}
	...

10000b84 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10000b84:	b580      	push	{r7, lr}
10000b86:	b084      	sub	sp, #16
10000b88:	af00      	add	r7, sp, #0
10000b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10000b8c:	2300      	movs	r3, #0
10000b8e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10000b90:	687b      	ldr	r3, [r7, #4]
10000b92:	2b00      	cmp	r3, #0
10000b94:	d01e      	beq.n	10000bd4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000b96:	4b13      	ldr	r3, [pc, #76]	@ (10000be4 <HAL_IPCC_Init+0x60>)
10000b98:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
10000b9a:	687b      	ldr	r3, [r7, #4]
10000b9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10000ba0:	b2db      	uxtb	r3, r3
10000ba2:	2b00      	cmp	r3, #0
10000ba4:	d102      	bne.n	10000bac <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10000ba6:	6878      	ldr	r0, [r7, #4]
10000ba8:	f7ff fd3a 	bl	10000620 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
10000bac:	68b8      	ldr	r0, [r7, #8]
10000bae:	f000 f9eb 	bl	10000f88 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10000bb2:	68bb      	ldr	r3, [r7, #8]
10000bb4:	681b      	ldr	r3, [r3, #0]
10000bb6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
10000bba:	68bb      	ldr	r3, [r7, #8]
10000bbc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
10000bbe:	6878      	ldr	r0, [r7, #4]
10000bc0:	f000 f9bc 	bl	10000f3c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10000bc4:	687b      	ldr	r3, [r7, #4]
10000bc6:	2200      	movs	r2, #0
10000bc8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
10000bca:	687b      	ldr	r3, [r7, #4]
10000bcc:	2201      	movs	r2, #1
10000bce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
10000bd2:	e001      	b.n	10000bd8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10000bd4:	2301      	movs	r3, #1
10000bd6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10000bd8:	7bfb      	ldrb	r3, [r7, #15]
}
10000bda:	4618      	mov	r0, r3
10000bdc:	3710      	adds	r7, #16
10000bde:	46bd      	mov	sp, r7
10000be0:	bd80      	pop	{r7, pc}
10000be2:	bf00      	nop
10000be4:	4c001010 	.word	0x4c001010

10000be8 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10000be8:	b580      	push	{r7, lr}
10000bea:	b086      	sub	sp, #24
10000bec:	af00      	add	r7, sp, #0
10000bee:	60f8      	str	r0, [r7, #12]
10000bf0:	60b9      	str	r1, [r7, #8]
10000bf2:	603b      	str	r3, [r7, #0]
10000bf4:	4613      	mov	r3, r2
10000bf6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10000bf8:	2300      	movs	r3, #0
10000bfa:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10000bfc:	68fb      	ldr	r3, [r7, #12]
10000bfe:	2b00      	cmp	r3, #0
10000c00:	d039      	beq.n	10000c76 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
10000c02:	68fb      	ldr	r3, [r7, #12]
10000c04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10000c08:	b2db      	uxtb	r3, r3
10000c0a:	2b01      	cmp	r3, #1
10000c0c:	d130      	bne.n	10000c70 <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10000c0e:	79fb      	ldrb	r3, [r7, #7]
10000c10:	2b00      	cmp	r3, #0
10000c12:	d113      	bne.n	10000c3c <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
10000c14:	68fa      	ldr	r2, [r7, #12]
10000c16:	68bb      	ldr	r3, [r7, #8]
10000c18:	3306      	adds	r3, #6
10000c1a:	009b      	lsls	r3, r3, #2
10000c1c:	4413      	add	r3, r2
10000c1e:	683a      	ldr	r2, [r7, #0]
10000c20:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10000c22:	68fb      	ldr	r3, [r7, #12]
10000c24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10000c26:	68bb      	ldr	r3, [r7, #8]
10000c28:	f003 030f 	and.w	r3, r3, #15
10000c2c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10000c30:	fa01 f303 	lsl.w	r3, r1, r3
10000c34:	431a      	orrs	r2, r3
10000c36:	68fb      	ldr	r3, [r7, #12]
10000c38:	635a      	str	r2, [r3, #52]	@ 0x34
10000c3a:	e010      	b.n	10000c5e <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
10000c3c:	68fa      	ldr	r2, [r7, #12]
10000c3e:	68bb      	ldr	r3, [r7, #8]
10000c40:	009b      	lsls	r3, r3, #2
10000c42:	4413      	add	r3, r2
10000c44:	683a      	ldr	r2, [r7, #0]
10000c46:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10000c48:	68fb      	ldr	r3, [r7, #12]
10000c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10000c4c:	68bb      	ldr	r3, [r7, #8]
10000c4e:	f003 030f 	and.w	r3, r3, #15
10000c52:	2101      	movs	r1, #1
10000c54:	fa01 f303 	lsl.w	r3, r1, r3
10000c58:	431a      	orrs	r2, r3
10000c5a:	68fb      	ldr	r3, [r7, #12]
10000c5c:	635a      	str	r2, [r3, #52]	@ 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
10000c5e:	79fb      	ldrb	r3, [r7, #7]
10000c60:	2b01      	cmp	r3, #1
10000c62:	d10a      	bne.n	10000c7a <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10000c64:	79fb      	ldrb	r3, [r7, #7]
10000c66:	4619      	mov	r1, r3
10000c68:	68b8      	ldr	r0, [r7, #8]
10000c6a:	f000 f939 	bl	10000ee0 <IPCC_UnmaskInterrupt>
10000c6e:	e004      	b.n	10000c7a <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10000c70:	2301      	movs	r3, #1
10000c72:	75fb      	strb	r3, [r7, #23]
10000c74:	e001      	b.n	10000c7a <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10000c76:	2301      	movs	r3, #1
10000c78:	75fb      	strb	r3, [r7, #23]
  }
  return err;
10000c7a:	7dfb      	ldrb	r3, [r7, #23]
}
10000c7c:	4618      	mov	r0, r3
10000c7e:	3718      	adds	r7, #24
10000c80:	46bd      	mov	sp, r7
10000c82:	bd80      	pop	{r7, pc}

10000c84 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000c84:	b480      	push	{r7}
10000c86:	b089      	sub	sp, #36	@ 0x24
10000c88:	af00      	add	r7, sp, #0
10000c8a:	60f8      	str	r0, [r7, #12]
10000c8c:	60b9      	str	r1, [r7, #8]
10000c8e:	4613      	mov	r3, r2
10000c90:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000c92:	4b14      	ldr	r3, [pc, #80]	@ (10000ce4 <HAL_IPCC_GetChannelStatus+0x60>)
10000c94:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10000c96:	4b14      	ldr	r3, [pc, #80]	@ (10000ce8 <HAL_IPCC_GetChannelStatus+0x64>)
10000c98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10000c9a:	79fb      	ldrb	r3, [r7, #7]
10000c9c:	2b00      	cmp	r3, #0
10000c9e:	d10a      	bne.n	10000cb6 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10000ca0:	69bb      	ldr	r3, [r7, #24]
10000ca2:	68da      	ldr	r2, [r3, #12]
10000ca4:	68bb      	ldr	r3, [r7, #8]
10000ca6:	f003 030f 	and.w	r3, r3, #15
10000caa:	2101      	movs	r1, #1
10000cac:	fa01 f303 	lsl.w	r3, r1, r3
10000cb0:	4013      	ands	r3, r2
10000cb2:	61fb      	str	r3, [r7, #28]
10000cb4:	e009      	b.n	10000cca <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10000cb6:	697b      	ldr	r3, [r7, #20]
10000cb8:	68da      	ldr	r2, [r3, #12]
10000cba:	68bb      	ldr	r3, [r7, #8]
10000cbc:	f003 030f 	and.w	r3, r3, #15
10000cc0:	2101      	movs	r1, #1
10000cc2:	fa01 f303 	lsl.w	r3, r1, r3
10000cc6:	4013      	ands	r3, r2
10000cc8:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
10000cca:	69fb      	ldr	r3, [r7, #28]
10000ccc:	2b00      	cmp	r3, #0
10000cce:	bf14      	ite	ne
10000cd0:	2301      	movne	r3, #1
10000cd2:	2300      	moveq	r3, #0
10000cd4:	b2db      	uxtb	r3, r3
}
10000cd6:	4618      	mov	r0, r3
10000cd8:	3724      	adds	r7, #36	@ 0x24
10000cda:	46bd      	mov	sp, r7
10000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
10000ce0:	4770      	bx	lr
10000ce2:	bf00      	nop
10000ce4:	4c001010 	.word	0x4c001010
10000ce8:	4c001000 	.word	0x4c001000

10000cec <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000cec:	b580      	push	{r7, lr}
10000cee:	b088      	sub	sp, #32
10000cf0:	af00      	add	r7, sp, #0
10000cf2:	60f8      	str	r0, [r7, #12]
10000cf4:	60b9      	str	r1, [r7, #8]
10000cf6:	4613      	mov	r3, r2
10000cf8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10000cfa:	2300      	movs	r3, #0
10000cfc:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000cfe:	4b1d      	ldr	r3, [pc, #116]	@ (10000d74 <HAL_IPCC_NotifyCPU+0x88>)
10000d00:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
10000d02:	68fb      	ldr	r3, [r7, #12]
10000d04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10000d08:	b2db      	uxtb	r3, r3
10000d0a:	2b01      	cmp	r3, #1
10000d0c:	d12a      	bne.n	10000d64 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10000d0e:	69bb      	ldr	r3, [r7, #24]
10000d10:	689a      	ldr	r2, [r3, #8]
10000d12:	79fb      	ldrb	r3, [r7, #7]
10000d14:	2b00      	cmp	r3, #0
10000d16:	d102      	bne.n	10000d1e <HAL_IPCC_NotifyCPU+0x32>
10000d18:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10000d1c:	e000      	b.n	10000d20 <HAL_IPCC_NotifyCPU+0x34>
10000d1e:	2101      	movs	r1, #1
10000d20:	68bb      	ldr	r3, [r7, #8]
10000d22:	f003 030f 	and.w	r3, r3, #15
10000d26:	fa01 f303 	lsl.w	r3, r1, r3
10000d2a:	431a      	orrs	r2, r3
10000d2c:	69bb      	ldr	r3, [r7, #24]
10000d2e:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10000d30:	79fb      	ldrb	r3, [r7, #7]
10000d32:	2b00      	cmp	r3, #0
10000d34:	d102      	bne.n	10000d3c <HAL_IPCC_NotifyCPU+0x50>
10000d36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
10000d3a:	e000      	b.n	10000d3e <HAL_IPCC_NotifyCPU+0x52>
10000d3c:	2201      	movs	r2, #1
10000d3e:	68bb      	ldr	r3, [r7, #8]
10000d40:	f003 030f 	and.w	r3, r3, #15
10000d44:	fa02 f303 	lsl.w	r3, r2, r3
10000d48:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
10000d4a:	68fb      	ldr	r3, [r7, #12]
10000d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10000d4e:	697b      	ldr	r3, [r7, #20]
10000d50:	4013      	ands	r3, r2
10000d52:	697a      	ldr	r2, [r7, #20]
10000d54:	429a      	cmp	r2, r3
10000d56:	d107      	bne.n	10000d68 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10000d58:	79fb      	ldrb	r3, [r7, #7]
10000d5a:	4619      	mov	r1, r3
10000d5c:	68b8      	ldr	r0, [r7, #8]
10000d5e:	f000 f8bf 	bl	10000ee0 <IPCC_UnmaskInterrupt>
10000d62:	e001      	b.n	10000d68 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10000d64:	2301      	movs	r3, #1
10000d66:	77fb      	strb	r3, [r7, #31]
  }

  return err;
10000d68:	7ffb      	ldrb	r3, [r7, #31]
}
10000d6a:	4618      	mov	r0, r3
10000d6c:	3720      	adds	r7, #32
10000d6e:	46bd      	mov	sp, r7
10000d70:	bd80      	pop	{r7, pc}
10000d72:	bf00      	nop
10000d74:	4c001010 	.word	0x4c001010

10000d78 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10000d78:	b580      	push	{r7, lr}
10000d7a:	b086      	sub	sp, #24
10000d7c:	af00      	add	r7, sp, #0
10000d7e:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10000d80:	2300      	movs	r3, #0
10000d82:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000d84:	4b22      	ldr	r3, [pc, #136]	@ (10000e10 <HAL_IPCC_TX_IRQHandler+0x98>)
10000d86:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
10000d88:	68fb      	ldr	r3, [r7, #12]
10000d8a:	685b      	ldr	r3, [r3, #4]
10000d8c:	43db      	mvns	r3, r3
10000d8e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
10000d92:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
10000d94:	68fb      	ldr	r3, [r7, #12]
10000d96:	68db      	ldr	r3, [r3, #12]
10000d98:	041b      	lsls	r3, r3, #16
10000d9a:	43db      	mvns	r3, r3
10000d9c:	697a      	ldr	r2, [r7, #20]
10000d9e:	4013      	ands	r3, r2
10000da0:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10000da2:	e02c      	b.n	10000dfe <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
10000da4:	693b      	ldr	r3, [r7, #16]
10000da6:	f003 030f 	and.w	r3, r3, #15
10000daa:	3310      	adds	r3, #16
10000dac:	2201      	movs	r2, #1
10000dae:	fa02 f303 	lsl.w	r3, r2, r3
10000db2:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
10000db4:	697a      	ldr	r2, [r7, #20]
10000db6:	68bb      	ldr	r3, [r7, #8]
10000db8:	4013      	ands	r3, r2
10000dba:	2b00      	cmp	r3, #0
10000dbc:	d01c      	beq.n	10000df8 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
10000dbe:	68fb      	ldr	r3, [r7, #12]
10000dc0:	685a      	ldr	r2, [r3, #4]
10000dc2:	68bb      	ldr	r3, [r7, #8]
10000dc4:	431a      	orrs	r2, r3
10000dc6:	68fb      	ldr	r3, [r7, #12]
10000dc8:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
10000dca:	687a      	ldr	r2, [r7, #4]
10000dcc:	693b      	ldr	r3, [r7, #16]
10000dce:	3306      	adds	r3, #6
10000dd0:	009b      	lsls	r3, r3, #2
10000dd2:	4413      	add	r3, r2
10000dd4:	685b      	ldr	r3, [r3, #4]
10000dd6:	2b00      	cmp	r3, #0
10000dd8:	d009      	beq.n	10000dee <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
10000dda:	687a      	ldr	r2, [r7, #4]
10000ddc:	693b      	ldr	r3, [r7, #16]
10000dde:	3306      	adds	r3, #6
10000de0:	009b      	lsls	r3, r3, #2
10000de2:	4413      	add	r3, r2
10000de4:	685b      	ldr	r3, [r3, #4]
10000de6:	2200      	movs	r2, #0
10000de8:	6939      	ldr	r1, [r7, #16]
10000dea:	6878      	ldr	r0, [r7, #4]
10000dec:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
10000dee:	68bb      	ldr	r3, [r7, #8]
10000df0:	43db      	mvns	r3, r3
10000df2:	697a      	ldr	r2, [r7, #20]
10000df4:	4013      	ands	r3, r2
10000df6:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
10000df8:	693b      	ldr	r3, [r7, #16]
10000dfa:	3301      	adds	r3, #1
10000dfc:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10000dfe:	697b      	ldr	r3, [r7, #20]
10000e00:	2b00      	cmp	r3, #0
10000e02:	d1cf      	bne.n	10000da4 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
10000e04:	bf00      	nop
10000e06:	bf00      	nop
10000e08:	3718      	adds	r7, #24
10000e0a:	46bd      	mov	sp, r7
10000e0c:	bd80      	pop	{r7, pc}
10000e0e:	bf00      	nop
10000e10:	4c001010 	.word	0x4c001010

10000e14 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10000e14:	b580      	push	{r7, lr}
10000e16:	b088      	sub	sp, #32
10000e18:	af00      	add	r7, sp, #0
10000e1a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10000e1c:	2300      	movs	r3, #0
10000e1e:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000e20:	4b20      	ldr	r3, [pc, #128]	@ (10000ea4 <HAL_IPCC_RX_IRQHandler+0x90>)
10000e22:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10000e24:	4b20      	ldr	r3, [pc, #128]	@ (10000ea8 <HAL_IPCC_RX_IRQHandler+0x94>)
10000e26:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
10000e28:	697b      	ldr	r3, [r7, #20]
10000e2a:	685b      	ldr	r3, [r3, #4]
10000e2c:	43db      	mvns	r3, r3
10000e2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10000e32:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
10000e34:	693b      	ldr	r3, [r7, #16]
10000e36:	68db      	ldr	r3, [r3, #12]
10000e38:	69fa      	ldr	r2, [r7, #28]
10000e3a:	4013      	ands	r3, r2
10000e3c:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10000e3e:	e029      	b.n	10000e94 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10000e40:	69bb      	ldr	r3, [r7, #24]
10000e42:	f003 030f 	and.w	r3, r3, #15
10000e46:	2201      	movs	r2, #1
10000e48:	fa02 f303 	lsl.w	r3, r2, r3
10000e4c:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
10000e4e:	69fa      	ldr	r2, [r7, #28]
10000e50:	68fb      	ldr	r3, [r7, #12]
10000e52:	4013      	ands	r3, r2
10000e54:	2b00      	cmp	r3, #0
10000e56:	d01a      	beq.n	10000e8e <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
10000e58:	697b      	ldr	r3, [r7, #20]
10000e5a:	685a      	ldr	r2, [r3, #4]
10000e5c:	68fb      	ldr	r3, [r7, #12]
10000e5e:	431a      	orrs	r2, r3
10000e60:	697b      	ldr	r3, [r7, #20]
10000e62:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10000e64:	687a      	ldr	r2, [r7, #4]
10000e66:	69bb      	ldr	r3, [r7, #24]
10000e68:	009b      	lsls	r3, r3, #2
10000e6a:	4413      	add	r3, r2
10000e6c:	685b      	ldr	r3, [r3, #4]
10000e6e:	2b00      	cmp	r3, #0
10000e70:	d008      	beq.n	10000e84 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10000e72:	687a      	ldr	r2, [r7, #4]
10000e74:	69bb      	ldr	r3, [r7, #24]
10000e76:	009b      	lsls	r3, r3, #2
10000e78:	4413      	add	r3, r2
10000e7a:	685b      	ldr	r3, [r3, #4]
10000e7c:	2201      	movs	r2, #1
10000e7e:	69b9      	ldr	r1, [r7, #24]
10000e80:	6878      	ldr	r0, [r7, #4]
10000e82:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10000e84:	68fb      	ldr	r3, [r7, #12]
10000e86:	43db      	mvns	r3, r3
10000e88:	69fa      	ldr	r2, [r7, #28]
10000e8a:	4013      	ands	r3, r2
10000e8c:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
10000e8e:	69bb      	ldr	r3, [r7, #24]
10000e90:	3301      	adds	r3, #1
10000e92:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10000e94:	69fb      	ldr	r3, [r7, #28]
10000e96:	2b00      	cmp	r3, #0
10000e98:	d1d2      	bne.n	10000e40 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
10000e9a:	bf00      	nop
10000e9c:	bf00      	nop
10000e9e:	3720      	adds	r7, #32
10000ea0:	46bd      	mov	sp, r7
10000ea2:	bd80      	pop	{r7, pc}
10000ea4:	4c001010 	.word	0x4c001010
10000ea8:	4c001000 	.word	0x4c001000

10000eac <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000eac:	b480      	push	{r7}
10000eae:	b085      	sub	sp, #20
10000eb0:	af00      	add	r7, sp, #0
10000eb2:	60f8      	str	r0, [r7, #12]
10000eb4:	60b9      	str	r1, [r7, #8]
10000eb6:	4613      	mov	r3, r2
10000eb8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
10000eba:	bf00      	nop
10000ebc:	3714      	adds	r7, #20
10000ebe:	46bd      	mov	sp, r7
10000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
10000ec4:	4770      	bx	lr

10000ec6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000ec6:	b480      	push	{r7}
10000ec8:	b085      	sub	sp, #20
10000eca:	af00      	add	r7, sp, #0
10000ecc:	60f8      	str	r0, [r7, #12]
10000ece:	60b9      	str	r1, [r7, #8]
10000ed0:	4613      	mov	r3, r2
10000ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
10000ed4:	bf00      	nop
10000ed6:	3714      	adds	r7, #20
10000ed8:	46bd      	mov	sp, r7
10000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
10000ede:	4770      	bx	lr

10000ee0 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000ee0:	b480      	push	{r7}
10000ee2:	b085      	sub	sp, #20
10000ee4:	af00      	add	r7, sp, #0
10000ee6:	6078      	str	r0, [r7, #4]
10000ee8:	460b      	mov	r3, r1
10000eea:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000eec:	4b12      	ldr	r3, [pc, #72]	@ (10000f38 <IPCC_UnmaskInterrupt+0x58>)
10000eee:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10000ef0:	78fb      	ldrb	r3, [r7, #3]
10000ef2:	2b00      	cmp	r3, #0
10000ef4:	d10d      	bne.n	10000f12 <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10000ef6:	68fb      	ldr	r3, [r7, #12]
10000ef8:	685a      	ldr	r2, [r3, #4]
10000efa:	687b      	ldr	r3, [r7, #4]
10000efc:	f003 030f 	and.w	r3, r3, #15
10000f00:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10000f04:	fa01 f303 	lsl.w	r3, r1, r3
10000f08:	43db      	mvns	r3, r3
10000f0a:	401a      	ands	r2, r3
10000f0c:	68fb      	ldr	r3, [r7, #12]
10000f0e:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
10000f10:	e00b      	b.n	10000f2a <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10000f12:	68fb      	ldr	r3, [r7, #12]
10000f14:	685a      	ldr	r2, [r3, #4]
10000f16:	687b      	ldr	r3, [r7, #4]
10000f18:	f003 030f 	and.w	r3, r3, #15
10000f1c:	2101      	movs	r1, #1
10000f1e:	fa01 f303 	lsl.w	r3, r1, r3
10000f22:	43db      	mvns	r3, r3
10000f24:	401a      	ands	r2, r3
10000f26:	68fb      	ldr	r3, [r7, #12]
10000f28:	605a      	str	r2, [r3, #4]
}
10000f2a:	bf00      	nop
10000f2c:	3714      	adds	r7, #20
10000f2e:	46bd      	mov	sp, r7
10000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f34:	4770      	bx	lr
10000f36:	bf00      	nop
10000f38:	4c001010 	.word	0x4c001010

10000f3c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
10000f3c:	b480      	push	{r7}
10000f3e:	b085      	sub	sp, #20
10000f40:	af00      	add	r7, sp, #0
10000f42:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10000f44:	2300      	movs	r3, #0
10000f46:	60fb      	str	r3, [r7, #12]
10000f48:	e00f      	b.n	10000f6a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
10000f4a:	687a      	ldr	r2, [r7, #4]
10000f4c:	68fb      	ldr	r3, [r7, #12]
10000f4e:	009b      	lsls	r3, r3, #2
10000f50:	4413      	add	r3, r2
10000f52:	4a0b      	ldr	r2, [pc, #44]	@ (10000f80 <IPCC_SetDefaultCallbacks+0x44>)
10000f54:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
10000f56:	687a      	ldr	r2, [r7, #4]
10000f58:	68fb      	ldr	r3, [r7, #12]
10000f5a:	3306      	adds	r3, #6
10000f5c:	009b      	lsls	r3, r3, #2
10000f5e:	4413      	add	r3, r2
10000f60:	4a08      	ldr	r2, [pc, #32]	@ (10000f84 <IPCC_SetDefaultCallbacks+0x48>)
10000f62:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10000f64:	68fb      	ldr	r3, [r7, #12]
10000f66:	3301      	adds	r3, #1
10000f68:	60fb      	str	r3, [r7, #12]
10000f6a:	68fb      	ldr	r3, [r7, #12]
10000f6c:	2b05      	cmp	r3, #5
10000f6e:	d9ec      	bls.n	10000f4a <IPCC_SetDefaultCallbacks+0xe>
  }
}
10000f70:	bf00      	nop
10000f72:	bf00      	nop
10000f74:	3714      	adds	r7, #20
10000f76:	46bd      	mov	sp, r7
10000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f7c:	4770      	bx	lr
10000f7e:	bf00      	nop
10000f80:	10000ead 	.word	0x10000ead
10000f84:	10000ec7 	.word	0x10000ec7

10000f88 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
10000f88:	b480      	push	{r7}
10000f8a:	b083      	sub	sp, #12
10000f8c:	af00      	add	r7, sp, #0
10000f8e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
10000f90:	687b      	ldr	r3, [r7, #4]
10000f92:	2200      	movs	r2, #0
10000f94:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10000f96:	687b      	ldr	r3, [r7, #4]
10000f98:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
10000f9c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
10000f9e:	687b      	ldr	r3, [r7, #4]
10000fa0:	223f      	movs	r2, #63	@ 0x3f
10000fa2:	609a      	str	r2, [r3, #8]
}
10000fa4:	bf00      	nop
10000fa6:	370c      	adds	r7, #12
10000fa8:	46bd      	mov	sp, r7
10000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
10000fae:	4770      	bx	lr

10000fb0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10000fb0:	b480      	push	{r7}
10000fb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10000fb4:	4b05      	ldr	r3, [pc, #20]	@ (10000fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
10000fb6:	681b      	ldr	r3, [r3, #0]
10000fb8:	4a04      	ldr	r2, [pc, #16]	@ (10000fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
10000fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10000fbe:	6013      	str	r3, [r2, #0]
}
10000fc0:	bf00      	nop
10000fc2:	46bd      	mov	sp, r7
10000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
10000fc8:	4770      	bx	lr
10000fca:	bf00      	nop
10000fcc:	50001000 	.word	0x50001000

10000fd0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10000fd0:	b580      	push	{r7, lr}
10000fd2:	b084      	sub	sp, #16
10000fd4:	af00      	add	r7, sp, #0
10000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10000fd8:	2300      	movs	r3, #0
10000fda:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10000fdc:	687b      	ldr	r3, [r7, #4]
10000fde:	2b00      	cmp	r3, #0
10000fe0:	d101      	bne.n	10000fe6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10000fe2:	2301      	movs	r3, #1
10000fe4:	e320      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10000fe6:	687b      	ldr	r3, [r7, #4]
10000fe8:	681b      	ldr	r3, [r3, #0]
10000fea:	f003 0301 	and.w	r3, r3, #1
10000fee:	2b00      	cmp	r3, #0
10000ff0:	f000 8081 	beq.w	100010f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10000ff4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ff8:	6a1b      	ldr	r3, [r3, #32]
10000ffa:	f003 0303 	and.w	r3, r3, #3
10000ffe:	2b01      	cmp	r3, #1
10001000:	d107      	bne.n	10001012 <HAL_RCC_OscConfig+0x42>
10001002:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001006:	6a1b      	ldr	r3, [r3, #32]
10001008:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000100c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001010:	d054      	beq.n	100010bc <HAL_RCC_OscConfig+0xec>
10001012:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001018:	f003 0307 	and.w	r3, r3, #7
1000101c:	2b01      	cmp	r3, #1
1000101e:	d107      	bne.n	10001030 <HAL_RCC_OscConfig+0x60>
10001020:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001026:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000102a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000102e:	d045      	beq.n	100010bc <HAL_RCC_OscConfig+0xec>
10001030:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001036:	f003 0303 	and.w	r3, r3, #3
1000103a:	2b01      	cmp	r3, #1
1000103c:	d107      	bne.n	1000104e <HAL_RCC_OscConfig+0x7e>
1000103e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001044:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001048:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000104c:	d036      	beq.n	100010bc <HAL_RCC_OscConfig+0xec>
1000104e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001054:	f003 0303 	and.w	r3, r3, #3
10001058:	2b01      	cmp	r3, #1
1000105a:	d10f      	bne.n	1000107c <HAL_RCC_OscConfig+0xac>
1000105c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001064:	f003 0302 	and.w	r3, r3, #2
10001068:	2b02      	cmp	r3, #2
1000106a:	d027      	beq.n	100010bc <HAL_RCC_OscConfig+0xec>
1000106c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001074:	f003 0302 	and.w	r3, r3, #2
10001078:	2b02      	cmp	r3, #2
1000107a:	d01f      	beq.n	100010bc <HAL_RCC_OscConfig+0xec>
1000107c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001080:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001084:	f003 0303 	and.w	r3, r3, #3
10001088:	2b01      	cmp	r3, #1
1000108a:	d107      	bne.n	1000109c <HAL_RCC_OscConfig+0xcc>
1000108c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001090:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001094:	f003 0302 	and.w	r3, r3, #2
10001098:	2b02      	cmp	r3, #2
1000109a:	d00f      	beq.n	100010bc <HAL_RCC_OscConfig+0xec>
1000109c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010a0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100010a4:	f003 0303 	and.w	r3, r3, #3
100010a8:	2b01      	cmp	r3, #1
100010aa:	d117      	bne.n	100010dc <HAL_RCC_OscConfig+0x10c>
100010ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010b0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100010b4:	f003 0302 	and.w	r3, r3, #2
100010b8:	2b02      	cmp	r3, #2
100010ba:	d10f      	bne.n	100010dc <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
100010bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010c0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100010c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100010c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100010cc:	d112      	bne.n	100010f4 <HAL_RCC_OscConfig+0x124>
100010ce:	687b      	ldr	r3, [r7, #4]
100010d0:	685b      	ldr	r3, [r3, #4]
100010d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100010d6:	d00d      	beq.n	100010f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
100010d8:	2301      	movs	r3, #1
100010da:	e2a5      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
100010dc:	687b      	ldr	r3, [r7, #4]
100010de:	685b      	ldr	r3, [r3, #4]
100010e0:	4618      	mov	r0, r3
100010e2:	f000 faa7 	bl	10001634 <HAL_RCC_HSEConfig>
100010e6:	4603      	mov	r3, r0
100010e8:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
100010ea:	7bfb      	ldrb	r3, [r7, #15]
100010ec:	2b00      	cmp	r3, #0
100010ee:	d002      	beq.n	100010f6 <HAL_RCC_OscConfig+0x126>
      {
        return result;
100010f0:	7bfb      	ldrb	r3, [r7, #15]
100010f2:	e299      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
100010f4:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
100010f6:	687b      	ldr	r3, [r7, #4]
100010f8:	681b      	ldr	r3, [r3, #0]
100010fa:	f003 0302 	and.w	r3, r3, #2
100010fe:	2b00      	cmp	r3, #0
10001100:	f000 814e 	beq.w	100013a0 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10001104:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001108:	6a1b      	ldr	r3, [r3, #32]
1000110a:	f003 0303 	and.w	r3, r3, #3
1000110e:	2b00      	cmp	r3, #0
10001110:	d107      	bne.n	10001122 <HAL_RCC_OscConfig+0x152>
10001112:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001116:	6a1b      	ldr	r3, [r3, #32]
10001118:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000111c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001120:	d055      	beq.n	100011ce <HAL_RCC_OscConfig+0x1fe>
10001122:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001128:	f003 0307 	and.w	r3, r3, #7
1000112c:	2b00      	cmp	r3, #0
1000112e:	d107      	bne.n	10001140 <HAL_RCC_OscConfig+0x170>
10001130:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001136:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000113a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000113e:	d046      	beq.n	100011ce <HAL_RCC_OscConfig+0x1fe>
10001140:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001146:	f003 0303 	and.w	r3, r3, #3
1000114a:	2b00      	cmp	r3, #0
1000114c:	d107      	bne.n	1000115e <HAL_RCC_OscConfig+0x18e>
1000114e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001154:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001158:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000115c:	d037      	beq.n	100011ce <HAL_RCC_OscConfig+0x1fe>
1000115e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001164:	f003 0303 	and.w	r3, r3, #3
10001168:	2b00      	cmp	r3, #0
1000116a:	d10f      	bne.n	1000118c <HAL_RCC_OscConfig+0x1bc>
1000116c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001174:	f003 0302 	and.w	r3, r3, #2
10001178:	2b02      	cmp	r3, #2
1000117a:	d028      	beq.n	100011ce <HAL_RCC_OscConfig+0x1fe>
1000117c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001184:	f003 0302 	and.w	r3, r3, #2
10001188:	2b02      	cmp	r3, #2
1000118a:	d020      	beq.n	100011ce <HAL_RCC_OscConfig+0x1fe>
1000118c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001190:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001194:	f003 0303 	and.w	r3, r3, #3
10001198:	2b00      	cmp	r3, #0
1000119a:	d107      	bne.n	100011ac <HAL_RCC_OscConfig+0x1dc>
1000119c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011a0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100011a4:	f003 0302 	and.w	r3, r3, #2
100011a8:	2b02      	cmp	r3, #2
100011aa:	d010      	beq.n	100011ce <HAL_RCC_OscConfig+0x1fe>
100011ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011b0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100011b4:	f003 0303 	and.w	r3, r3, #3
100011b8:	2b00      	cmp	r3, #0
100011ba:	f040 8088 	bne.w	100012ce <HAL_RCC_OscConfig+0x2fe>
100011be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011c2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100011c6:	f003 0302 	and.w	r3, r3, #2
100011ca:	2b02      	cmp	r3, #2
100011cc:	d17f      	bne.n	100012ce <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100011ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011d2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100011d6:	f003 0301 	and.w	r3, r3, #1
100011da:	2b01      	cmp	r3, #1
100011dc:	d105      	bne.n	100011ea <HAL_RCC_OscConfig+0x21a>
100011de:	687b      	ldr	r3, [r7, #4]
100011e0:	68db      	ldr	r3, [r3, #12]
100011e2:	2b01      	cmp	r3, #1
100011e4:	d001      	beq.n	100011ea <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
100011e6:	2301      	movs	r3, #1
100011e8:	e21e      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100011ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011ee:	699b      	ldr	r3, [r3, #24]
100011f0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
100011f4:	687b      	ldr	r3, [r7, #4]
100011f6:	691b      	ldr	r3, [r3, #16]
100011f8:	021b      	lsls	r3, r3, #8
100011fa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100011fe:	4313      	orrs	r3, r2
10001200:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10001202:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001208:	f003 0303 	and.w	r3, r3, #3
1000120c:	2b00      	cmp	r3, #0
1000120e:	d10f      	bne.n	10001230 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10001210:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001218:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
1000121c:	2b02      	cmp	r3, #2
1000121e:	d047      	beq.n	100012b0 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10001220:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001228:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
1000122c:	2b02      	cmp	r3, #2
1000122e:	d03f      	beq.n	100012b0 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10001230:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001234:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001238:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
1000123c:	2b00      	cmp	r3, #0
1000123e:	d107      	bne.n	10001250 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10001240:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001244:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001248:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
1000124c:	2b02      	cmp	r3, #2
1000124e:	d02f      	beq.n	100012b0 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10001250:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001254:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001258:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
1000125c:	2b00      	cmp	r3, #0
1000125e:	d107      	bne.n	10001270 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10001260:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001264:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001268:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
1000126c:	2b02      	cmp	r3, #2
1000126e:	d01f      	beq.n	100012b0 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10001270:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001274:	699b      	ldr	r3, [r3, #24]
10001276:	f023 0203 	bic.w	r2, r3, #3
1000127a:	687b      	ldr	r3, [r7, #4]
1000127c:	695b      	ldr	r3, [r3, #20]
1000127e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001282:	4313      	orrs	r3, r2
10001284:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10001286:	f7ff fb5f 	bl	10000948 <HAL_GetTick>
1000128a:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000128c:	e008      	b.n	100012a0 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000128e:	f7ff fb5b 	bl	10000948 <HAL_GetTick>
10001292:	4602      	mov	r2, r0
10001294:	68bb      	ldr	r3, [r7, #8]
10001296:	1ad3      	subs	r3, r2, r3
10001298:	2b64      	cmp	r3, #100	@ 0x64
1000129a:	d901      	bls.n	100012a0 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
1000129c:	2303      	movs	r3, #3
1000129e:	e1c3      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100012a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012a4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100012a8:	f003 0304 	and.w	r3, r3, #4
100012ac:	2b04      	cmp	r3, #4
100012ae:	d1ee      	bne.n	1000128e <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
100012b0:	f001 f809 	bl	100022c6 <HAL_RCC_GetSystemCoreClockFreq>
100012b4:	4603      	mov	r3, r0
100012b6:	4ab3      	ldr	r2, [pc, #716]	@ (10001584 <HAL_RCC_OscConfig+0x5b4>)
100012b8:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
100012ba:	4bb3      	ldr	r3, [pc, #716]	@ (10001588 <HAL_RCC_OscConfig+0x5b8>)
100012bc:	681b      	ldr	r3, [r3, #0]
100012be:	4618      	mov	r0, r3
100012c0:	f7ff faf8 	bl	100008b4 <HAL_InitTick>
100012c4:	4603      	mov	r3, r0
100012c6:	2b00      	cmp	r3, #0
100012c8:	d069      	beq.n	1000139e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
100012ca:	2301      	movs	r3, #1
100012cc:	e1ac      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
100012ce:	687b      	ldr	r3, [r7, #4]
100012d0:	68db      	ldr	r3, [r3, #12]
100012d2:	2b00      	cmp	r3, #0
100012d4:	d049      	beq.n	1000136a <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
100012d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012da:	68db      	ldr	r3, [r3, #12]
100012dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100012e0:	f043 0301 	orr.w	r3, r3, #1
100012e4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100012e6:	f7ff fb2f 	bl	10000948 <HAL_GetTick>
100012ea:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100012ec:	e008      	b.n	10001300 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100012ee:	f7ff fb2b 	bl	10000948 <HAL_GetTick>
100012f2:	4602      	mov	r2, r0
100012f4:	68bb      	ldr	r3, [r7, #8]
100012f6:	1ad3      	subs	r3, r2, r3
100012f8:	2b64      	cmp	r3, #100	@ 0x64
100012fa:	d901      	bls.n	10001300 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
100012fc:	2303      	movs	r3, #3
100012fe:	e193      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001300:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001304:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001308:	f003 0301 	and.w	r3, r3, #1
1000130c:	2b01      	cmp	r3, #1
1000130e:	d1ee      	bne.n	100012ee <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10001310:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001314:	699b      	ldr	r3, [r3, #24]
10001316:	f023 0203 	bic.w	r2, r3, #3
1000131a:	687b      	ldr	r3, [r7, #4]
1000131c:	695b      	ldr	r3, [r3, #20]
1000131e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001322:	4313      	orrs	r3, r2
10001324:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001326:	f7ff fb0f 	bl	10000948 <HAL_GetTick>
1000132a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000132c:	e008      	b.n	10001340 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000132e:	f7ff fb0b 	bl	10000948 <HAL_GetTick>
10001332:	4602      	mov	r2, r0
10001334:	68bb      	ldr	r3, [r7, #8]
10001336:	1ad3      	subs	r3, r2, r3
10001338:	2b64      	cmp	r3, #100	@ 0x64
1000133a:	d901      	bls.n	10001340 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
1000133c:	2303      	movs	r3, #3
1000133e:	e173      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10001340:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001344:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001348:	f003 0304 	and.w	r3, r3, #4
1000134c:	2b04      	cmp	r3, #4
1000134e:	d1ee      	bne.n	1000132e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10001350:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001354:	699b      	ldr	r3, [r3, #24]
10001356:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
1000135a:	687b      	ldr	r3, [r7, #4]
1000135c:	691b      	ldr	r3, [r3, #16]
1000135e:	021b      	lsls	r3, r3, #8
10001360:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001364:	4313      	orrs	r3, r2
10001366:	618b      	str	r3, [r1, #24]
10001368:	e01a      	b.n	100013a0 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
1000136a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000136e:	2201      	movs	r2, #1
10001370:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001372:	f7ff fae9 	bl	10000948 <HAL_GetTick>
10001376:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10001378:	e008      	b.n	1000138c <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000137a:	f7ff fae5 	bl	10000948 <HAL_GetTick>
1000137e:	4602      	mov	r2, r0
10001380:	68bb      	ldr	r3, [r7, #8]
10001382:	1ad3      	subs	r3, r2, r3
10001384:	2b64      	cmp	r3, #100	@ 0x64
10001386:	d901      	bls.n	1000138c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10001388:	2303      	movs	r3, #3
1000138a:	e14d      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
1000138c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001390:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001394:	f003 0301 	and.w	r3, r3, #1
10001398:	2b01      	cmp	r3, #1
1000139a:	d0ee      	beq.n	1000137a <HAL_RCC_OscConfig+0x3aa>
1000139c:	e000      	b.n	100013a0 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000139e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
100013a0:	687b      	ldr	r3, [r7, #4]
100013a2:	681b      	ldr	r3, [r3, #0]
100013a4:	f003 0310 	and.w	r3, r3, #16
100013a8:	2b00      	cmp	r3, #0
100013aa:	f000 8091 	beq.w	100014d0 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
100013ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013b2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100013b6:	f003 0303 	and.w	r3, r3, #3
100013ba:	2b02      	cmp	r3, #2
100013bc:	d107      	bne.n	100013ce <HAL_RCC_OscConfig+0x3fe>
100013be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013c2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100013c6:	f003 0302 	and.w	r3, r3, #2
100013ca:	2b02      	cmp	r3, #2
100013cc:	d01e      	beq.n	1000140c <HAL_RCC_OscConfig+0x43c>
100013ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100013d4:	f003 0303 	and.w	r3, r3, #3
100013d8:	2b02      	cmp	r3, #2
100013da:	d107      	bne.n	100013ec <HAL_RCC_OscConfig+0x41c>
100013dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100013e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100013e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100013ea:	d00f      	beq.n	1000140c <HAL_RCC_OscConfig+0x43c>
100013ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013f0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100013f4:	f003 0303 	and.w	r3, r3, #3
100013f8:	2b02      	cmp	r3, #2
100013fa:	d122      	bne.n	10001442 <HAL_RCC_OscConfig+0x472>
100013fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001400:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001404:	f003 0302 	and.w	r3, r3, #2
10001408:	2b02      	cmp	r3, #2
1000140a:	d11a      	bne.n	10001442 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
1000140c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001410:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001414:	f003 0310 	and.w	r3, r3, #16
10001418:	2b10      	cmp	r3, #16
1000141a:	d105      	bne.n	10001428 <HAL_RCC_OscConfig+0x458>
1000141c:	687b      	ldr	r3, [r7, #4]
1000141e:	69db      	ldr	r3, [r3, #28]
10001420:	2b10      	cmp	r3, #16
10001422:	d001      	beq.n	10001428 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10001424:	2301      	movs	r3, #1
10001426:	e0ff      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10001428:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000142c:	69db      	ldr	r3, [r3, #28]
1000142e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10001432:	687b      	ldr	r3, [r7, #4]
10001434:	6a1b      	ldr	r3, [r3, #32]
10001436:	021b      	lsls	r3, r3, #8
10001438:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000143c:	4313      	orrs	r3, r2
1000143e:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10001440:	e046      	b.n	100014d0 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10001442:	687b      	ldr	r3, [r7, #4]
10001444:	69db      	ldr	r3, [r3, #28]
10001446:	2b00      	cmp	r3, #0
10001448:	d029      	beq.n	1000149e <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
1000144a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000144e:	68db      	ldr	r3, [r3, #12]
10001450:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001454:	f043 0310 	orr.w	r3, r3, #16
10001458:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000145a:	f7ff fa75 	bl	10000948 <HAL_GetTick>
1000145e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001460:	e008      	b.n	10001474 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10001462:	f7ff fa71 	bl	10000948 <HAL_GetTick>
10001466:	4602      	mov	r2, r0
10001468:	68bb      	ldr	r3, [r7, #8]
1000146a:	1ad3      	subs	r3, r2, r3
1000146c:	2b64      	cmp	r3, #100	@ 0x64
1000146e:	d901      	bls.n	10001474 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10001470:	2303      	movs	r3, #3
10001472:	e0d9      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001474:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001478:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000147c:	f003 0310 	and.w	r3, r3, #16
10001480:	2b10      	cmp	r3, #16
10001482:	d1ee      	bne.n	10001462 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10001484:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001488:	69db      	ldr	r3, [r3, #28]
1000148a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
1000148e:	687b      	ldr	r3, [r7, #4]
10001490:	6a1b      	ldr	r3, [r3, #32]
10001492:	021b      	lsls	r3, r3, #8
10001494:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001498:	4313      	orrs	r3, r2
1000149a:	61cb      	str	r3, [r1, #28]
1000149c:	e018      	b.n	100014d0 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
1000149e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014a2:	2210      	movs	r2, #16
100014a4:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100014a6:	f7ff fa4f 	bl	10000948 <HAL_GetTick>
100014aa:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100014ac:	e008      	b.n	100014c0 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100014ae:	f7ff fa4b 	bl	10000948 <HAL_GetTick>
100014b2:	4602      	mov	r2, r0
100014b4:	68bb      	ldr	r3, [r7, #8]
100014b6:	1ad3      	subs	r3, r2, r3
100014b8:	2b64      	cmp	r3, #100	@ 0x64
100014ba:	d901      	bls.n	100014c0 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
100014bc:	2303      	movs	r3, #3
100014be:	e0b3      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100014c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014c4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100014c8:	f003 0310 	and.w	r3, r3, #16
100014cc:	2b10      	cmp	r3, #16
100014ce:	d0ee      	beq.n	100014ae <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
100014d0:	687b      	ldr	r3, [r7, #4]
100014d2:	681b      	ldr	r3, [r3, #0]
100014d4:	f003 0308 	and.w	r3, r3, #8
100014d8:	2b00      	cmp	r3, #0
100014da:	d042      	beq.n	10001562 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
100014dc:	687b      	ldr	r3, [r7, #4]
100014de:	699b      	ldr	r3, [r3, #24]
100014e0:	2b00      	cmp	r3, #0
100014e2:	d01f      	beq.n	10001524 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
100014e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014e8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
100014ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100014f0:	f043 0301 	orr.w	r3, r3, #1
100014f4:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100014f8:	f7ff fa26 	bl	10000948 <HAL_GetTick>
100014fc:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100014fe:	e008      	b.n	10001512 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001500:	f7ff fa22 	bl	10000948 <HAL_GetTick>
10001504:	4602      	mov	r2, r0
10001506:	68bb      	ldr	r3, [r7, #8]
10001508:	1ad3      	subs	r3, r2, r3
1000150a:	2b64      	cmp	r3, #100	@ 0x64
1000150c:	d901      	bls.n	10001512 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
1000150e:	2303      	movs	r3, #3
10001510:	e08a      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10001512:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001516:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000151a:	f003 0302 	and.w	r3, r3, #2
1000151e:	2b02      	cmp	r3, #2
10001520:	d1ee      	bne.n	10001500 <HAL_RCC_OscConfig+0x530>
10001522:	e01e      	b.n	10001562 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10001524:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001528:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000152c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001530:	f023 0301 	bic.w	r3, r3, #1
10001534:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001538:	f7ff fa06 	bl	10000948 <HAL_GetTick>
1000153c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000153e:	e008      	b.n	10001552 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001540:	f7ff fa02 	bl	10000948 <HAL_GetTick>
10001544:	4602      	mov	r2, r0
10001546:	68bb      	ldr	r3, [r7, #8]
10001548:	1ad3      	subs	r3, r2, r3
1000154a:	2b64      	cmp	r3, #100	@ 0x64
1000154c:	d901      	bls.n	10001552 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
1000154e:	2303      	movs	r3, #3
10001550:	e06a      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10001552:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001556:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000155a:	f003 0302 	and.w	r3, r3, #2
1000155e:	2b02      	cmp	r3, #2
10001560:	d0ee      	beq.n	10001540 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10001562:	687b      	ldr	r3, [r7, #4]
10001564:	681b      	ldr	r3, [r3, #0]
10001566:	f003 0304 	and.w	r3, r3, #4
1000156a:	2b00      	cmp	r3, #0
1000156c:	d02b      	beq.n	100015c6 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000156e:	4b07      	ldr	r3, [pc, #28]	@ (1000158c <HAL_RCC_OscConfig+0x5bc>)
10001570:	681b      	ldr	r3, [r3, #0]
10001572:	4a06      	ldr	r2, [pc, #24]	@ (1000158c <HAL_RCC_OscConfig+0x5bc>)
10001574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10001578:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
1000157a:	f7ff f9e5 	bl	10000948 <HAL_GetTick>
1000157e:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10001580:	e00f      	b.n	100015a2 <HAL_RCC_OscConfig+0x5d2>
10001582:	bf00      	nop
10001584:	10020000 	.word	0x10020000
10001588:	10020004 	.word	0x10020004
1000158c:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10001590:	f7ff f9da 	bl	10000948 <HAL_GetTick>
10001594:	4602      	mov	r2, r0
10001596:	68bb      	ldr	r3, [r7, #8]
10001598:	1ad3      	subs	r3, r2, r3
1000159a:	2b64      	cmp	r3, #100	@ 0x64
1000159c:	d901      	bls.n	100015a2 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
1000159e:	2303      	movs	r3, #3
100015a0:	e042      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100015a2:	4b23      	ldr	r3, [pc, #140]	@ (10001630 <HAL_RCC_OscConfig+0x660>)
100015a4:	681b      	ldr	r3, [r3, #0]
100015a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100015aa:	2b00      	cmp	r3, #0
100015ac:	d0f0      	beq.n	10001590 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
100015ae:	687b      	ldr	r3, [r7, #4]
100015b0:	689b      	ldr	r3, [r3, #8]
100015b2:	4618      	mov	r0, r3
100015b4:	f000 f8a9 	bl	1000170a <HAL_RCC_LSEConfig>
100015b8:	4603      	mov	r3, r0
100015ba:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
100015bc:	7bfb      	ldrb	r3, [r7, #15]
100015be:	2b00      	cmp	r3, #0
100015c0:	d001      	beq.n	100015c6 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
100015c2:	7bfb      	ldrb	r3, [r7, #15]
100015c4:	e030      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
100015c6:	687b      	ldr	r3, [r7, #4]
100015c8:	3324      	adds	r3, #36	@ 0x24
100015ca:	4618      	mov	r0, r3
100015cc:	f000 f91a 	bl	10001804 <RCC_PLL1_Config>
100015d0:	4603      	mov	r3, r0
100015d2:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100015d4:	7bfb      	ldrb	r3, [r7, #15]
100015d6:	2b00      	cmp	r3, #0
100015d8:	d001      	beq.n	100015de <HAL_RCC_OscConfig+0x60e>
  {
    return result;
100015da:	7bfb      	ldrb	r3, [r7, #15]
100015dc:	e024      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
100015de:	687b      	ldr	r3, [r7, #4]
100015e0:	3360      	adds	r3, #96	@ 0x60
100015e2:	4618      	mov	r0, r3
100015e4:	f000 fecc 	bl	10002380 <RCCEx_PLL2_Config>
100015e8:	4603      	mov	r3, r0
100015ea:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100015ec:	7bfb      	ldrb	r3, [r7, #15]
100015ee:	2b00      	cmp	r3, #0
100015f0:	d001      	beq.n	100015f6 <HAL_RCC_OscConfig+0x626>
  {
    return result;
100015f2:	7bfb      	ldrb	r3, [r7, #15]
100015f4:	e018      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
100015f6:	687b      	ldr	r3, [r7, #4]
100015f8:	339c      	adds	r3, #156	@ 0x9c
100015fa:	4618      	mov	r0, r3
100015fc:	f001 f842 	bl	10002684 <RCCEx_PLL3_Config>
10001600:	4603      	mov	r3, r0
10001602:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001604:	7bfb      	ldrb	r3, [r7, #15]
10001606:	2b00      	cmp	r3, #0
10001608:	d001      	beq.n	1000160e <HAL_RCC_OscConfig+0x63e>
  {
    return result;
1000160a:	7bfb      	ldrb	r3, [r7, #15]
1000160c:	e00c      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000160e:	687b      	ldr	r3, [r7, #4]
10001610:	33d8      	adds	r3, #216	@ 0xd8
10001612:	4618      	mov	r0, r3
10001614:	f001 f9a0 	bl	10002958 <RCCEx_PLL4_Config>
10001618:	4603      	mov	r3, r0
1000161a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000161c:	7bfb      	ldrb	r3, [r7, #15]
1000161e:	2b00      	cmp	r3, #0
10001620:	d001      	beq.n	10001626 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10001622:	7bfb      	ldrb	r3, [r7, #15]
10001624:	e000      	b.n	10001628 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10001626:	2300      	movs	r3, #0
}
10001628:	4618      	mov	r0, r3
1000162a:	3710      	adds	r7, #16
1000162c:	46bd      	mov	sp, r7
1000162e:	bd80      	pop	{r7, pc}
10001630:	50001000 	.word	0x50001000

10001634 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10001634:	b580      	push	{r7, lr}
10001636:	b084      	sub	sp, #16
10001638:	af00      	add	r7, sp, #0
1000163a:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
1000163c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001640:	f44f 7280 	mov.w	r2, #256	@ 0x100
10001644:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001646:	f7ff f97f 	bl	10000948 <HAL_GetTick>
1000164a:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
1000164c:	e008      	b.n	10001660 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000164e:	f7ff f97b 	bl	10000948 <HAL_GetTick>
10001652:	4602      	mov	r2, r0
10001654:	68fb      	ldr	r3, [r7, #12]
10001656:	1ad3      	subs	r3, r2, r3
10001658:	2b64      	cmp	r3, #100	@ 0x64
1000165a:	d901      	bls.n	10001660 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
1000165c:	2303      	movs	r3, #3
1000165e:	e050      	b.n	10001702 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001660:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001664:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000166c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001670:	d0ed      	beq.n	1000164e <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10001672:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001676:	f44f 6290 	mov.w	r2, #1152	@ 0x480
1000167a:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
1000167c:	687b      	ldr	r3, [r7, #4]
1000167e:	2b00      	cmp	r3, #0
10001680:	d03e      	beq.n	10001700 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10001682:	687b      	ldr	r3, [r7, #4]
10001684:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
10001688:	d108      	bne.n	1000169c <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
1000168a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000168e:	68db      	ldr	r3, [r3, #12]
10001690:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001694:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10001698:	60d3      	str	r3, [r2, #12]
1000169a:	e013      	b.n	100016c4 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
1000169c:	687b      	ldr	r3, [r7, #4]
1000169e:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
100016a2:	d10f      	bne.n	100016c4 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
100016a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016a8:	68db      	ldr	r3, [r3, #12]
100016aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100016ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
100016b2:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100016b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016b8:	68db      	ldr	r3, [r3, #12]
100016ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100016be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
100016c2:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
100016c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016c8:	68db      	ldr	r3, [r3, #12]
100016ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100016ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
100016d2:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100016d4:	f7ff f938 	bl	10000948 <HAL_GetTick>
100016d8:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100016da:	e008      	b.n	100016ee <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100016dc:	f7ff f934 	bl	10000948 <HAL_GetTick>
100016e0:	4602      	mov	r2, r0
100016e2:	68fb      	ldr	r3, [r7, #12]
100016e4:	1ad3      	subs	r3, r2, r3
100016e6:	2b64      	cmp	r3, #100	@ 0x64
100016e8:	d901      	bls.n	100016ee <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
100016ea:	2303      	movs	r3, #3
100016ec:	e009      	b.n	10001702 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100016ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016f2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100016f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100016fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100016fe:	d1ed      	bne.n	100016dc <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10001700:	2300      	movs	r3, #0
}
10001702:	4618      	mov	r0, r3
10001704:	3710      	adds	r7, #16
10001706:	46bd      	mov	sp, r7
10001708:	bd80      	pop	{r7, pc}

1000170a <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
1000170a:	b580      	push	{r7, lr}
1000170c:	b084      	sub	sp, #16
1000170e:	af00      	add	r7, sp, #0
10001710:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001712:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001716:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000171a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000171e:	f023 0301 	bic.w	r3, r3, #1
10001722:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001726:	f7ff f90f 	bl	10000948 <HAL_GetTick>
1000172a:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000172c:	e00a      	b.n	10001744 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000172e:	f7ff f90b 	bl	10000948 <HAL_GetTick>
10001732:	4602      	mov	r2, r0
10001734:	68fb      	ldr	r3, [r7, #12]
10001736:	1ad3      	subs	r3, r2, r3
10001738:	f241 3288 	movw	r2, #5000	@ 0x1388
1000173c:	4293      	cmp	r3, r2
1000173e:	d901      	bls.n	10001744 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10001740:	2303      	movs	r3, #3
10001742:	e05b      	b.n	100017fc <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001744:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001748:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000174c:	f003 0304 	and.w	r3, r3, #4
10001750:	2b04      	cmp	r3, #4
10001752:	d0ec      	beq.n	1000172e <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10001754:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001758:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000175c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001760:	f023 030a 	bic.w	r3, r3, #10
10001764:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10001768:	687b      	ldr	r3, [r7, #4]
1000176a:	2b00      	cmp	r3, #0
1000176c:	d045      	beq.n	100017fa <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
1000176e:	687b      	ldr	r3, [r7, #4]
10001770:	2b03      	cmp	r3, #3
10001772:	d10a      	bne.n	1000178a <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001774:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001778:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000177c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001780:	f043 0302 	orr.w	r3, r3, #2
10001784:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10001788:	e016      	b.n	100017b8 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
1000178a:	687b      	ldr	r3, [r7, #4]
1000178c:	2b0b      	cmp	r3, #11
1000178e:	d113      	bne.n	100017b8 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10001790:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001794:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001798:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000179c:	f043 0308 	orr.w	r3, r3, #8
100017a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100017a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100017ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100017b0:	f043 0302 	orr.w	r3, r3, #2
100017b4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100017b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100017c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100017c4:	f043 0301 	orr.w	r3, r3, #1
100017c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100017cc:	f7ff f8bc 	bl	10000948 <HAL_GetTick>
100017d0:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100017d2:	e00a      	b.n	100017ea <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100017d4:	f7ff f8b8 	bl	10000948 <HAL_GetTick>
100017d8:	4602      	mov	r2, r0
100017da:	68fb      	ldr	r3, [r7, #12]
100017dc:	1ad3      	subs	r3, r2, r3
100017de:	f241 3288 	movw	r2, #5000	@ 0x1388
100017e2:	4293      	cmp	r3, r2
100017e4:	d901      	bls.n	100017ea <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
100017e6:	2303      	movs	r3, #3
100017e8:	e008      	b.n	100017fc <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100017ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100017f2:	f003 0304 	and.w	r3, r3, #4
100017f6:	2b04      	cmp	r3, #4
100017f8:	d1ec      	bne.n	100017d4 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
100017fa:	2300      	movs	r3, #0
}
100017fc:	4618      	mov	r0, r3
100017fe:	3710      	adds	r7, #16
10001800:	46bd      	mov	sp, r7
10001802:	bd80      	pop	{r7, pc}

10001804 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10001804:	b580      	push	{r7, lr}
10001806:	b084      	sub	sp, #16
10001808:	af00      	add	r7, sp, #0
1000180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
1000180c:	687b      	ldr	r3, [r7, #4]
1000180e:	681b      	ldr	r3, [r3, #0]
10001810:	2b00      	cmp	r3, #0
10001812:	f000 8174 	beq.w	10001afe <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10001816:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000181a:	6a1b      	ldr	r3, [r3, #32]
1000181c:	f003 0303 	and.w	r3, r3, #3
10001820:	2b02      	cmp	r3, #2
10001822:	d108      	bne.n	10001836 <RCC_PLL1_Config+0x32>
10001824:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001828:	6a1b      	ldr	r3, [r3, #32]
1000182a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000182e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001832:	f000 8162 	beq.w	10001afa <RCC_PLL1_Config+0x2f6>
10001836:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000183a:	6a1b      	ldr	r3, [r3, #32]
1000183c:	f003 0303 	and.w	r3, r3, #3
10001840:	2b03      	cmp	r3, #3
10001842:	d108      	bne.n	10001856 <RCC_PLL1_Config+0x52>
10001844:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001848:	6a1b      	ldr	r3, [r3, #32]
1000184a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000184e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001852:	f000 8152 	beq.w	10001afa <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10001856:	687b      	ldr	r3, [r7, #4]
10001858:	681b      	ldr	r3, [r3, #0]
1000185a:	2b02      	cmp	r3, #2
1000185c:	f040 8123 	bne.w	10001aa6 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001860:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001868:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000186c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10001870:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10001874:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000187c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001880:	f023 0301 	bic.w	r3, r3, #1
10001884:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001888:	f7ff f85e 	bl	10000948 <HAL_GetTick>
1000188c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000188e:	e008      	b.n	100018a2 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001890:	f7ff f85a 	bl	10000948 <HAL_GetTick>
10001894:	4602      	mov	r2, r0
10001896:	68fb      	ldr	r3, [r7, #12]
10001898:	1ad3      	subs	r3, r2, r3
1000189a:	2b64      	cmp	r3, #100	@ 0x64
1000189c:	d901      	bls.n	100018a2 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000189e:	2303      	movs	r3, #3
100018a0:	e12e      	b.n	10001b00 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100018a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100018aa:	f003 0302 	and.w	r3, r3, #2
100018ae:	2b02      	cmp	r3, #2
100018b0:	d0ee      	beq.n	10001890 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
100018b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100018b8:	f003 0307 	and.w	r3, r3, #7
100018bc:	2b02      	cmp	r3, #2
100018be:	d112      	bne.n	100018e6 <RCC_PLL1_Config+0xe2>
100018c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100018c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100018ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100018ce:	d10a      	bne.n	100018e6 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100018d0:	687b      	ldr	r3, [r7, #4]
100018d2:	685a      	ldr	r2, [r3, #4]
100018d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100018da:	f003 0303 	and.w	r3, r3, #3
100018de:	429a      	cmp	r2, r3
100018e0:	d00c      	beq.n	100018fc <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
100018e2:	2301      	movs	r3, #1
100018e4:	e10c      	b.n	10001b00 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
100018e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100018ec:	f023 0203 	bic.w	r2, r3, #3
100018f0:	687b      	ldr	r3, [r7, #4]
100018f2:	685b      	ldr	r3, [r3, #4]
100018f4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100018f8:	4313      	orrs	r3, r2
100018fa:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
100018fc:	e008      	b.n	10001910 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100018fe:	f7ff f823 	bl	10000948 <HAL_GetTick>
10001902:	4602      	mov	r2, r0
10001904:	68fb      	ldr	r3, [r7, #12]
10001906:	1ad3      	subs	r3, r2, r3
10001908:	2b64      	cmp	r3, #100	@ 0x64
1000190a:	d901      	bls.n	10001910 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
1000190c:	2303      	movs	r3, #3
1000190e:	e0f7      	b.n	10001b00 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001910:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000191a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000191e:	d1ee      	bne.n	100018fe <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10001920:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001924:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
10001928:	4b77      	ldr	r3, [pc, #476]	@ (10001b08 <RCC_PLL1_Config+0x304>)
1000192a:	4013      	ands	r3, r2
1000192c:	687a      	ldr	r2, [r7, #4]
1000192e:	68d2      	ldr	r2, [r2, #12]
10001930:	1e51      	subs	r1, r2, #1
10001932:	687a      	ldr	r2, [r7, #4]
10001934:	6892      	ldr	r2, [r2, #8]
10001936:	3a01      	subs	r2, #1
10001938:	0412      	lsls	r2, r2, #16
1000193a:	430a      	orrs	r2, r1
1000193c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001940:	4313      	orrs	r3, r2
10001942:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
10001946:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000194e:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10001952:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10001956:	687a      	ldr	r2, [r7, #4]
10001958:	6912      	ldr	r2, [r2, #16]
1000195a:	1e51      	subs	r1, r2, #1
1000195c:	687a      	ldr	r2, [r7, #4]
1000195e:	6952      	ldr	r2, [r2, #20]
10001960:	3a01      	subs	r2, #1
10001962:	0212      	lsls	r2, r2, #8
10001964:	4311      	orrs	r1, r2
10001966:	687a      	ldr	r2, [r7, #4]
10001968:	6992      	ldr	r2, [r2, #24]
1000196a:	3a01      	subs	r2, #1
1000196c:	0412      	lsls	r2, r2, #16
1000196e:	430a      	orrs	r2, r1
10001970:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001974:	4313      	orrs	r3, r2
10001976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
1000197a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000197e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10001982:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
1000198a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
1000198e:	687b      	ldr	r3, [r7, #4]
10001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001992:	2b02      	cmp	r3, #2
10001994:	d003      	beq.n	1000199e <RCC_PLL1_Config+0x19a>
10001996:	687b      	ldr	r3, [r7, #4]
10001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000199a:	2b00      	cmp	r3, #0
1000199c:	d10c      	bne.n	100019b8 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
1000199e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100019a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100019aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100019ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100019b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
100019b6:	e00f      	b.n	100019d8 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
100019b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100019c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100019c4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100019c8:	687a      	ldr	r2, [r7, #4]
100019ca:	6a12      	ldr	r2, [r2, #32]
100019cc:	00d2      	lsls	r2, r2, #3
100019ce:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100019d2:	4313      	orrs	r3, r2
100019d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
100019d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100019e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100019e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
100019e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100019ec:	687b      	ldr	r3, [r7, #4]
100019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100019f0:	2b02      	cmp	r3, #2
100019f2:	d124      	bne.n	10001a3e <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
100019f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
100019fc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10001a00:	687b      	ldr	r3, [r7, #4]
10001a02:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10001a04:	687b      	ldr	r3, [r7, #4]
10001a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001a08:	4319      	orrs	r1, r3
10001a0a:	687b      	ldr	r3, [r7, #4]
10001a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001a0e:	4319      	orrs	r1, r3
10001a10:	687b      	ldr	r3, [r7, #4]
10001a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10001a14:	4319      	orrs	r1, r3
10001a16:	687b      	ldr	r3, [r7, #4]
10001a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10001a1a:	041b      	lsls	r3, r3, #16
10001a1c:	430b      	orrs	r3, r1
10001a1e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001a22:	4313      	orrs	r3, r2
10001a24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10001a28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001a30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001a34:	f043 0304 	orr.w	r3, r3, #4
10001a38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
10001a3c:	e009      	b.n	10001a52 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10001a3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001a46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001a4a:	f023 0304 	bic.w	r3, r3, #4
10001a4e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10001a52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001a5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001a5e:	f043 0301 	orr.w	r3, r3, #1
10001a62:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001a66:	f7fe ff6f 	bl	10000948 <HAL_GetTick>
10001a6a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001a6c:	e008      	b.n	10001a80 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001a6e:	f7fe ff6b 	bl	10000948 <HAL_GetTick>
10001a72:	4602      	mov	r2, r0
10001a74:	68fb      	ldr	r3, [r7, #12]
10001a76:	1ad3      	subs	r3, r2, r3
10001a78:	2b64      	cmp	r3, #100	@ 0x64
10001a7a:	d901      	bls.n	10001a80 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10001a7c:	2303      	movs	r3, #3
10001a7e:	e03f      	b.n	10001b00 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001a80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001a88:	f003 0302 	and.w	r3, r3, #2
10001a8c:	2b02      	cmp	r3, #2
10001a8e:	d1ee      	bne.n	10001a6e <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001a90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001a98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001a9c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10001aa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10001aa4:	e02b      	b.n	10001afe <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001aa6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001aae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10001ab6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10001aba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001ac2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001ac6:	f023 0301 	bic.w	r3, r3, #1
10001aca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001ace:	f7fe ff3b 	bl	10000948 <HAL_GetTick>
10001ad2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001ad4:	e008      	b.n	10001ae8 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001ad6:	f7fe ff37 	bl	10000948 <HAL_GetTick>
10001ada:	4602      	mov	r2, r0
10001adc:	68fb      	ldr	r3, [r7, #12]
10001ade:	1ad3      	subs	r3, r2, r3
10001ae0:	2b64      	cmp	r3, #100	@ 0x64
10001ae2:	d901      	bls.n	10001ae8 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10001ae4:	2303      	movs	r3, #3
10001ae6:	e00b      	b.n	10001b00 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001ae8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001af0:	f003 0302 	and.w	r3, r3, #2
10001af4:	2b02      	cmp	r3, #2
10001af6:	d0ee      	beq.n	10001ad6 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10001af8:	e001      	b.n	10001afe <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10001afa:	2301      	movs	r3, #1
10001afc:	e000      	b.n	10001b00 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
10001afe:	2300      	movs	r3, #0

}
10001b00:	4618      	mov	r0, r3
10001b02:	3710      	adds	r7, #16
10001b04:	46bd      	mov	sp, r7
10001b06:	bd80      	pop	{r7, pc}
10001b08:	ffc0fe00 	.word	0xffc0fe00

10001b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10001b0c:	b580      	push	{r7, lr}
10001b0e:	b084      	sub	sp, #16
10001b10:	af00      	add	r7, sp, #0
10001b12:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10001b14:	2300      	movs	r3, #0
10001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10001b18:	687b      	ldr	r3, [r7, #4]
10001b1a:	2b00      	cmp	r3, #0
10001b1c:	d101      	bne.n	10001b22 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10001b1e:	2301      	movs	r3, #1
10001b20:	e102      	b.n	10001d28 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10001b22:	687b      	ldr	r3, [r7, #4]
10001b24:	681b      	ldr	r3, [r3, #0]
10001b26:	f003 0301 	and.w	r3, r3, #1
10001b2a:	2b00      	cmp	r3, #0
10001b2c:	d00b      	beq.n	10001b46 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10001b2e:	687b      	ldr	r3, [r7, #4]
10001b30:	3304      	adds	r3, #4
10001b32:	4618      	mov	r0, r3
10001b34:	f000 f8fc 	bl	10001d30 <RCC_MPUConfig>
10001b38:	4603      	mov	r3, r0
10001b3a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001b3c:	7bfb      	ldrb	r3, [r7, #15]
10001b3e:	2b00      	cmp	r3, #0
10001b40:	d001      	beq.n	10001b46 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10001b42:	7bfb      	ldrb	r3, [r7, #15]
10001b44:	e0f0      	b.n	10001d28 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10001b46:	687b      	ldr	r3, [r7, #4]
10001b48:	681b      	ldr	r3, [r3, #0]
10001b4a:	f003 0302 	and.w	r3, r3, #2
10001b4e:	2b00      	cmp	r3, #0
10001b50:	d00b      	beq.n	10001b6a <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10001b52:	687b      	ldr	r3, [r7, #4]
10001b54:	330c      	adds	r3, #12
10001b56:	4618      	mov	r0, r3
10001b58:	f000 f960 	bl	10001e1c <RCC_AXISSConfig>
10001b5c:	4603      	mov	r3, r0
10001b5e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001b60:	7bfb      	ldrb	r3, [r7, #15]
10001b62:	2b00      	cmp	r3, #0
10001b64:	d001      	beq.n	10001b6a <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10001b66:	7bfb      	ldrb	r3, [r7, #15]
10001b68:	e0de      	b.n	10001d28 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10001b6a:	687b      	ldr	r3, [r7, #4]
10001b6c:	681b      	ldr	r3, [r3, #0]
10001b6e:	f003 0304 	and.w	r3, r3, #4
10001b72:	2b00      	cmp	r3, #0
10001b74:	d00b      	beq.n	10001b8e <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10001b76:	687b      	ldr	r3, [r7, #4]
10001b78:	3314      	adds	r3, #20
10001b7a:	4618      	mov	r0, r3
10001b7c:	f000 f9e6 	bl	10001f4c <RCC_MCUConfig>
10001b80:	4603      	mov	r3, r0
10001b82:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001b84:	7bfb      	ldrb	r3, [r7, #15]
10001b86:	2b00      	cmp	r3, #0
10001b88:	d001      	beq.n	10001b8e <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10001b8a:	7bfb      	ldrb	r3, [r7, #15]
10001b8c:	e0cc      	b.n	10001d28 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10001b8e:	687b      	ldr	r3, [r7, #4]
10001b90:	681b      	ldr	r3, [r3, #0]
10001b92:	f003 0308 	and.w	r3, r3, #8
10001b96:	2b00      	cmp	r3, #0
10001b98:	d020      	beq.n	10001bdc <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10001b9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10001ba0:	f023 0207 	bic.w	r2, r3, #7
10001ba4:	687b      	ldr	r3, [r7, #4]
10001ba6:	69db      	ldr	r3, [r3, #28]
10001ba8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001bac:	4313      	orrs	r3, r2
10001bae:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001bb0:	f7fe feca 	bl	10000948 <HAL_GetTick>
10001bb4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10001bb6:	e009      	b.n	10001bcc <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001bb8:	f7fe fec6 	bl	10000948 <HAL_GetTick>
10001bbc:	4602      	mov	r2, r0
10001bbe:	68bb      	ldr	r3, [r7, #8]
10001bc0:	1ad3      	subs	r3, r2, r3
10001bc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001bc6:	d901      	bls.n	10001bcc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10001bc8:	2303      	movs	r3, #3
10001bca:	e0ad      	b.n	10001d28 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10001bcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10001bd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001bda:	d1ed      	bne.n	10001bb8 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10001bdc:	687b      	ldr	r3, [r7, #4]
10001bde:	681b      	ldr	r3, [r3, #0]
10001be0:	f003 0310 	and.w	r3, r3, #16
10001be4:	2b00      	cmp	r3, #0
10001be6:	d020      	beq.n	10001c2a <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10001be8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10001bee:	f023 0207 	bic.w	r2, r3, #7
10001bf2:	687b      	ldr	r3, [r7, #4]
10001bf4:	6a1b      	ldr	r3, [r3, #32]
10001bf6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001bfa:	4313      	orrs	r3, r2
10001bfc:	640b      	str	r3, [r1, #64]	@ 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001bfe:	f7fe fea3 	bl	10000948 <HAL_GetTick>
10001c02:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001c04:	e009      	b.n	10001c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001c06:	f7fe fe9f 	bl	10000948 <HAL_GetTick>
10001c0a:	4602      	mov	r2, r0
10001c0c:	68bb      	ldr	r3, [r7, #8]
10001c0e:	1ad3      	subs	r3, r2, r3
10001c10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001c14:	d901      	bls.n	10001c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10001c16:	2303      	movs	r3, #3
10001c18:	e086      	b.n	10001d28 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001c1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10001c20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001c24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001c28:	d1ed      	bne.n	10001c06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10001c2a:	687b      	ldr	r3, [r7, #4]
10001c2c:	681b      	ldr	r3, [r3, #0]
10001c2e:	f003 0320 	and.w	r3, r3, #32
10001c32:	2b00      	cmp	r3, #0
10001c34:	d023      	beq.n	10001c7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10001c36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c3a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10001c3e:	f023 0207 	bic.w	r2, r3, #7
10001c42:	687b      	ldr	r3, [r7, #4]
10001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001c46:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001c4a:	4313      	orrs	r3, r2
10001c4c:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001c50:	f7fe fe7a 	bl	10000948 <HAL_GetTick>
10001c54:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001c56:	e009      	b.n	10001c6c <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001c58:	f7fe fe76 	bl	10000948 <HAL_GetTick>
10001c5c:	4602      	mov	r2, r0
10001c5e:	68bb      	ldr	r3, [r7, #8]
10001c60:	1ad3      	subs	r3, r2, r3
10001c62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001c66:	d901      	bls.n	10001c6c <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10001c68:	2303      	movs	r3, #3
10001c6a:	e05d      	b.n	10001d28 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001c6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c70:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10001c74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001c78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001c7c:	d1ec      	bne.n	10001c58 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10001c7e:	687b      	ldr	r3, [r7, #4]
10001c80:	681b      	ldr	r3, [r3, #0]
10001c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10001c86:	2b00      	cmp	r3, #0
10001c88:	d023      	beq.n	10001cd2 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10001c8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c8e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10001c92:	f023 0207 	bic.w	r2, r3, #7
10001c96:	687b      	ldr	r3, [r7, #4]
10001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001c9a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001c9e:	4313      	orrs	r3, r2
10001ca0:	f8c1 3838 	str.w	r3, [r1, #2104]	@ 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001ca4:	f7fe fe50 	bl	10000948 <HAL_GetTick>
10001ca8:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001caa:	e009      	b.n	10001cc0 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001cac:	f7fe fe4c 	bl	10000948 <HAL_GetTick>
10001cb0:	4602      	mov	r2, r0
10001cb2:	68bb      	ldr	r3, [r7, #8]
10001cb4:	1ad3      	subs	r3, r2, r3
10001cb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001cba:	d901      	bls.n	10001cc0 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10001cbc:	2303      	movs	r3, #3
10001cbe:	e033      	b.n	10001d28 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001cc0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001cc4:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10001cc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001cd0:	d1ec      	bne.n	10001cac <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10001cd2:	687b      	ldr	r3, [r7, #4]
10001cd4:	681b      	ldr	r3, [r3, #0]
10001cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
10001cda:	2b00      	cmp	r3, #0
10001cdc:	d023      	beq.n	10001d26 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10001cde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ce2:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10001ce6:	f023 0207 	bic.w	r2, r3, #7
10001cea:	687b      	ldr	r3, [r7, #4]
10001cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001cee:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001cf2:	4313      	orrs	r3, r2
10001cf4:	f8c1 383c 	str.w	r3, [r1, #2108]	@ 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001cf8:	f7fe fe26 	bl	10000948 <HAL_GetTick>
10001cfc:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001cfe:	e009      	b.n	10001d14 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001d00:	f7fe fe22 	bl	10000948 <HAL_GetTick>
10001d04:	4602      	mov	r2, r0
10001d06:	68bb      	ldr	r3, [r7, #8]
10001d08:	1ad3      	subs	r3, r2, r3
10001d0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001d0e:	d901      	bls.n	10001d14 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10001d10:	2303      	movs	r3, #3
10001d12:	e009      	b.n	10001d28 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001d14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d18:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10001d1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001d20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001d24:	d1ec      	bne.n	10001d00 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10001d26:	2300      	movs	r3, #0
}
10001d28:	4618      	mov	r0, r3
10001d2a:	3710      	adds	r7, #16
10001d2c:	46bd      	mov	sp, r7
10001d2e:	bd80      	pop	{r7, pc}

10001d30 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10001d30:	b580      	push	{r7, lr}
10001d32:	b084      	sub	sp, #16
10001d34:	af00      	add	r7, sp, #0
10001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10001d38:	687b      	ldr	r3, [r7, #4]
10001d3a:	681b      	ldr	r3, [r3, #0]
10001d3c:	2b03      	cmp	r3, #3
10001d3e:	d840      	bhi.n	10001dc2 <RCC_MPUConfig+0x92>
10001d40:	a201      	add	r2, pc, #4	@ (adr r2, 10001d48 <RCC_MPUConfig+0x18>)
10001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001d46:	bf00      	nop
10001d48:	10001d59 	.word	0x10001d59
10001d4c:	10001d6d 	.word	0x10001d6d
10001d50:	10001d83 	.word	0x10001d83
10001d54:	10001d97 	.word	0x10001d97
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001d58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d5c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001d60:	f003 0301 	and.w	r3, r3, #1
10001d64:	2b01      	cmp	r3, #1
10001d66:	d02e      	beq.n	10001dc6 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10001d68:	2301      	movs	r3, #1
10001d6a:	e053      	b.n	10001e14 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001d6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d70:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001d78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001d7c:	d025      	beq.n	10001dca <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10001d7e:	2301      	movs	r3, #1
10001d80:	e048      	b.n	10001e14 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001d82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001d8a:	f003 0302 	and.w	r3, r3, #2
10001d8e:	2b02      	cmp	r3, #2
10001d90:	d01d      	beq.n	10001dce <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10001d92:	2301      	movs	r3, #1
10001d94:	e03e      	b.n	10001e14 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001d96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001d9e:	f003 0302 	and.w	r3, r3, #2
10001da2:	2b02      	cmp	r3, #2
10001da4:	d001      	beq.n	10001daa <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10001da6:	2301      	movs	r3, #1
10001da8:	e034      	b.n	10001e14 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10001daa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001db0:	f023 0207 	bic.w	r2, r3, #7
10001db4:	687b      	ldr	r3, [r7, #4]
10001db6:	685b      	ldr	r3, [r3, #4]
10001db8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001dbc:	4313      	orrs	r3, r2
10001dbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

      break;
10001dc0:	e006      	b.n	10001dd0 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10001dc2:	2301      	movs	r3, #1
10001dc4:	e026      	b.n	10001e14 <RCC_MPUConfig+0xe4>
      break;
10001dc6:	bf00      	nop
10001dc8:	e002      	b.n	10001dd0 <RCC_MPUConfig+0xa0>
      break;
10001dca:	bf00      	nop
10001dcc:	e000      	b.n	10001dd0 <RCC_MPUConfig+0xa0>
      break;
10001dce:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10001dd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dd4:	6a1b      	ldr	r3, [r3, #32]
10001dd6:	f023 0203 	bic.w	r2, r3, #3
10001dda:	687b      	ldr	r3, [r7, #4]
10001ddc:	681b      	ldr	r3, [r3, #0]
10001dde:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001de2:	4313      	orrs	r3, r2
10001de4:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001de6:	f7fe fdaf 	bl	10000948 <HAL_GetTick>
10001dea:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001dec:	e009      	b.n	10001e02 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001dee:	f7fe fdab 	bl	10000948 <HAL_GetTick>
10001df2:	4602      	mov	r2, r0
10001df4:	68fb      	ldr	r3, [r7, #12]
10001df6:	1ad3      	subs	r3, r2, r3
10001df8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001dfc:	d901      	bls.n	10001e02 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10001dfe:	2303      	movs	r3, #3
10001e00:	e008      	b.n	10001e14 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001e02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e06:	6a1b      	ldr	r3, [r3, #32]
10001e08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001e10:	d1ed      	bne.n	10001dee <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10001e12:	2300      	movs	r3, #0
}
10001e14:	4618      	mov	r0, r3
10001e16:	3710      	adds	r7, #16
10001e18:	46bd      	mov	sp, r7
10001e1a:	bd80      	pop	{r7, pc}

10001e1c <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10001e1c:	b580      	push	{r7, lr}
10001e1e:	b084      	sub	sp, #16
10001e20:	af00      	add	r7, sp, #0
10001e22:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10001e24:	687b      	ldr	r3, [r7, #4]
10001e26:	681b      	ldr	r3, [r3, #0]
10001e28:	2b02      	cmp	r3, #2
10001e2a:	d01b      	beq.n	10001e64 <RCC_AXISSConfig+0x48>
10001e2c:	2b02      	cmp	r3, #2
10001e2e:	d823      	bhi.n	10001e78 <RCC_AXISSConfig+0x5c>
10001e30:	2b00      	cmp	r3, #0
10001e32:	d002      	beq.n	10001e3a <RCC_AXISSConfig+0x1e>
10001e34:	2b01      	cmp	r3, #1
10001e36:	d00a      	beq.n	10001e4e <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10001e38:	e01e      	b.n	10001e78 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001e3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e3e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001e42:	f003 0301 	and.w	r3, r3, #1
10001e46:	2b01      	cmp	r3, #1
10001e48:	d018      	beq.n	10001e7c <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10001e4a:	2301      	movs	r3, #1
10001e4c:	e079      	b.n	10001f42 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001e4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e52:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001e5e:	d00f      	beq.n	10001e80 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10001e60:	2301      	movs	r3, #1
10001e62:	e06e      	b.n	10001f42 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001e64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001e6c:	f003 0302 	and.w	r3, r3, #2
10001e70:	2b02      	cmp	r3, #2
10001e72:	d007      	beq.n	10001e84 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10001e74:	2301      	movs	r3, #1
10001e76:	e064      	b.n	10001f42 <RCC_AXISSConfig+0x126>
      break;
10001e78:	bf00      	nop
10001e7a:	e004      	b.n	10001e86 <RCC_AXISSConfig+0x6a>
      break;
10001e7c:	bf00      	nop
10001e7e:	e002      	b.n	10001e86 <RCC_AXISSConfig+0x6a>
      break;
10001e80:	bf00      	nop
10001e82:	e000      	b.n	10001e86 <RCC_AXISSConfig+0x6a>
      break;
10001e84:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10001e86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001e8c:	f023 0207 	bic.w	r2, r3, #7
10001e90:	687b      	ldr	r3, [r7, #4]
10001e92:	681b      	ldr	r3, [r3, #0]
10001e94:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001e98:	4313      	orrs	r3, r2
10001e9a:	624b      	str	r3, [r1, #36]	@ 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10001e9c:	687b      	ldr	r3, [r7, #4]
10001e9e:	681b      	ldr	r3, [r3, #0]
10001ea0:	2b03      	cmp	r3, #3
10001ea2:	d016      	beq.n	10001ed2 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001ea4:	f7fe fd50 	bl	10000948 <HAL_GetTick>
10001ea8:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001eaa:	e009      	b.n	10001ec0 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001eac:	f7fe fd4c 	bl	10000948 <HAL_GetTick>
10001eb0:	4602      	mov	r2, r0
10001eb2:	68fb      	ldr	r3, [r7, #12]
10001eb4:	1ad3      	subs	r3, r2, r3
10001eb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001eba:	d901      	bls.n	10001ec0 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10001ebc:	2303      	movs	r3, #3
10001ebe:	e040      	b.n	10001f42 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001ec0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001ec6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001eca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001ece:	d1ed      	bne.n	10001eac <RCC_AXISSConfig+0x90>
10001ed0:	e015      	b.n	10001efe <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001ed2:	f7fe fd39 	bl	10000948 <HAL_GetTick>
10001ed6:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001ed8:	e009      	b.n	10001eee <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001eda:	f7fe fd35 	bl	10000948 <HAL_GetTick>
10001ede:	4602      	mov	r2, r0
10001ee0:	68fb      	ldr	r3, [r7, #12]
10001ee2:	1ad3      	subs	r3, r2, r3
10001ee4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001ee8:	d901      	bls.n	10001eee <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10001eea:	2303      	movs	r3, #3
10001eec:	e029      	b.n	10001f42 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001eee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001ef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001efc:	d0ed      	beq.n	10001eda <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10001efe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001f04:	f023 0207 	bic.w	r2, r3, #7
10001f08:	687b      	ldr	r3, [r7, #4]
10001f0a:	685b      	ldr	r3, [r3, #4]
10001f0c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001f10:	4313      	orrs	r3, r2
10001f12:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001f14:	f7fe fd18 	bl	10000948 <HAL_GetTick>
10001f18:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001f1a:	e009      	b.n	10001f30 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001f1c:	f7fe fd14 	bl	10000948 <HAL_GetTick>
10001f20:	4602      	mov	r2, r0
10001f22:	68fb      	ldr	r3, [r7, #12]
10001f24:	1ad3      	subs	r3, r2, r3
10001f26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001f2a:	d901      	bls.n	10001f30 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10001f2c:	2303      	movs	r3, #3
10001f2e:	e008      	b.n	10001f42 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001f30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001f36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001f3e:	d1ed      	bne.n	10001f1c <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10001f40:	2300      	movs	r3, #0
}
10001f42:	4618      	mov	r0, r3
10001f44:	3710      	adds	r7, #16
10001f46:	46bd      	mov	sp, r7
10001f48:	bd80      	pop	{r7, pc}
	...

10001f4c <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001f4c:	b580      	push	{r7, lr}
10001f4e:	b084      	sub	sp, #16
10001f50:	af00      	add	r7, sp, #0
10001f52:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10001f54:	687b      	ldr	r3, [r7, #4]
10001f56:	681b      	ldr	r3, [r3, #0]
10001f58:	2b03      	cmp	r3, #3
10001f5a:	d834      	bhi.n	10001fc6 <RCC_MCUConfig+0x7a>
10001f5c:	a201      	add	r2, pc, #4	@ (adr r2, 10001f64 <RCC_MCUConfig+0x18>)
10001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001f62:	bf00      	nop
10001f64:	10001f75 	.word	0x10001f75
10001f68:	10001f89 	.word	0x10001f89
10001f6c:	10001f9f 	.word	0x10001f9f
10001f70:	10001fb3 	.word	0x10001fb3
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001f74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f78:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001f7c:	f003 0301 	and.w	r3, r3, #1
10001f80:	2b01      	cmp	r3, #1
10001f82:	d022      	beq.n	10001fca <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10001f84:	2301      	movs	r3, #1
10001f86:	e081      	b.n	1000208c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001f88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f8c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001f98:	d019      	beq.n	10001fce <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10001f9a:	2301      	movs	r3, #1
10001f9c:	e076      	b.n	1000208c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001f9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fa2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001fa6:	f003 0310 	and.w	r3, r3, #16
10001faa:	2b10      	cmp	r3, #16
10001fac:	d011      	beq.n	10001fd2 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001fae:	2301      	movs	r3, #1
10001fb0:	e06c      	b.n	1000208c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001fb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fb6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001fba:	f003 0302 	and.w	r3, r3, #2
10001fbe:	2b02      	cmp	r3, #2
10001fc0:	d009      	beq.n	10001fd6 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10001fc2:	2301      	movs	r3, #1
10001fc4:	e062      	b.n	1000208c <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10001fc6:	bf00      	nop
10001fc8:	e006      	b.n	10001fd8 <RCC_MCUConfig+0x8c>
      break;
10001fca:	bf00      	nop
10001fcc:	e004      	b.n	10001fd8 <RCC_MCUConfig+0x8c>
      break;
10001fce:	bf00      	nop
10001fd0:	e002      	b.n	10001fd8 <RCC_MCUConfig+0x8c>
      break;
10001fd2:	bf00      	nop
10001fd4:	e000      	b.n	10001fd8 <RCC_MCUConfig+0x8c>
      break;
10001fd6:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10001fd8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001fde:	f023 0203 	bic.w	r2, r3, #3
10001fe2:	687b      	ldr	r3, [r7, #4]
10001fe4:	681b      	ldr	r3, [r3, #0]
10001fe6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001fea:	4313      	orrs	r3, r2
10001fec:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001fee:	f7fe fcab 	bl	10000948 <HAL_GetTick>
10001ff2:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001ff4:	e009      	b.n	1000200a <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001ff6:	f7fe fca7 	bl	10000948 <HAL_GetTick>
10001ffa:	4602      	mov	r2, r0
10001ffc:	68fb      	ldr	r3, [r7, #12]
10001ffe:	1ad3      	subs	r3, r2, r3
10002000:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002004:	d901      	bls.n	1000200a <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10002006:	2303      	movs	r3, #3
10002008:	e040      	b.n	1000208c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
1000200a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000200e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002010:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002014:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002018:	d1ed      	bne.n	10001ff6 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000201a:	f000 f954 	bl	100022c6 <HAL_RCC_GetSystemCoreClockFreq>
1000201e:	4603      	mov	r3, r0
10002020:	4a1c      	ldr	r2, [pc, #112]	@ (10002094 <RCC_MCUConfig+0x148>)
10002022:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10002024:	4b1c      	ldr	r3, [pc, #112]	@ (10002098 <RCC_MCUConfig+0x14c>)
10002026:	681b      	ldr	r3, [r3, #0]
10002028:	4618      	mov	r0, r3
1000202a:	f7fe fc43 	bl	100008b4 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
1000202e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002032:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10002036:	f023 020f 	bic.w	r2, r3, #15
1000203a:	687b      	ldr	r3, [r7, #4]
1000203c:	685b      	ldr	r3, [r3, #4]
1000203e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002042:	4313      	orrs	r3, r2
10002044:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002048:	f7fe fc7e 	bl	10000948 <HAL_GetTick>
1000204c:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
1000204e:	e009      	b.n	10002064 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002050:	f7fe fc7a 	bl	10000948 <HAL_GetTick>
10002054:	4602      	mov	r2, r0
10002056:	68fb      	ldr	r3, [r7, #12]
10002058:	1ad3      	subs	r3, r2, r3
1000205a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000205e:	d901      	bls.n	10002064 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10002060:	2303      	movs	r3, #3
10002062:	e013      	b.n	1000208c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10002064:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002068:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
1000206c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002074:	d1ec      	bne.n	10002050 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10002076:	f000 f926 	bl	100022c6 <HAL_RCC_GetSystemCoreClockFreq>
1000207a:	4603      	mov	r3, r0
1000207c:	4a05      	ldr	r2, [pc, #20]	@ (10002094 <RCC_MCUConfig+0x148>)
1000207e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10002080:	4b05      	ldr	r3, [pc, #20]	@ (10002098 <RCC_MCUConfig+0x14c>)
10002082:	681b      	ldr	r3, [r3, #0]
10002084:	4618      	mov	r0, r3
10002086:	f7fe fc15 	bl	100008b4 <HAL_InitTick>
#endif

  return HAL_OK;
1000208a:	2300      	movs	r3, #0
}
1000208c:	4618      	mov	r0, r3
1000208e:	3710      	adds	r7, #16
10002090:	46bd      	mov	sp, r7
10002092:	bd80      	pop	{r7, pc}
10002094:	10020000 	.word	0x10020000
10002098:	10020004 	.word	0x10020004

1000209c <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
1000209c:	b480      	push	{r7}
1000209e:	b089      	sub	sp, #36	@ 0x24
100020a0:	af00      	add	r7, sp, #0
100020a2:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
100020a4:	2300      	movs	r3, #0
100020a6:	61bb      	str	r3, [r7, #24]
100020a8:	2301      	movs	r3, #1
100020aa:	617b      	str	r3, [r7, #20]
100020ac:	2300      	movs	r3, #0
100020ae:	613b      	str	r3, [r7, #16]
100020b0:	2300      	movs	r3, #0
100020b2:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
100020b4:	f04f 0300 	mov.w	r3, #0
100020b8:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
100020ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020be:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100020c2:	f003 0303 	and.w	r3, r3, #3
100020c6:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
100020c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020cc:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
100020d0:	0c1b      	lsrs	r3, r3, #16
100020d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
100020d6:	3301      	adds	r3, #1
100020d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
100020da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020de:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100020e2:	0c1b      	lsrs	r3, r3, #16
100020e4:	f003 0301 	and.w	r3, r3, #1
100020e8:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
100020ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020ee:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100020f2:	08db      	lsrs	r3, r3, #3
100020f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
100020f8:	693a      	ldr	r2, [r7, #16]
100020fa:	fb02 f303 	mul.w	r3, r2, r3
100020fe:	ee07 3a90 	vmov	s15, r3
10002102:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002106:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
1000210a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000210e:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10002112:	f3c3 0308 	ubfx	r3, r3, #0, #9
10002116:	3301      	adds	r3, #1
10002118:	ee07 3a90 	vmov	s15, r3
1000211c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002120:	edd7 6a02 	vldr	s13, [r7, #8]
10002124:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 10002280 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10002128:	eec6 7a86 	vdiv.f32	s15, s13, s12
1000212c:	ee77 7a27 	vadd.f32	s15, s14, s15
10002130:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10002134:	69bb      	ldr	r3, [r7, #24]
10002136:	2b03      	cmp	r3, #3
10002138:	d85b      	bhi.n	100021f2 <HAL_RCC_GetPLL3ClockFreq+0x156>
1000213a:	a201      	add	r2, pc, #4	@ (adr r2, 10002140 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
1000213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002140:	10002151 	.word	0x10002151
10002144:	100021af 	.word	0x100021af
10002148:	100021cd 	.word	0x100021cd
1000214c:	100021eb 	.word	0x100021eb
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10002150:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002154:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002158:	f003 0304 	and.w	r3, r3, #4
1000215c:	2b04      	cmp	r3, #4
1000215e:	d117      	bne.n	10002190 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002160:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002164:	699b      	ldr	r3, [r3, #24]
10002166:	f003 0303 	and.w	r3, r3, #3
1000216a:	4a46      	ldr	r2, [pc, #280]	@ (10002284 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
1000216c:	fa22 f303 	lsr.w	r3, r2, r3
10002170:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10002172:	68fa      	ldr	r2, [r7, #12]
10002174:	697b      	ldr	r3, [r7, #20]
10002176:	fbb2 f3f3 	udiv	r3, r2, r3
1000217a:	ee07 3a90 	vmov	s15, r3
1000217e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002182:	ed97 7a07 	vldr	s14, [r7, #28]
10002186:	ee67 7a27 	vmul.f32	s15, s14, s15
1000218a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
1000218e:	e030      	b.n	100021f2 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10002190:	4a3c      	ldr	r2, [pc, #240]	@ (10002284 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10002192:	697b      	ldr	r3, [r7, #20]
10002194:	fbb2 f3f3 	udiv	r3, r2, r3
10002198:	ee07 3a90 	vmov	s15, r3
1000219c:	eef8 7a67 	vcvt.f32.u32	s15, s15
100021a0:	ed97 7a07 	vldr	s14, [r7, #28]
100021a4:	ee67 7a27 	vmul.f32	s15, s14, s15
100021a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100021ac:	e021      	b.n	100021f2 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
100021ae:	4a36      	ldr	r2, [pc, #216]	@ (10002288 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
100021b0:	697b      	ldr	r3, [r7, #20]
100021b2:	fbb2 f3f3 	udiv	r3, r2, r3
100021b6:	ee07 3a90 	vmov	s15, r3
100021ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
100021be:	ed97 7a07 	vldr	s14, [r7, #28]
100021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
100021c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100021ca:	e012      	b.n	100021f2 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
100021cc:	4a2f      	ldr	r2, [pc, #188]	@ (1000228c <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
100021ce:	697b      	ldr	r3, [r7, #20]
100021d0:	fbb2 f3f3 	udiv	r3, r2, r3
100021d4:	ee07 3a90 	vmov	s15, r3
100021d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
100021dc:	ed97 7a07 	vldr	s14, [r7, #28]
100021e0:	ee67 7a27 	vmul.f32	s15, s14, s15
100021e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100021e8:	e003      	b.n	100021f2 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
100021ea:	f04f 0300 	mov.w	r3, #0
100021ee:	61fb      	str	r3, [r7, #28]
      break;
100021f0:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
100021f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021f6:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100021fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100021fe:	3301      	adds	r3, #1
10002200:	ee07 3a90 	vmov	s15, r3
10002204:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002208:	edd7 6a07 	vldr	s13, [r7, #28]
1000220c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002214:	ee17 2a90 	vmov	r2, s15
10002218:	687b      	ldr	r3, [r7, #4]
1000221a:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
1000221c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002220:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10002224:	0a1b      	lsrs	r3, r3, #8
10002226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000222a:	3301      	adds	r3, #1
1000222c:	ee07 3a90 	vmov	s15, r3
10002230:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002234:	edd7 6a07 	vldr	s13, [r7, #28]
10002238:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000223c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002240:	ee17 2a90 	vmov	r2, s15
10002244:	687b      	ldr	r3, [r7, #4]
10002246:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10002248:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000224c:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10002250:	0c1b      	lsrs	r3, r3, #16
10002252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10002256:	3301      	adds	r3, #1
10002258:	ee07 3a90 	vmov	s15, r3
1000225c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002260:	edd7 6a07 	vldr	s13, [r7, #28]
10002264:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000226c:	ee17 2a90 	vmov	r2, s15
10002270:	687b      	ldr	r3, [r7, #4]
10002272:	609a      	str	r2, [r3, #8]
}
10002274:	bf00      	nop
10002276:	3724      	adds	r7, #36	@ 0x24
10002278:	46bd      	mov	sp, r7
1000227a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000227e:	4770      	bx	lr
10002280:	46000000 	.word	0x46000000
10002284:	03d09000 	.word	0x03d09000
10002288:	016e3600 	.word	0x016e3600
1000228c:	003d0900 	.word	0x003d0900

10002290 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10002290:	b580      	push	{r7, lr}
10002292:	b082      	sub	sp, #8
10002294:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10002296:	2300      	movs	r3, #0
10002298:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
1000229a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000229e:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
100022a2:	f003 030f 	and.w	r3, r3, #15
100022a6:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
100022a8:	687b      	ldr	r3, [r7, #4]
100022aa:	2b09      	cmp	r3, #9
100022ac:	d901      	bls.n	100022b2 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
100022ae:	2309      	movs	r3, #9
100022b0:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
100022b2:	f000 f80f 	bl	100022d4 <HAL_RCC_GetMCUSSFreq>
100022b6:	4602      	mov	r2, r0
100022b8:	687b      	ldr	r3, [r7, #4]
100022ba:	fa22 f303 	lsr.w	r3, r2, r3
}
100022be:	4618      	mov	r0, r3
100022c0:	3708      	adds	r7, #8
100022c2:	46bd      	mov	sp, r7
100022c4:	bd80      	pop	{r7, pc}

100022c6 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
100022c6:	b580      	push	{r7, lr}
100022c8:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
100022ca:	f7ff ffe1 	bl	10002290 <HAL_RCC_GetMCUFreq>
100022ce:	4603      	mov	r3, r0
#endif
}
100022d0:	4618      	mov	r0, r3
100022d2:	bd80      	pop	{r7, pc}

100022d4 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
100022d4:	b580      	push	{r7, lr}
100022d6:	b084      	sub	sp, #16
100022d8:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
100022da:	2300      	movs	r3, #0
100022dc:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
100022de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100022e4:	f003 0303 	and.w	r3, r3, #3
100022e8:	2b03      	cmp	r3, #3
100022ea:	d822      	bhi.n	10002332 <HAL_RCC_GetMCUSSFreq+0x5e>
100022ec:	a201      	add	r2, pc, #4	@ (adr r2, 100022f4 <HAL_RCC_GetMCUSSFreq+0x20>)
100022ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100022f2:	bf00      	nop
100022f4:	10002313 	.word	0x10002313
100022f8:	10002327 	.word	0x10002327
100022fc:	1000232d 	.word	0x1000232d
10002300:	10002305 	.word	0x10002305
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10002304:	463b      	mov	r3, r7
10002306:	4618      	mov	r0, r3
10002308:	f7ff fec8 	bl	1000209c <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
1000230c:	683b      	ldr	r3, [r7, #0]
1000230e:	60fb      	str	r3, [r7, #12]
      break;
10002310:	e00f      	b.n	10002332 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002312:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002316:	699b      	ldr	r3, [r3, #24]
10002318:	f003 0303 	and.w	r3, r3, #3
1000231c:	4a07      	ldr	r2, [pc, #28]	@ (1000233c <HAL_RCC_GetMCUSSFreq+0x68>)
1000231e:	fa22 f303 	lsr.w	r3, r2, r3
10002322:	60fb      	str	r3, [r7, #12]

      break;
10002324:	e005      	b.n	10002332 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10002326:	4b06      	ldr	r3, [pc, #24]	@ (10002340 <HAL_RCC_GetMCUSSFreq+0x6c>)
10002328:	60fb      	str	r3, [r7, #12]
      break;
1000232a:	e002      	b.n	10002332 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
1000232c:	4b05      	ldr	r3, [pc, #20]	@ (10002344 <HAL_RCC_GetMCUSSFreq+0x70>)
1000232e:	60fb      	str	r3, [r7, #12]
      break;
10002330:	bf00      	nop
  }

  return mcussfreq;
10002332:	68fb      	ldr	r3, [r7, #12]
}
10002334:	4618      	mov	r0, r3
10002336:	3710      	adds	r7, #16
10002338:	46bd      	mov	sp, r7
1000233a:	bd80      	pop	{r7, pc}
1000233c:	03d09000 	.word	0x03d09000
10002340:	016e3600 	.word	0x016e3600
10002344:	003d0900 	.word	0x003d0900

10002348 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10002348:	b580      	push	{r7, lr}
1000234a:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
1000234c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002350:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	@ 0xc18
10002354:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
10002358:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
1000235c:	d107      	bne.n	1000236e <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
1000235e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002362:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
10002366:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
1000236a:	f000 f802 	bl	10002372 <HAL_RCC_WAKEUP_Callback>
  }
}
1000236e:	bf00      	nop
10002370:	bd80      	pop	{r7, pc}

10002372 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10002372:	b480      	push	{r7}
10002374:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10002376:	bf00      	nop
10002378:	46bd      	mov	sp, r7
1000237a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000237e:	4770      	bx	lr

10002380 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10002380:	b580      	push	{r7, lr}
10002382:	b084      	sub	sp, #16
10002384:	af00      	add	r7, sp, #0
10002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10002388:	687b      	ldr	r3, [r7, #4]
1000238a:	681b      	ldr	r3, [r3, #0]
1000238c:	2b00      	cmp	r3, #0
1000238e:	f000 8171 	beq.w	10002674 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10002392:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002398:	f003 0307 	and.w	r3, r3, #7
1000239c:	2b02      	cmp	r3, #2
1000239e:	d108      	bne.n	100023b2 <RCCEx_PLL2_Config+0x32>
100023a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100023a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100023aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100023ae:	f000 815f 	beq.w	10002670 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
100023b2:	687b      	ldr	r3, [r7, #4]
100023b4:	681b      	ldr	r3, [r3, #0]
100023b6:	2b02      	cmp	r3, #2
100023b8:	f040 8130 	bne.w	1000261c <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100023bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100023c2:	f003 0303 	and.w	r3, r3, #3
100023c6:	2b00      	cmp	r3, #0
100023c8:	d008      	beq.n	100023dc <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
100023ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100023d0:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100023d4:	2b01      	cmp	r3, #1
100023d6:	d001      	beq.n	100023dc <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
100023d8:	2301      	movs	r3, #1
100023da:	e14c      	b.n	10002676 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100023dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100023e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100023e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100023ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
100023f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100023f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100023fc:	f023 0301 	bic.w	r3, r3, #1
10002400:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002404:	f7fe faa0 	bl	10000948 <HAL_GetTick>
10002408:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000240a:	e008      	b.n	1000241e <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000240c:	f7fe fa9c 	bl	10000948 <HAL_GetTick>
10002410:	4602      	mov	r2, r0
10002412:	68fb      	ldr	r3, [r7, #12]
10002414:	1ad3      	subs	r3, r2, r3
10002416:	2b64      	cmp	r3, #100	@ 0x64
10002418:	d901      	bls.n	1000241e <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000241a:	2303      	movs	r3, #3
1000241c:	e12b      	b.n	10002676 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000241e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002426:	f003 0302 	and.w	r3, r3, #2
1000242a:	2b02      	cmp	r3, #2
1000242c:	d0ee      	beq.n	1000240c <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
1000242e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002432:	6a1b      	ldr	r3, [r3, #32]
10002434:	f003 0303 	and.w	r3, r3, #3
10002438:	2b02      	cmp	r3, #2
1000243a:	d107      	bne.n	1000244c <RCCEx_PLL2_Config+0xcc>
1000243c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002440:	6a1b      	ldr	r3, [r3, #32]
10002442:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002446:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000244a:	d00e      	beq.n	1000246a <RCCEx_PLL2_Config+0xea>
1000244c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002450:	6a1b      	ldr	r3, [r3, #32]
10002452:	f003 0303 	and.w	r3, r3, #3
10002456:	2b03      	cmp	r3, #3
10002458:	d112      	bne.n	10002480 <RCCEx_PLL2_Config+0x100>
1000245a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000245e:	6a1b      	ldr	r3, [r3, #32]
10002460:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002468:	d10a      	bne.n	10002480 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000246a:	687b      	ldr	r3, [r7, #4]
1000246c:	685a      	ldr	r2, [r3, #4]
1000246e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002474:	f003 0303 	and.w	r3, r3, #3
10002478:	429a      	cmp	r2, r3
1000247a:	d00c      	beq.n	10002496 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
1000247c:	2301      	movs	r3, #1
1000247e:	e0fa      	b.n	10002676 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10002480:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002486:	f023 0203 	bic.w	r2, r3, #3
1000248a:	687b      	ldr	r3, [r7, #4]
1000248c:	685b      	ldr	r3, [r3, #4]
1000248e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002492:	4313      	orrs	r3, r2
10002494:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10002496:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000249a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
1000249e:	4b78      	ldr	r3, [pc, #480]	@ (10002680 <RCCEx_PLL2_Config+0x300>)
100024a0:	4013      	ands	r3, r2
100024a2:	687a      	ldr	r2, [r7, #4]
100024a4:	68d2      	ldr	r2, [r2, #12]
100024a6:	1e51      	subs	r1, r2, #1
100024a8:	687a      	ldr	r2, [r7, #4]
100024aa:	6892      	ldr	r2, [r2, #8]
100024ac:	3a01      	subs	r2, #1
100024ae:	0412      	lsls	r2, r2, #16
100024b0:	430a      	orrs	r2, r1
100024b2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100024b6:	4313      	orrs	r3, r2
100024b8:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
100024bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
100024c4:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
100024c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
100024cc:	687a      	ldr	r2, [r7, #4]
100024ce:	6912      	ldr	r2, [r2, #16]
100024d0:	1e51      	subs	r1, r2, #1
100024d2:	687a      	ldr	r2, [r7, #4]
100024d4:	6952      	ldr	r2, [r2, #20]
100024d6:	3a01      	subs	r2, #1
100024d8:	0212      	lsls	r2, r2, #8
100024da:	4311      	orrs	r1, r2
100024dc:	687a      	ldr	r2, [r7, #4]
100024de:	6992      	ldr	r2, [r2, #24]
100024e0:	3a01      	subs	r2, #1
100024e2:	0412      	lsls	r2, r2, #16
100024e4:	430a      	orrs	r2, r1
100024e6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100024ea:	4313      	orrs	r3, r2
100024ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
100024f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
100024f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100024fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10002500:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10002504:	687b      	ldr	r3, [r7, #4]
10002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002508:	2b02      	cmp	r3, #2
1000250a:	d003      	beq.n	10002514 <RCCEx_PLL2_Config+0x194>
1000250c:	687b      	ldr	r3, [r7, #4]
1000250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002510:	2b00      	cmp	r3, #0
10002512:	d10c      	bne.n	1000252e <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10002514:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002518:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000251c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002520:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002524:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002528:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
1000252c:	e00f      	b.n	1000254e <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
1000252e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10002536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000253a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000253e:	687a      	ldr	r2, [r7, #4]
10002540:	6a12      	ldr	r2, [r2, #32]
10002542:	00d2      	lsls	r2, r2, #3
10002544:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002548:	4313      	orrs	r3, r2
1000254a:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
1000254e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002552:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10002556:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000255a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
1000255e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002562:	687b      	ldr	r3, [r7, #4]
10002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002566:	2b02      	cmp	r3, #2
10002568:	d124      	bne.n	100025b4 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
1000256a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000256e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
10002572:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10002576:	687b      	ldr	r3, [r7, #4]
10002578:	6a99      	ldr	r1, [r3, #40]	@ 0x28
1000257a:	687b      	ldr	r3, [r7, #4]
1000257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000257e:	4319      	orrs	r1, r3
10002580:	687b      	ldr	r3, [r7, #4]
10002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002584:	4319      	orrs	r1, r3
10002586:	687b      	ldr	r3, [r7, #4]
10002588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000258a:	4319      	orrs	r1, r3
1000258c:	687b      	ldr	r3, [r7, #4]
1000258e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10002590:	041b      	lsls	r3, r3, #16
10002592:	430b      	orrs	r3, r1
10002594:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002598:	4313      	orrs	r3, r2
1000259a:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
1000259e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100025a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100025aa:	f043 0304 	orr.w	r3, r3, #4
100025ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
100025b2:	e009      	b.n	100025c8 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
100025b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100025bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100025c0:	f023 0304 	bic.w	r3, r3, #4
100025c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
100025c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100025d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100025d4:	f043 0301 	orr.w	r3, r3, #1
100025d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100025dc:	f7fe f9b4 	bl	10000948 <HAL_GetTick>
100025e0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100025e2:	e008      	b.n	100025f6 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100025e4:	f7fe f9b0 	bl	10000948 <HAL_GetTick>
100025e8:	4602      	mov	r2, r0
100025ea:	68fb      	ldr	r3, [r7, #12]
100025ec:	1ad3      	subs	r3, r2, r3
100025ee:	2b64      	cmp	r3, #100	@ 0x64
100025f0:	d901      	bls.n	100025f6 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
100025f2:	2303      	movs	r3, #3
100025f4:	e03f      	b.n	10002676 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100025f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100025fe:	f003 0302 	and.w	r3, r3, #2
10002602:	2b02      	cmp	r3, #2
10002604:	d1ee      	bne.n	100025e4 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002606:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000260a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000260e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002612:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10002616:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
1000261a:	e02b      	b.n	10002674 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000261c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002624:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
1000262c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10002630:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002634:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002638:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000263c:	f023 0301 	bic.w	r3, r3, #1
10002640:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002644:	f7fe f980 	bl	10000948 <HAL_GetTick>
10002648:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000264a:	e008      	b.n	1000265e <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000264c:	f7fe f97c 	bl	10000948 <HAL_GetTick>
10002650:	4602      	mov	r2, r0
10002652:	68fb      	ldr	r3, [r7, #12]
10002654:	1ad3      	subs	r3, r2, r3
10002656:	2b64      	cmp	r3, #100	@ 0x64
10002658:	d901      	bls.n	1000265e <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
1000265a:	2303      	movs	r3, #3
1000265c:	e00b      	b.n	10002676 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000265e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002666:	f003 0302 	and.w	r3, r3, #2
1000266a:	2b02      	cmp	r3, #2
1000266c:	d0ee      	beq.n	1000264c <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
1000266e:	e001      	b.n	10002674 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002670:	2301      	movs	r3, #1
10002672:	e000      	b.n	10002676 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10002674:	2300      	movs	r3, #0

}
10002676:	4618      	mov	r0, r3
10002678:	3710      	adds	r7, #16
1000267a:	46bd      	mov	sp, r7
1000267c:	bd80      	pop	{r7, pc}
1000267e:	bf00      	nop
10002680:	ffc0fe00 	.word	0xffc0fe00

10002684 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10002684:	b580      	push	{r7, lr}
10002686:	b084      	sub	sp, #16
10002688:	af00      	add	r7, sp, #0
1000268a:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
1000268c:	687b      	ldr	r3, [r7, #4]
1000268e:	681b      	ldr	r3, [r3, #0]
10002690:	2b00      	cmp	r3, #0
10002692:	f000 815a 	beq.w	1000294a <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10002696:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000269a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000269c:	f003 0303 	and.w	r3, r3, #3
100026a0:	2b03      	cmp	r3, #3
100026a2:	d108      	bne.n	100026b6 <RCCEx_PLL3_Config+0x32>
100026a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100026aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100026ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100026b2:	f000 8148 	beq.w	10002946 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
100026b6:	687b      	ldr	r3, [r7, #4]
100026b8:	681b      	ldr	r3, [r3, #0]
100026ba:	2b02      	cmp	r3, #2
100026bc:	f040 8119 	bne.w	100028f2 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100026c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026c4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100026c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100026cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100026d0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100026d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026d8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100026dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100026e0:	f023 0301 	bic.w	r3, r3, #1
100026e4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100026e8:	f7fe f92e 	bl	10000948 <HAL_GetTick>
100026ec:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100026ee:	e008      	b.n	10002702 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100026f0:	f7fe f92a 	bl	10000948 <HAL_GetTick>
100026f4:	4602      	mov	r2, r0
100026f6:	68fb      	ldr	r3, [r7, #12]
100026f8:	1ad3      	subs	r3, r2, r3
100026fa:	2b64      	cmp	r3, #100	@ 0x64
100026fc:	d901      	bls.n	10002702 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
100026fe:	2303      	movs	r3, #3
10002700:	e124      	b.n	1000294c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002702:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002706:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000270a:	f003 0302 	and.w	r3, r3, #2
1000270e:	2b02      	cmp	r3, #2
10002710:	d0ee      	beq.n	100026f0 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10002712:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002716:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000271a:	f023 0203 	bic.w	r2, r3, #3
1000271e:	687b      	ldr	r3, [r7, #4]
10002720:	685b      	ldr	r3, [r3, #4]
10002722:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002726:	4313      	orrs	r3, r2
10002728:	f8c1 3820 	str.w	r3, [r1, #2080]	@ 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
1000272c:	e008      	b.n	10002740 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000272e:	f7fe f90b 	bl	10000948 <HAL_GetTick>
10002732:	4602      	mov	r2, r0
10002734:	68fb      	ldr	r3, [r7, #12]
10002736:	1ad3      	subs	r3, r2, r3
10002738:	2b64      	cmp	r3, #100	@ 0x64
1000273a:	d901      	bls.n	10002740 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
1000273c:	2303      	movs	r3, #3
1000273e:	e105      	b.n	1000294c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002740:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002744:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002748:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000274c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002750:	d1ed      	bne.n	1000272e <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10002752:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002756:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
1000275a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
1000275e:	687b      	ldr	r3, [r7, #4]
10002760:	69db      	ldr	r3, [r3, #28]
10002762:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002766:	4313      	orrs	r3, r2
10002768:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
1000276c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002770:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
10002774:	4b77      	ldr	r3, [pc, #476]	@ (10002954 <RCCEx_PLL3_Config+0x2d0>)
10002776:	4013      	ands	r3, r2
10002778:	687a      	ldr	r2, [r7, #4]
1000277a:	68d2      	ldr	r2, [r2, #12]
1000277c:	1e51      	subs	r1, r2, #1
1000277e:	687a      	ldr	r2, [r7, #4]
10002780:	6892      	ldr	r2, [r2, #8]
10002782:	3a01      	subs	r2, #1
10002784:	0412      	lsls	r2, r2, #16
10002786:	430a      	orrs	r2, r1
10002788:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000278c:	4313      	orrs	r3, r2
1000278e:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884
10002792:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002796:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
1000279a:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
1000279e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
100027a2:	687a      	ldr	r2, [r7, #4]
100027a4:	6912      	ldr	r2, [r2, #16]
100027a6:	1e51      	subs	r1, r2, #1
100027a8:	687a      	ldr	r2, [r7, #4]
100027aa:	6952      	ldr	r2, [r2, #20]
100027ac:	3a01      	subs	r2, #1
100027ae:	0212      	lsls	r2, r2, #8
100027b0:	4311      	orrs	r1, r2
100027b2:	687a      	ldr	r2, [r7, #4]
100027b4:	6992      	ldr	r2, [r2, #24]
100027b6:	3a01      	subs	r2, #1
100027b8:	0412      	lsls	r2, r2, #16
100027ba:	430a      	orrs	r2, r1
100027bc:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100027c0:	4313      	orrs	r3, r2
100027c2:	f8c1 3888 	str.w	r3, [r1, #2184]	@ 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
100027c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027ca:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100027ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100027d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
100027d6:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100027da:	687b      	ldr	r3, [r7, #4]
100027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100027de:	2b02      	cmp	r3, #2
100027e0:	d003      	beq.n	100027ea <RCCEx_PLL3_Config+0x166>
100027e2:	687b      	ldr	r3, [r7, #4]
100027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100027e6:	2b00      	cmp	r3, #0
100027e8:	d10c      	bne.n	10002804 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
100027ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027ee:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100027f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100027f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100027fa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100027fe:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
10002802:	e00f      	b.n	10002824 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10002804:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002808:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000280c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002810:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002814:	687a      	ldr	r2, [r7, #4]
10002816:	6a12      	ldr	r2, [r2, #32]
10002818:	00d2      	lsls	r2, r2, #3
1000281a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000281e:	4313      	orrs	r3, r2
10002820:	f8c1 388c 	str.w	r3, [r1, #2188]	@ 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10002824:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002828:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000282c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10002834:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002838:	687b      	ldr	r3, [r7, #4]
1000283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000283c:	2b02      	cmp	r3, #2
1000283e:	d124      	bne.n	1000288a <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10002840:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002844:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
10002848:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
1000284c:	687b      	ldr	r3, [r7, #4]
1000284e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10002850:	687b      	ldr	r3, [r7, #4]
10002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002854:	4319      	orrs	r1, r3
10002856:	687b      	ldr	r3, [r7, #4]
10002858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000285a:	4319      	orrs	r1, r3
1000285c:	687b      	ldr	r3, [r7, #4]
1000285e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10002860:	4319      	orrs	r1, r3
10002862:	687b      	ldr	r3, [r7, #4]
10002864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10002866:	041b      	lsls	r3, r3, #16
10002868:	430b      	orrs	r3, r1
1000286a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000286e:	4313      	orrs	r3, r2
10002870:	f8c1 3890 	str.w	r3, [r1, #2192]	@ 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10002874:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002878:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000287c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002880:	f043 0304 	orr.w	r3, r3, #4
10002884:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
10002888:	e009      	b.n	1000289e <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
1000288a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000288e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002892:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002896:	f023 0304 	bic.w	r3, r3, #4
1000289a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
1000289e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028a2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100028a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100028aa:	f043 0301 	orr.w	r3, r3, #1
100028ae:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100028b2:	f7fe f849 	bl	10000948 <HAL_GetTick>
100028b6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100028b8:	e008      	b.n	100028cc <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100028ba:	f7fe f845 	bl	10000948 <HAL_GetTick>
100028be:	4602      	mov	r2, r0
100028c0:	68fb      	ldr	r3, [r7, #12]
100028c2:	1ad3      	subs	r3, r2, r3
100028c4:	2b64      	cmp	r3, #100	@ 0x64
100028c6:	d901      	bls.n	100028cc <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
100028c8:	2303      	movs	r3, #3
100028ca:	e03f      	b.n	1000294c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100028cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028d0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100028d4:	f003 0302 	and.w	r3, r3, #2
100028d8:	2b02      	cmp	r3, #2
100028da:	d1ee      	bne.n	100028ba <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100028dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028e0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100028e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100028e8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
100028ec:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
100028f0:	e02b      	b.n	1000294a <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100028f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028f6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100028fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100028fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002902:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10002906:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000290a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000290e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002912:	f023 0301 	bic.w	r3, r3, #1
10002916:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000291a:	f7fe f815 	bl	10000948 <HAL_GetTick>
1000291e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002920:	e008      	b.n	10002934 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002922:	f7fe f811 	bl	10000948 <HAL_GetTick>
10002926:	4602      	mov	r2, r0
10002928:	68fb      	ldr	r3, [r7, #12]
1000292a:	1ad3      	subs	r3, r2, r3
1000292c:	2b64      	cmp	r3, #100	@ 0x64
1000292e:	d901      	bls.n	10002934 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10002930:	2303      	movs	r3, #3
10002932:	e00b      	b.n	1000294c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002934:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002938:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000293c:	f003 0302 	and.w	r3, r3, #2
10002940:	2b02      	cmp	r3, #2
10002942:	d0ee      	beq.n	10002922 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10002944:	e001      	b.n	1000294a <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002946:	2301      	movs	r3, #1
10002948:	e000      	b.n	1000294c <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
1000294a:	2300      	movs	r3, #0
}
1000294c:	4618      	mov	r0, r3
1000294e:	3710      	adds	r7, #16
10002950:	46bd      	mov	sp, r7
10002952:	bd80      	pop	{r7, pc}
10002954:	ffc0fe00 	.word	0xffc0fe00

10002958 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10002958:	b580      	push	{r7, lr}
1000295a:	b084      	sub	sp, #16
1000295c:	af00      	add	r7, sp, #0
1000295e:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10002960:	687b      	ldr	r3, [r7, #4]
10002962:	681b      	ldr	r3, [r3, #0]
10002964:	2b00      	cmp	r3, #0
10002966:	f000 8147 	beq.w	10002bf8 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
1000296a:	687b      	ldr	r3, [r7, #4]
1000296c:	681b      	ldr	r3, [r3, #0]
1000296e:	2b02      	cmp	r3, #2
10002970:	f040 8119 	bne.w	10002ba6 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002974:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002978:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000297c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002984:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10002988:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000298c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002990:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002994:	f023 0301 	bic.w	r3, r3, #1
10002998:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000299c:	f7fd ffd4 	bl	10000948 <HAL_GetTick>
100029a0:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100029a2:	e008      	b.n	100029b6 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100029a4:	f7fd ffd0 	bl	10000948 <HAL_GetTick>
100029a8:	4602      	mov	r2, r0
100029aa:	68fb      	ldr	r3, [r7, #12]
100029ac:	1ad3      	subs	r3, r2, r3
100029ae:	2b64      	cmp	r3, #100	@ 0x64
100029b0:	d901      	bls.n	100029b6 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
100029b2:	2303      	movs	r3, #3
100029b4:	e121      	b.n	10002bfa <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100029b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029ba:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100029be:	f003 0302 	and.w	r3, r3, #2
100029c2:	2b02      	cmp	r3, #2
100029c4:	d0ee      	beq.n	100029a4 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
100029c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029ca:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100029ce:	f023 0203 	bic.w	r2, r3, #3
100029d2:	687b      	ldr	r3, [r7, #4]
100029d4:	685b      	ldr	r3, [r3, #4]
100029d6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100029da:	4313      	orrs	r3, r2
100029dc:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100029e0:	e008      	b.n	100029f4 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100029e2:	f7fd ffb1 	bl	10000948 <HAL_GetTick>
100029e6:	4602      	mov	r2, r0
100029e8:	68fb      	ldr	r3, [r7, #12]
100029ea:	1ad3      	subs	r3, r2, r3
100029ec:	2b64      	cmp	r3, #100	@ 0x64
100029ee:	d901      	bls.n	100029f4 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
100029f0:	2303      	movs	r3, #3
100029f2:	e102      	b.n	10002bfa <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100029f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029f8:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100029fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002a00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002a04:	d1ed      	bne.n	100029e2 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10002a06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a0a:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10002a0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10002a12:	687b      	ldr	r3, [r7, #4]
10002a14:	69db      	ldr	r3, [r3, #28]
10002a16:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a1a:	4313      	orrs	r3, r2
10002a1c:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10002a20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a24:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
10002a28:	4b76      	ldr	r3, [pc, #472]	@ (10002c04 <RCCEx_PLL4_Config+0x2ac>)
10002a2a:	4013      	ands	r3, r2
10002a2c:	687a      	ldr	r2, [r7, #4]
10002a2e:	68d2      	ldr	r2, [r2, #12]
10002a30:	1e51      	subs	r1, r2, #1
10002a32:	687a      	ldr	r2, [r7, #4]
10002a34:	6892      	ldr	r2, [r2, #8]
10002a36:	3a01      	subs	r2, #1
10002a38:	0412      	lsls	r2, r2, #16
10002a3a:	430a      	orrs	r2, r1
10002a3c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a40:	4313      	orrs	r3, r2
10002a42:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898
10002a46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a4a:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
10002a4e:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10002a52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10002a56:	687a      	ldr	r2, [r7, #4]
10002a58:	6912      	ldr	r2, [r2, #16]
10002a5a:	1e51      	subs	r1, r2, #1
10002a5c:	687a      	ldr	r2, [r7, #4]
10002a5e:	6952      	ldr	r2, [r2, #20]
10002a60:	3a01      	subs	r2, #1
10002a62:	0212      	lsls	r2, r2, #8
10002a64:	4311      	orrs	r1, r2
10002a66:	687a      	ldr	r2, [r7, #4]
10002a68:	6992      	ldr	r2, [r2, #24]
10002a6a:	3a01      	subs	r2, #1
10002a6c:	0412      	lsls	r2, r2, #16
10002a6e:	430a      	orrs	r2, r1
10002a70:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a74:	4313      	orrs	r3, r2
10002a76:	f8c1 389c 	str.w	r3, [r1, #2204]	@ 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10002a7a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a7e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002a82:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10002a8a:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10002a8e:	687b      	ldr	r3, [r7, #4]
10002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002a92:	2b02      	cmp	r3, #2
10002a94:	d003      	beq.n	10002a9e <RCCEx_PLL4_Config+0x146>
10002a96:	687b      	ldr	r3, [r7, #4]
10002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002a9a:	2b00      	cmp	r3, #0
10002a9c:	d10c      	bne.n	10002ab8 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10002a9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002aa2:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002aa6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002aaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002aae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002ab2:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
10002ab6:	e00f      	b.n	10002ad8 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10002ab8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002abc:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002ac0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002ac4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002ac8:	687a      	ldr	r2, [r7, #4]
10002aca:	6a12      	ldr	r2, [r2, #32]
10002acc:	00d2      	lsls	r2, r2, #3
10002ace:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002ad2:	4313      	orrs	r3, r2
10002ad4:	f8c1 38a0 	str.w	r3, [r1, #2208]	@ 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10002ad8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002adc:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002ae0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10002ae8:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002aec:	687b      	ldr	r3, [r7, #4]
10002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002af0:	2b02      	cmp	r3, #2
10002af2:	d124      	bne.n	10002b3e <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10002af4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002af8:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	@ 0x8a4
10002afc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10002b00:	687b      	ldr	r3, [r7, #4]
10002b02:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10002b04:	687b      	ldr	r3, [r7, #4]
10002b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002b08:	4319      	orrs	r1, r3
10002b0a:	687b      	ldr	r3, [r7, #4]
10002b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002b0e:	4319      	orrs	r1, r3
10002b10:	687b      	ldr	r3, [r7, #4]
10002b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10002b14:	4319      	orrs	r1, r3
10002b16:	687b      	ldr	r3, [r7, #4]
10002b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10002b1a:	041b      	lsls	r3, r3, #16
10002b1c:	430b      	orrs	r3, r1
10002b1e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002b22:	4313      	orrs	r3, r2
10002b24:	f8c1 38a4 	str.w	r3, [r1, #2212]	@ 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10002b28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b2c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b34:	f043 0304 	orr.w	r3, r3, #4
10002b38:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10002b3c:	e009      	b.n	10002b52 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10002b3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b42:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b4a:	f023 0304 	bic.w	r3, r3, #4
10002b4e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10002b52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b56:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b5e:	f043 0301 	orr.w	r3, r3, #1
10002b62:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002b66:	f7fd feef 	bl	10000948 <HAL_GetTick>
10002b6a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002b6c:	e008      	b.n	10002b80 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002b6e:	f7fd feeb 	bl	10000948 <HAL_GetTick>
10002b72:	4602      	mov	r2, r0
10002b74:	68fb      	ldr	r3, [r7, #12]
10002b76:	1ad3      	subs	r3, r2, r3
10002b78:	2b64      	cmp	r3, #100	@ 0x64
10002b7a:	d901      	bls.n	10002b80 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10002b7c:	2303      	movs	r3, #3
10002b7e:	e03c      	b.n	10002bfa <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002b80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b84:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b88:	f003 0302 	and.w	r3, r3, #2
10002b8c:	2b02      	cmp	r3, #2
10002b8e:	d1ee      	bne.n	10002b6e <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002b90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b94:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b9c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10002ba0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10002ba4:	e028      	b.n	10002bf8 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002ba6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002baa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002bae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002bb6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10002bba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002bbe:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002bc2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002bc6:	f023 0301 	bic.w	r3, r3, #1
10002bca:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002bce:	f7fd febb 	bl	10000948 <HAL_GetTick>
10002bd2:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002bd4:	e008      	b.n	10002be8 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002bd6:	f7fd feb7 	bl	10000948 <HAL_GetTick>
10002bda:	4602      	mov	r2, r0
10002bdc:	68fb      	ldr	r3, [r7, #12]
10002bde:	1ad3      	subs	r3, r2, r3
10002be0:	2b64      	cmp	r3, #100	@ 0x64
10002be2:	d901      	bls.n	10002be8 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10002be4:	2303      	movs	r3, #3
10002be6:	e008      	b.n	10002bfa <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002be8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002bec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002bf0:	f003 0302 	and.w	r3, r3, #2
10002bf4:	2b02      	cmp	r3, #2
10002bf6:	d0ee      	beq.n	10002bd6 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10002bf8:	2300      	movs	r3, #0
}
10002bfa:	4618      	mov	r0, r3
10002bfc:	3710      	adds	r7, #16
10002bfe:	46bd      	mov	sp, r7
10002c00:	bd80      	pop	{r7, pc}
10002c02:	bf00      	nop
10002c04:	ffc0fe00 	.word	0xffc0fe00

10002c08 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10002c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10002c0c:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
10002c10:	af00      	add	r7, sp, #0
10002c12:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002c16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002c1a:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10002c1c:	2300      	movs	r3, #0
10002c1e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
10002c22:	2300      	movs	r3, #0
10002c24:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10002c28:	2300      	movs	r3, #0
10002c2a:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10002c2e:	2300      	movs	r3, #0
10002c30:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10002c34:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002c38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002c3c:	681b      	ldr	r3, [r3, #0]
10002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
10002c42:	f402 0400 	and.w	r4, r2, #8388608	@ 0x800000
10002c46:	2500      	movs	r5, #0
10002c48:	ea54 0305 	orrs.w	r3, r4, r5
10002c4c:	d011      	beq.n	10002c72 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10002c4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c52:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10002c56:	f023 0103 	bic.w	r1, r3, #3
10002c5a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002c5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002c62:	681b      	ldr	r3, [r3, #0]
10002c64:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
10002c68:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002c6c:	430b      	orrs	r3, r1
10002c6e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10002c72:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002c76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002c7a:	681b      	ldr	r3, [r3, #0]
10002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
10002c80:	f002 0810 	and.w	r8, r2, #16
10002c84:	f04f 0900 	mov.w	r9, #0
10002c88:	ea58 0309 	orrs.w	r3, r8, r9
10002c8c:	d038      	beq.n	10002d00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10002c8e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002c92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002c96:	681b      	ldr	r3, [r3, #0]
10002c98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10002c9c:	2b01      	cmp	r3, #1
10002c9e:	d11d      	bne.n	10002cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002ca0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002ca4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002ca8:	681b      	ldr	r3, [r3, #0]
10002caa:	3380      	adds	r3, #128	@ 0x80
10002cac:	4618      	mov	r0, r3
10002cae:	f7ff fe53 	bl	10002958 <RCCEx_PLL4_Config>
10002cb2:	4603      	mov	r3, r0
10002cb4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10002cb8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002cbc:	2b00      	cmp	r3, #0
10002cbe:	d003      	beq.n	10002cc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10002cc0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002cc4:	f001 be2a 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10002cc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ccc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002cd0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10002cd8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10002cdc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ce0:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
10002ce4:	f023 0107 	bic.w	r1, r3, #7
10002ce8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002cec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002cf0:	681b      	ldr	r3, [r3, #0]
10002cf2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10002cf6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002cfa:	430b      	orrs	r3, r1
10002cfc:	f8c2 38c0 	str.w	r3, [r2, #2240]	@ 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10002d00:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002d04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d08:	681b      	ldr	r3, [r3, #0]
10002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
10002d0e:	f002 0a20 	and.w	sl, r2, #32
10002d12:	f04f 0b00 	mov.w	fp, #0
10002d16:	ea5a 030b 	orrs.w	r3, sl, fp
10002d1a:	d038      	beq.n	10002d8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10002d1c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002d20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d24:	681b      	ldr	r3, [r3, #0]
10002d26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10002d2a:	2b01      	cmp	r3, #1
10002d2c:	d11d      	bne.n	10002d6a <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002d2e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002d32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d36:	681b      	ldr	r3, [r3, #0]
10002d38:	3380      	adds	r3, #128	@ 0x80
10002d3a:	4618      	mov	r0, r3
10002d3c:	f7ff fe0c 	bl	10002958 <RCCEx_PLL4_Config>
10002d40:	4603      	mov	r3, r0
10002d42:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10002d46:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002d4a:	2b00      	cmp	r3, #0
10002d4c:	d003      	beq.n	10002d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
10002d4e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002d52:	f001 bde3 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10002d56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d5a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002d5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10002d66:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10002d6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d6e:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	@ 0x8c4
10002d72:	f023 0107 	bic.w	r1, r3, #7
10002d76:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002d7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d7e:	681b      	ldr	r3, [r3, #0]
10002d80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10002d84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d88:	430b      	orrs	r3, r1
10002d8a:	f8c2 38c4 	str.w	r3, [r2, #2244]	@ 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10002d8e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002d92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d96:	681b      	ldr	r3, [r3, #0]
10002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
10002d9c:	2100      	movs	r1, #0
10002d9e:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
10002da2:	f003 0320 	and.w	r3, r3, #32
10002da6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
10002daa:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
10002dae:	460b      	mov	r3, r1
10002db0:	4313      	orrs	r3, r2
10002db2:	d038      	beq.n	10002e26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10002db4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002db8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002dbc:	681b      	ldr	r3, [r3, #0]
10002dbe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10002dc2:	2b01      	cmp	r3, #1
10002dc4:	d11d      	bne.n	10002e02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002dc6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002dca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002dce:	681b      	ldr	r3, [r3, #0]
10002dd0:	3344      	adds	r3, #68	@ 0x44
10002dd2:	4618      	mov	r0, r3
10002dd4:	f7ff fc56 	bl	10002684 <RCCEx_PLL3_Config>
10002dd8:	4603      	mov	r3, r0
10002dda:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10002dde:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002de2:	2b00      	cmp	r3, #0
10002de4:	d003      	beq.n	10002dee <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
10002de6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002dea:	f001 bd97 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10002dee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002df2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002df6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002dfa:	f043 0320 	orr.w	r3, r3, #32
10002dfe:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10002e02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10002e0a:	f023 0107 	bic.w	r1, r3, #7
10002e0e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002e12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002e16:	681b      	ldr	r3, [r3, #0]
10002e18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10002e1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e20:	430b      	orrs	r3, r1
10002e22:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10002e26:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002e2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002e2e:	681b      	ldr	r3, [r3, #0]
10002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
10002e34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
10002e38:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
10002e3c:	2300      	movs	r3, #0
10002e3e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
10002e42:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
10002e46:	460b      	mov	r3, r1
10002e48:	4313      	orrs	r3, r2
10002e4a:	d07e      	beq.n	10002f4a <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10002e4c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002e50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002e54:	681b      	ldr	r3, [r3, #0]
10002e56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10002e5a:	2b04      	cmp	r3, #4
10002e5c:	d044      	beq.n	10002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
10002e5e:	2b04      	cmp	r3, #4
10002e60:	d861      	bhi.n	10002f26 <HAL_RCCEx_PeriphCLKConfig+0x31e>
10002e62:	2b00      	cmp	r3, #0
10002e64:	d002      	beq.n	10002e6c <HAL_RCCEx_PeriphCLKConfig+0x264>
10002e66:	2b01      	cmp	r3, #1
10002e68:	d01f      	beq.n	10002eaa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10002e6a:	e05c      	b.n	10002f26 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002e6c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002e70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002e74:	681b      	ldr	r3, [r3, #0]
10002e76:	3380      	adds	r3, #128	@ 0x80
10002e78:	4618      	mov	r0, r3
10002e7a:	f7ff fd6d 	bl	10002958 <RCCEx_PLL4_Config>
10002e7e:	4603      	mov	r3, r0
10002e80:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10002e84:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002e88:	2b00      	cmp	r3, #0
10002e8a:	d003      	beq.n	10002e94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10002e8c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002e90:	f001 bd44 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10002e94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e98:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002e9c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ea0:	f043 0320 	orr.w	r3, r3, #32
10002ea4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10002ea8:	e03d      	b.n	10002f26 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002eaa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002eae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002eb2:	681b      	ldr	r3, [r3, #0]
10002eb4:	3344      	adds	r3, #68	@ 0x44
10002eb6:	4618      	mov	r0, r3
10002eb8:	f7ff fbe4 	bl	10002684 <RCCEx_PLL3_Config>
10002ebc:	4603      	mov	r3, r0
10002ebe:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10002ec2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002ec6:	2b00      	cmp	r3, #0
10002ec8:	d003      	beq.n	10002ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
10002eca:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002ece:	f001 bd25 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10002ed2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ed6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002eda:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ede:	f043 0320 	orr.w	r3, r3, #32
10002ee2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10002ee6:	e01e      	b.n	10002f26 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002ee8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002eec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002ef0:	681b      	ldr	r3, [r3, #0]
10002ef2:	3344      	adds	r3, #68	@ 0x44
10002ef4:	4618      	mov	r0, r3
10002ef6:	f7ff fbc5 	bl	10002684 <RCCEx_PLL3_Config>
10002efa:	4603      	mov	r3, r0
10002efc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10002f00:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002f04:	2b00      	cmp	r3, #0
10002f06:	d003      	beq.n	10002f10 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10002f08:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002f0c:	f001 bd06 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10002f10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f14:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002f18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10002f20:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10002f24:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10002f26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f2a:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	@ 0x8c8
10002f2e:	f023 0107 	bic.w	r1, r3, #7
10002f32:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002f36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002f3a:	681b      	ldr	r3, [r3, #0]
10002f3c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10002f40:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002f44:	430b      	orrs	r3, r1
10002f46:	f8c2 38c8 	str.w	r3, [r2, #2248]	@ 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10002f4a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002f4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002f52:	681b      	ldr	r3, [r3, #0]
10002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
10002f58:	f402 7380 	and.w	r3, r2, #256	@ 0x100
10002f5c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
10002f60:	2300      	movs	r3, #0
10002f62:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
10002f66:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
10002f6a:	460b      	mov	r3, r1
10002f6c:	4313      	orrs	r3, r2
10002f6e:	d07e      	beq.n	1000306e <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10002f70:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002f74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002f78:	681b      	ldr	r3, [r3, #0]
10002f7a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10002f7e:	2b05      	cmp	r3, #5
10002f80:	d044      	beq.n	1000300c <HAL_RCCEx_PeriphCLKConfig+0x404>
10002f82:	2b05      	cmp	r3, #5
10002f84:	d861      	bhi.n	1000304a <HAL_RCCEx_PeriphCLKConfig+0x442>
10002f86:	2b00      	cmp	r3, #0
10002f88:	d002      	beq.n	10002f90 <HAL_RCCEx_PeriphCLKConfig+0x388>
10002f8a:	2b01      	cmp	r3, #1
10002f8c:	d01f      	beq.n	10002fce <HAL_RCCEx_PeriphCLKConfig+0x3c6>
10002f8e:	e05c      	b.n	1000304a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002f90:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002f94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002f98:	681b      	ldr	r3, [r3, #0]
10002f9a:	3380      	adds	r3, #128	@ 0x80
10002f9c:	4618      	mov	r0, r3
10002f9e:	f7ff fcdb 	bl	10002958 <RCCEx_PLL4_Config>
10002fa2:	4603      	mov	r3, r0
10002fa4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10002fa8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002fac:	2b00      	cmp	r3, #0
10002fae:	d003      	beq.n	10002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10002fb0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002fb4:	f001 bcb2 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10002fb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fbc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002fc0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002fc4:	f043 0320 	orr.w	r3, r3, #32
10002fc8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10002fcc:	e03d      	b.n	1000304a <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002fce:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002fd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002fd6:	681b      	ldr	r3, [r3, #0]
10002fd8:	3344      	adds	r3, #68	@ 0x44
10002fda:	4618      	mov	r0, r3
10002fdc:	f7ff fb52 	bl	10002684 <RCCEx_PLL3_Config>
10002fe0:	4603      	mov	r3, r0
10002fe2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10002fe6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002fea:	2b00      	cmp	r3, #0
10002fec:	d003      	beq.n	10002ff6 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
10002fee:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002ff2:	f001 bc93 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10002ff6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ffa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002ffe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003002:	f043 0320 	orr.w	r3, r3, #32
10003006:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000300a:	e01e      	b.n	1000304a <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000300c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003010:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003014:	681b      	ldr	r3, [r3, #0]
10003016:	3344      	adds	r3, #68	@ 0x44
10003018:	4618      	mov	r0, r3
1000301a:	f7ff fb33 	bl	10002684 <RCCEx_PLL3_Config>
1000301e:	4603      	mov	r3, r0
10003020:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003024:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003028:	2b00      	cmp	r3, #0
1000302a:	d003      	beq.n	10003034 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
1000302c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003030:	f001 bc74 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003034:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003038:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000303c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003044:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003048:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
1000304a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000304e:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	@ 0x8cc
10003052:	f023 0107 	bic.w	r1, r3, #7
10003056:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000305a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000305e:	681b      	ldr	r3, [r3, #0]
10003060:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10003064:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003068:	430b      	orrs	r3, r1
1000306a:	f8c2 38cc 	str.w	r3, [r2, #2252]	@ 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
1000306e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003072:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003076:	681b      	ldr	r3, [r3, #0]
10003078:	e9d3 2300 	ldrd	r2, r3, [r3]
1000307c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
10003080:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
10003084:	2300      	movs	r3, #0
10003086:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
1000308a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
1000308e:	460b      	mov	r3, r1
10003090:	4313      	orrs	r3, r2
10003092:	d07e      	beq.n	10003192 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10003094:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003098:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000309c:	681b      	ldr	r3, [r3, #0]
1000309e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
100030a2:	2b04      	cmp	r3, #4
100030a4:	d044      	beq.n	10003130 <HAL_RCCEx_PeriphCLKConfig+0x528>
100030a6:	2b04      	cmp	r3, #4
100030a8:	d861      	bhi.n	1000316e <HAL_RCCEx_PeriphCLKConfig+0x566>
100030aa:	2b00      	cmp	r3, #0
100030ac:	d002      	beq.n	100030b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
100030ae:	2b01      	cmp	r3, #1
100030b0:	d01f      	beq.n	100030f2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
100030b2:	e05c      	b.n	1000316e <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100030b4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100030b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100030bc:	681b      	ldr	r3, [r3, #0]
100030be:	3380      	adds	r3, #128	@ 0x80
100030c0:	4618      	mov	r0, r3
100030c2:	f7ff fc49 	bl	10002958 <RCCEx_PLL4_Config>
100030c6:	4603      	mov	r3, r0
100030c8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100030cc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100030d0:	2b00      	cmp	r3, #0
100030d2:	d003      	beq.n	100030dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
100030d4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100030d8:	f001 bc20 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100030dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030e0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100030e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100030e8:	f043 0320 	orr.w	r3, r3, #32
100030ec:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100030f0:	e03d      	b.n	1000316e <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100030f2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100030f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100030fa:	681b      	ldr	r3, [r3, #0]
100030fc:	3344      	adds	r3, #68	@ 0x44
100030fe:	4618      	mov	r0, r3
10003100:	f7ff fac0 	bl	10002684 <RCCEx_PLL3_Config>
10003104:	4603      	mov	r3, r0
10003106:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000310a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000310e:	2b00      	cmp	r3, #0
10003110:	d003      	beq.n	1000311a <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
10003112:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003116:	f001 bc01 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000311a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000311e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003122:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003126:	f043 0320 	orr.w	r3, r3, #32
1000312a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000312e:	e01e      	b.n	1000316e <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003130:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003134:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003138:	681b      	ldr	r3, [r3, #0]
1000313a:	3344      	adds	r3, #68	@ 0x44
1000313c:	4618      	mov	r0, r3
1000313e:	f7ff faa1 	bl	10002684 <RCCEx_PLL3_Config>
10003142:	4603      	mov	r3, r0
10003144:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003148:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000314c:	2b00      	cmp	r3, #0
1000314e:	d003      	beq.n	10003158 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
10003150:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003154:	f001 bbe2 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003158:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000315c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003160:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003168:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000316c:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
1000316e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003172:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	@ 0x8d0
10003176:	f023 0107 	bic.w	r1, r3, #7
1000317a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000317e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003182:	681b      	ldr	r3, [r3, #0]
10003184:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10003188:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000318c:	430b      	orrs	r3, r1
1000318e:	f8c2 38d0 	str.w	r3, [r2, #2256]	@ 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
10003192:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003196:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000319a:	681b      	ldr	r3, [r3, #0]
1000319c:	e9d3 2300 	ldrd	r2, r3, [r3]
100031a0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
100031a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
100031a8:	2300      	movs	r3, #0
100031aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
100031ae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
100031b2:	460b      	mov	r3, r1
100031b4:	4313      	orrs	r3, r2
100031b6:	d07e      	beq.n	100032b6 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
100031b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100031bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100031c0:	681b      	ldr	r3, [r3, #0]
100031c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
100031c6:	2b04      	cmp	r3, #4
100031c8:	d044      	beq.n	10003254 <HAL_RCCEx_PeriphCLKConfig+0x64c>
100031ca:	2b04      	cmp	r3, #4
100031cc:	d861      	bhi.n	10003292 <HAL_RCCEx_PeriphCLKConfig+0x68a>
100031ce:	2b00      	cmp	r3, #0
100031d0:	d002      	beq.n	100031d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
100031d2:	2b01      	cmp	r3, #1
100031d4:	d01f      	beq.n	10003216 <HAL_RCCEx_PeriphCLKConfig+0x60e>
100031d6:	e05c      	b.n	10003292 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100031d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100031dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100031e0:	681b      	ldr	r3, [r3, #0]
100031e2:	3380      	adds	r3, #128	@ 0x80
100031e4:	4618      	mov	r0, r3
100031e6:	f7ff fbb7 	bl	10002958 <RCCEx_PLL4_Config>
100031ea:	4603      	mov	r3, r0
100031ec:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100031f0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100031f4:	2b00      	cmp	r3, #0
100031f6:	d003      	beq.n	10003200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
100031f8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100031fc:	f001 bb8e 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003200:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003204:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003208:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000320c:	f043 0320 	orr.w	r3, r3, #32
10003210:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003214:	e03d      	b.n	10003292 <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003216:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000321a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000321e:	681b      	ldr	r3, [r3, #0]
10003220:	3344      	adds	r3, #68	@ 0x44
10003222:	4618      	mov	r0, r3
10003224:	f7ff fa2e 	bl	10002684 <RCCEx_PLL3_Config>
10003228:	4603      	mov	r3, r0
1000322a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000322e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003232:	2b00      	cmp	r3, #0
10003234:	d003      	beq.n	1000323e <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
10003236:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000323a:	f001 bb6f 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000323e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003242:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003246:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000324a:	f043 0320 	orr.w	r3, r3, #32
1000324e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003252:	e01e      	b.n	10003292 <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003254:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003258:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000325c:	681b      	ldr	r3, [r3, #0]
1000325e:	3344      	adds	r3, #68	@ 0x44
10003260:	4618      	mov	r0, r3
10003262:	f7ff fa0f 	bl	10002684 <RCCEx_PLL3_Config>
10003266:	4603      	mov	r3, r0
10003268:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000326c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003270:	2b00      	cmp	r3, #0
10003272:	d003      	beq.n	1000327c <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10003274:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003278:	f001 bb50 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000327c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003280:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003284:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000328c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003290:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
10003292:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003296:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	@ 0x8d4
1000329a:	f023 0107 	bic.w	r1, r3, #7
1000329e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100032a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100032a6:	681b      	ldr	r3, [r3, #0]
100032a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
100032ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100032b0:	430b      	orrs	r3, r1
100032b2:	f8c2 38d4 	str.w	r3, [r2, #2260]	@ 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
100032b6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100032ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100032be:	681b      	ldr	r3, [r3, #0]
100032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
100032c4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
100032c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
100032cc:	2300      	movs	r3, #0
100032ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
100032d2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
100032d6:	460b      	mov	r3, r1
100032d8:	4313      	orrs	r3, r2
100032da:	d07e      	beq.n	100033da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
100032dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100032e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100032e4:	681b      	ldr	r3, [r3, #0]
100032e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
100032ea:	2b04      	cmp	r3, #4
100032ec:	d044      	beq.n	10003378 <HAL_RCCEx_PeriphCLKConfig+0x770>
100032ee:	2b04      	cmp	r3, #4
100032f0:	d861      	bhi.n	100033b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
100032f2:	2b00      	cmp	r3, #0
100032f4:	d002      	beq.n	100032fc <HAL_RCCEx_PeriphCLKConfig+0x6f4>
100032f6:	2b01      	cmp	r3, #1
100032f8:	d01f      	beq.n	1000333a <HAL_RCCEx_PeriphCLKConfig+0x732>
100032fa:	e05c      	b.n	100033b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100032fc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003300:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003304:	681b      	ldr	r3, [r3, #0]
10003306:	3380      	adds	r3, #128	@ 0x80
10003308:	4618      	mov	r0, r3
1000330a:	f7ff fb25 	bl	10002958 <RCCEx_PLL4_Config>
1000330e:	4603      	mov	r3, r0
10003310:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003314:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003318:	2b00      	cmp	r3, #0
1000331a:	d003      	beq.n	10003324 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
1000331c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003320:	f001 bafc 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003324:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003328:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000332c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003330:	f043 0310 	orr.w	r3, r3, #16
10003334:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003338:	e03d      	b.n	100033b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000333a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000333e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003342:	681b      	ldr	r3, [r3, #0]
10003344:	3344      	adds	r3, #68	@ 0x44
10003346:	4618      	mov	r0, r3
10003348:	f7ff f99c 	bl	10002684 <RCCEx_PLL3_Config>
1000334c:	4603      	mov	r3, r0
1000334e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003352:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003356:	2b00      	cmp	r3, #0
10003358:	d003      	beq.n	10003362 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
1000335a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000335e:	f001 badd 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003362:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003366:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000336a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000336e:	f043 0320 	orr.w	r3, r3, #32
10003372:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003376:	e01e      	b.n	100033b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003378:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000337c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003380:	681b      	ldr	r3, [r3, #0]
10003382:	3344      	adds	r3, #68	@ 0x44
10003384:	4618      	mov	r0, r3
10003386:	f7ff f97d 	bl	10002684 <RCCEx_PLL3_Config>
1000338a:	4603      	mov	r3, r0
1000338c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003390:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003394:	2b00      	cmp	r3, #0
10003396:	d003      	beq.n	100033a0 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
10003398:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000339c:	f001 babe 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100033a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033a4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100033a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100033ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100033b0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100033b4:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
100033b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033ba:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	@ 0x8d8
100033be:	f023 0107 	bic.w	r1, r3, #7
100033c2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100033c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100033ca:	681b      	ldr	r3, [r3, #0]
100033cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
100033d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100033d4:	430b      	orrs	r3, r1
100033d6:	f8c2 38d8 	str.w	r3, [r2, #2264]	@ 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
100033da:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100033de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100033e2:	681b      	ldr	r3, [r3, #0]
100033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
100033e8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
100033ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
100033f0:	2300      	movs	r3, #0
100033f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
100033f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
100033fa:	460b      	mov	r3, r1
100033fc:	4313      	orrs	r3, r2
100033fe:	d07e      	beq.n	100034fe <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10003400:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003404:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003408:	681b      	ldr	r3, [r3, #0]
1000340a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
1000340e:	2b04      	cmp	r3, #4
10003410:	d044      	beq.n	1000349c <HAL_RCCEx_PeriphCLKConfig+0x894>
10003412:	2b04      	cmp	r3, #4
10003414:	d861      	bhi.n	100034da <HAL_RCCEx_PeriphCLKConfig+0x8d2>
10003416:	2b00      	cmp	r3, #0
10003418:	d002      	beq.n	10003420 <HAL_RCCEx_PeriphCLKConfig+0x818>
1000341a:	2b01      	cmp	r3, #1
1000341c:	d01f      	beq.n	1000345e <HAL_RCCEx_PeriphCLKConfig+0x856>
1000341e:	e05c      	b.n	100034da <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003420:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003424:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003428:	681b      	ldr	r3, [r3, #0]
1000342a:	3380      	adds	r3, #128	@ 0x80
1000342c:	4618      	mov	r0, r3
1000342e:	f7ff fa93 	bl	10002958 <RCCEx_PLL4_Config>
10003432:	4603      	mov	r3, r0
10003434:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003438:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000343c:	2b00      	cmp	r3, #0
1000343e:	d003      	beq.n	10003448 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10003440:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003444:	f001 ba6a 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003448:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000344c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003450:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003454:	f043 0310 	orr.w	r3, r3, #16
10003458:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000345c:	e03d      	b.n	100034da <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000345e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003462:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003466:	681b      	ldr	r3, [r3, #0]
10003468:	3344      	adds	r3, #68	@ 0x44
1000346a:	4618      	mov	r0, r3
1000346c:	f7ff f90a 	bl	10002684 <RCCEx_PLL3_Config>
10003470:	4603      	mov	r3, r0
10003472:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003476:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000347a:	2b00      	cmp	r3, #0
1000347c:	d003      	beq.n	10003486 <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
1000347e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003482:	f001 ba4b 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003486:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000348a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000348e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003492:	f043 0320 	orr.w	r3, r3, #32
10003496:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000349a:	e01e      	b.n	100034da <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000349c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100034a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100034a4:	681b      	ldr	r3, [r3, #0]
100034a6:	3344      	adds	r3, #68	@ 0x44
100034a8:	4618      	mov	r0, r3
100034aa:	f7ff f8eb 	bl	10002684 <RCCEx_PLL3_Config>
100034ae:	4603      	mov	r3, r0
100034b0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100034b4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100034b8:	2b00      	cmp	r3, #0
100034ba:	d003      	beq.n	100034c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
100034bc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100034c0:	f001 ba2c 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100034c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034c8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100034cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100034d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100034d4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100034d8:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
100034da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034de:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	@ 0x8dc
100034e2:	f023 0107 	bic.w	r1, r3, #7
100034e6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100034ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100034ee:	681b      	ldr	r3, [r3, #0]
100034f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
100034f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100034f8:	430b      	orrs	r3, r1
100034fa:	f8c2 38dc 	str.w	r3, [r2, #2268]	@ 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
100034fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003502:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003506:	681b      	ldr	r3, [r3, #0]
10003508:	e9d3 2300 	ldrd	r2, r3, [r3]
1000350c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
10003510:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
10003514:	2300      	movs	r3, #0
10003516:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
1000351a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
1000351e:	460b      	mov	r3, r1
10003520:	4313      	orrs	r3, r2
10003522:	d038      	beq.n	10003596 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10003524:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003528:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000352c:	681b      	ldr	r3, [r3, #0]
1000352e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10003532:	2b01      	cmp	r3, #1
10003534:	d11d      	bne.n	10003572 <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003536:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000353a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000353e:	681b      	ldr	r3, [r3, #0]
10003540:	3380      	adds	r3, #128	@ 0x80
10003542:	4618      	mov	r0, r3
10003544:	f7ff fa08 	bl	10002958 <RCCEx_PLL4_Config>
10003548:	4603      	mov	r3, r0
1000354a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000354e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003552:	2b00      	cmp	r3, #0
10003554:	d003      	beq.n	1000355e <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
10003556:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000355a:	f001 b9df 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000355e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003562:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003566:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000356a:	f043 0320 	orr.w	r3, r3, #32
1000356e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10003572:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003576:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	@ 0x8e0
1000357a:	f023 0107 	bic.w	r1, r3, #7
1000357e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003582:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003586:	681b      	ldr	r3, [r3, #0]
10003588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
1000358c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003590:	430b      	orrs	r3, r1
10003592:	f8c2 38e0 	str.w	r3, [r2, #2272]	@ 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10003596:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000359a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000359e:	681b      	ldr	r3, [r3, #0]
100035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
100035a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
100035a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
100035ac:	2300      	movs	r3, #0
100035ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
100035b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
100035b6:	460b      	mov	r3, r1
100035b8:	4313      	orrs	r3, r2
100035ba:	d05b      	beq.n	10003674 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
100035bc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100035c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100035c4:	681b      	ldr	r3, [r3, #0]
100035c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
100035ca:	2b01      	cmp	r3, #1
100035cc:	d002      	beq.n	100035d4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
100035ce:	2b05      	cmp	r3, #5
100035d0:	d01f      	beq.n	10003612 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
100035d2:	e03d      	b.n	10003650 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100035d4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100035d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100035dc:	681b      	ldr	r3, [r3, #0]
100035de:	3380      	adds	r3, #128	@ 0x80
100035e0:	4618      	mov	r0, r3
100035e2:	f7ff f9b9 	bl	10002958 <RCCEx_PLL4_Config>
100035e6:	4603      	mov	r3, r0
100035e8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100035ec:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100035f0:	2b00      	cmp	r3, #0
100035f2:	d003      	beq.n	100035fc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
100035f4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100035f8:	f001 b990 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100035fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003600:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003604:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003608:	f043 0320 	orr.w	r3, r3, #32
1000360c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003610:	e01e      	b.n	10003650 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003612:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003616:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000361a:	681b      	ldr	r3, [r3, #0]
1000361c:	3344      	adds	r3, #68	@ 0x44
1000361e:	4618      	mov	r0, r3
10003620:	f7ff f830 	bl	10002684 <RCCEx_PLL3_Config>
10003624:	4603      	mov	r3, r0
10003626:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000362a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000362e:	2b00      	cmp	r3, #0
10003630:	d003      	beq.n	1000363a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10003632:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003636:	f001 b971 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000363a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000363e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003642:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003646:	f043 0320 	orr.w	r3, r3, #32
1000364a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000364e:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10003650:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003654:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10003658:	f023 0107 	bic.w	r1, r3, #7
1000365c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003660:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003664:	681b      	ldr	r3, [r3, #0]
10003666:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
1000366a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000366e:	430b      	orrs	r3, r1
10003670:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10003674:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003678:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000367c:	681b      	ldr	r3, [r3, #0]
1000367e:	e9d3 2300 	ldrd	r2, r3, [r3]
10003682:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
10003686:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
1000368a:	2300      	movs	r3, #0
1000368c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
10003690:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
10003694:	460b      	mov	r3, r1
10003696:	4313      	orrs	r3, r2
10003698:	d038      	beq.n	1000370c <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
1000369a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000369e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100036a2:	681b      	ldr	r3, [r3, #0]
100036a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
100036a8:	2b01      	cmp	r3, #1
100036aa:	d11d      	bne.n	100036e8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100036ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100036b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100036b4:	681b      	ldr	r3, [r3, #0]
100036b6:	3380      	adds	r3, #128	@ 0x80
100036b8:	4618      	mov	r0, r3
100036ba:	f7ff f94d 	bl	10002958 <RCCEx_PLL4_Config>
100036be:	4603      	mov	r3, r0
100036c0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100036c4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100036c8:	2b00      	cmp	r3, #0
100036ca:	d003      	beq.n	100036d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
100036cc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100036d0:	f001 b924 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100036d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036d8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100036dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100036e0:	f043 0320 	orr.w	r3, r3, #32
100036e4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
100036e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036ec:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	@ 0x8e4
100036f0:	f023 0107 	bic.w	r1, r3, #7
100036f4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100036f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100036fc:	681b      	ldr	r3, [r3, #0]
100036fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10003702:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003706:	430b      	orrs	r3, r1
10003708:	f8c2 38e4 	str.w	r3, [r2, #2276]	@ 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
1000370c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003710:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003714:	681b      	ldr	r3, [r3, #0]
10003716:	e9d3 2300 	ldrd	r2, r3, [r3]
1000371a:	f002 0302 	and.w	r3, r2, #2
1000371e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
10003722:	2300      	movs	r3, #0
10003724:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
10003728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
1000372c:	460b      	mov	r3, r1
1000372e:	4313      	orrs	r3, r2
10003730:	d038      	beq.n	100037a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10003732:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003736:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000373a:	681b      	ldr	r3, [r3, #0]
1000373c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10003740:	2b01      	cmp	r3, #1
10003742:	d11d      	bne.n	10003780 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003744:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003748:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000374c:	681b      	ldr	r3, [r3, #0]
1000374e:	3380      	adds	r3, #128	@ 0x80
10003750:	4618      	mov	r0, r3
10003752:	f7ff f901 	bl	10002958 <RCCEx_PLL4_Config>
10003756:	4603      	mov	r3, r0
10003758:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000375c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003760:	2b00      	cmp	r3, #0
10003762:	d003      	beq.n	1000376c <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10003764:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003768:	f001 b8d8 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000376c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003770:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003774:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003778:	f043 0320 	orr.w	r3, r3, #32
1000377c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
10003780:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003784:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
10003788:	f023 0107 	bic.w	r1, r3, #7
1000378c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003790:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003794:	681b      	ldr	r3, [r3, #0]
10003796:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
1000379a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000379e:	430b      	orrs	r3, r1
100037a0:	f8c2 38e8 	str.w	r3, [r2, #2280]	@ 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
100037a4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100037a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100037ac:	681b      	ldr	r3, [r3, #0]
100037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
100037b2:	f002 0304 	and.w	r3, r2, #4
100037b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
100037ba:	2300      	movs	r3, #0
100037bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
100037c0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
100037c4:	460b      	mov	r3, r1
100037c6:	4313      	orrs	r3, r2
100037c8:	d038      	beq.n	1000383c <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
100037ca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100037ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100037d2:	681b      	ldr	r3, [r3, #0]
100037d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
100037d8:	2b01      	cmp	r3, #1
100037da:	d11d      	bne.n	10003818 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100037dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100037e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100037e4:	681b      	ldr	r3, [r3, #0]
100037e6:	3380      	adds	r3, #128	@ 0x80
100037e8:	4618      	mov	r0, r3
100037ea:	f7ff f8b5 	bl	10002958 <RCCEx_PLL4_Config>
100037ee:	4603      	mov	r3, r0
100037f0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100037f4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100037f8:	2b00      	cmp	r3, #0
100037fa:	d003      	beq.n	10003804 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
100037fc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003800:	f001 b88c 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003804:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003808:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000380c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003810:	f043 0320 	orr.w	r3, r3, #32
10003814:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10003818:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000381c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
10003820:	f023 0107 	bic.w	r1, r3, #7
10003824:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003828:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000382c:	681b      	ldr	r3, [r3, #0]
1000382e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10003832:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003836:	430b      	orrs	r3, r1
10003838:	f8c2 38ec 	str.w	r3, [r2, #2284]	@ 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
1000383c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003840:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003844:	681b      	ldr	r3, [r3, #0]
10003846:	e9d3 2300 	ldrd	r2, r3, [r3]
1000384a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
1000384e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
10003852:	2300      	movs	r3, #0
10003854:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
10003858:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
1000385c:	460b      	mov	r3, r1
1000385e:	4313      	orrs	r3, r2
10003860:	d038      	beq.n	100038d4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10003862:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003866:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000386a:	681b      	ldr	r3, [r3, #0]
1000386c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
10003870:	2b01      	cmp	r3, #1
10003872:	d11d      	bne.n	100038b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003874:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003878:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000387c:	681b      	ldr	r3, [r3, #0]
1000387e:	3380      	adds	r3, #128	@ 0x80
10003880:	4618      	mov	r0, r3
10003882:	f7ff f869 	bl	10002958 <RCCEx_PLL4_Config>
10003886:	4603      	mov	r3, r0
10003888:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000388c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003890:	2b00      	cmp	r3, #0
10003892:	d003      	beq.n	1000389c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10003894:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003898:	f001 b840 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000389c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038a0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100038a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100038a8:	f043 0320 	orr.w	r3, r3, #32
100038ac:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
100038b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038b4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
100038b8:	f023 0107 	bic.w	r1, r3, #7
100038bc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100038c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100038c4:	681b      	ldr	r3, [r3, #0]
100038c6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
100038ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100038ce:	430b      	orrs	r3, r1
100038d0:	f8c2 38f0 	str.w	r3, [r2, #2288]	@ 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
100038d4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100038d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100038dc:	681b      	ldr	r3, [r3, #0]
100038de:	e9d3 2300 	ldrd	r2, r3, [r3]
100038e2:	f002 0301 	and.w	r3, r2, #1
100038e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
100038ea:	2300      	movs	r3, #0
100038ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
100038f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
100038f4:	460b      	mov	r3, r1
100038f6:	4313      	orrs	r3, r2
100038f8:	d05b      	beq.n	100039b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
100038fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100038fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003902:	681b      	ldr	r3, [r3, #0]
10003904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
10003908:	2b01      	cmp	r3, #1
1000390a:	d002      	beq.n	10003912 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
1000390c:	2b04      	cmp	r3, #4
1000390e:	d01f      	beq.n	10003950 <HAL_RCCEx_PeriphCLKConfig+0xd48>
10003910:	e03d      	b.n	1000398e <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003912:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003916:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000391a:	681b      	ldr	r3, [r3, #0]
1000391c:	3344      	adds	r3, #68	@ 0x44
1000391e:	4618      	mov	r0, r3
10003920:	f7fe feb0 	bl	10002684 <RCCEx_PLL3_Config>
10003924:	4603      	mov	r3, r0
10003926:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000392a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000392e:	2b00      	cmp	r3, #0
10003930:	d003      	beq.n	1000393a <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10003932:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003936:	f000 bff1 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000393a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000393e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003942:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003946:	f043 0320 	orr.w	r3, r3, #32
1000394a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000394e:	e01e      	b.n	1000398e <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003950:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003954:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003958:	681b      	ldr	r3, [r3, #0]
1000395a:	3380      	adds	r3, #128	@ 0x80
1000395c:	4618      	mov	r0, r3
1000395e:	f7fe fffb 	bl	10002958 <RCCEx_PLL4_Config>
10003962:	4603      	mov	r3, r0
10003964:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003968:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000396c:	2b00      	cmp	r3, #0
1000396e:	d003      	beq.n	10003978 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
10003970:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003974:	f000 bfd2 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003978:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000397c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003980:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003984:	f043 0320 	orr.w	r3, r3, #32
10003988:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000398c:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
1000398e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003992:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10003996:	f023 0107 	bic.w	r1, r3, #7
1000399a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000399e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039a2:	681b      	ldr	r3, [r3, #0]
100039a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
100039a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100039ac:	430b      	orrs	r3, r1
100039ae:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
100039b2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100039b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039ba:	681b      	ldr	r3, [r3, #0]
100039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
100039c0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
100039c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
100039c8:	2300      	movs	r3, #0
100039ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
100039ce:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
100039d2:	460b      	mov	r3, r1
100039d4:	4313      	orrs	r3, r2
100039d6:	d05b      	beq.n	10003a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
100039d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100039dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039e0:	681b      	ldr	r3, [r3, #0]
100039e2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
100039e6:	2b01      	cmp	r3, #1
100039e8:	d002      	beq.n	100039f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
100039ea:	2b02      	cmp	r3, #2
100039ec:	d01f      	beq.n	10003a2e <HAL_RCCEx_PeriphCLKConfig+0xe26>
100039ee:	e03d      	b.n	10003a6c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100039f0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100039f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039f8:	681b      	ldr	r3, [r3, #0]
100039fa:	3344      	adds	r3, #68	@ 0x44
100039fc:	4618      	mov	r0, r3
100039fe:	f7fe fe41 	bl	10002684 <RCCEx_PLL3_Config>
10003a02:	4603      	mov	r3, r0
10003a04:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003a08:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a0c:	2b00      	cmp	r3, #0
10003a0e:	d003      	beq.n	10003a18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
10003a10:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a14:	f000 bf82 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003a18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a1c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003a20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003a28:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003a2c:	e01e      	b.n	10003a6c <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003a2e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a36:	681b      	ldr	r3, [r3, #0]
10003a38:	3380      	adds	r3, #128	@ 0x80
10003a3a:	4618      	mov	r0, r3
10003a3c:	f7fe ff8c 	bl	10002958 <RCCEx_PLL4_Config>
10003a40:	4603      	mov	r3, r0
10003a42:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003a46:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a4a:	2b00      	cmp	r3, #0
10003a4c:	d003      	beq.n	10003a56 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
10003a4e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a52:	f000 bf63 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003a56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a5a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003a5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a62:	f043 0310 	orr.w	r3, r3, #16
10003a66:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003a6a:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10003a6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a70:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
10003a74:	f023 0107 	bic.w	r1, r3, #7
10003a78:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a80:	681b      	ldr	r3, [r3, #0]
10003a82:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10003a86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a8a:	430b      	orrs	r3, r1
10003a8c:	f8c2 38f4 	str.w	r3, [r2, #2292]	@ 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10003a90:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a98:	681b      	ldr	r3, [r3, #0]
10003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
10003a9e:	2100      	movs	r1, #0
10003aa0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
10003aa4:	f003 0301 	and.w	r3, r3, #1
10003aa8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
10003aac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
10003ab0:	460b      	mov	r3, r1
10003ab2:	4313      	orrs	r3, r2
10003ab4:	d05b      	beq.n	10003b6e <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10003ab6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003aba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003abe:	681b      	ldr	r3, [r3, #0]
10003ac0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10003ac4:	2b01      	cmp	r3, #1
10003ac6:	d002      	beq.n	10003ace <HAL_RCCEx_PeriphCLKConfig+0xec6>
10003ac8:	2b02      	cmp	r3, #2
10003aca:	d01f      	beq.n	10003b0c <HAL_RCCEx_PeriphCLKConfig+0xf04>
10003acc:	e03d      	b.n	10003b4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003ace:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ad2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ad6:	681b      	ldr	r3, [r3, #0]
10003ad8:	3344      	adds	r3, #68	@ 0x44
10003ada:	4618      	mov	r0, r3
10003adc:	f7fe fdd2 	bl	10002684 <RCCEx_PLL3_Config>
10003ae0:	4603      	mov	r3, r0
10003ae2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003ae6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003aea:	2b00      	cmp	r3, #0
10003aec:	d003      	beq.n	10003af6 <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
10003aee:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003af2:	f000 bf13 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003af6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003afa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003afe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003b06:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003b0a:	e01e      	b.n	10003b4a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003b0c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b14:	681b      	ldr	r3, [r3, #0]
10003b16:	3380      	adds	r3, #128	@ 0x80
10003b18:	4618      	mov	r0, r3
10003b1a:	f7fe ff1d 	bl	10002958 <RCCEx_PLL4_Config>
10003b1e:	4603      	mov	r3, r0
10003b20:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003b24:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003b28:	2b00      	cmp	r3, #0
10003b2a:	d003      	beq.n	10003b34 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10003b2c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003b30:	f000 bef4 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003b34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b38:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003b3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b40:	f043 0310 	orr.w	r3, r3, #16
10003b44:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003b48:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10003b4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b4e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
10003b52:	f023 0107 	bic.w	r1, r3, #7
10003b56:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b5e:	681b      	ldr	r3, [r3, #0]
10003b60:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10003b64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b68:	430b      	orrs	r3, r1
10003b6a:	f8c2 38f8 	str.w	r3, [r2, #2296]	@ 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10003b6e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b76:	681b      	ldr	r3, [r3, #0]
10003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
10003b7c:	2100      	movs	r1, #0
10003b7e:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
10003b82:	f003 0302 	and.w	r3, r3, #2
10003b86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
10003b8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
10003b8e:	460b      	mov	r3, r1
10003b90:	4313      	orrs	r3, r2
10003b92:	d05b      	beq.n	10003c4c <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10003b94:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b9c:	681b      	ldr	r3, [r3, #0]
10003b9e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10003ba2:	2b00      	cmp	r3, #0
10003ba4:	d002      	beq.n	10003bac <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10003ba6:	2b01      	cmp	r3, #1
10003ba8:	d01f      	beq.n	10003bea <HAL_RCCEx_PeriphCLKConfig+0xfe2>
10003baa:	e03d      	b.n	10003c28 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003bac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003bb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003bb4:	681b      	ldr	r3, [r3, #0]
10003bb6:	3380      	adds	r3, #128	@ 0x80
10003bb8:	4618      	mov	r0, r3
10003bba:	f7fe fecd 	bl	10002958 <RCCEx_PLL4_Config>
10003bbe:	4603      	mov	r3, r0
10003bc0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003bc4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003bc8:	2b00      	cmp	r3, #0
10003bca:	d003      	beq.n	10003bd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
10003bcc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003bd0:	f000 bea4 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003bd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003bd8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003bdc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003be0:	f043 0310 	orr.w	r3, r3, #16
10003be4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003be8:	e01e      	b.n	10003c28 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003bea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003bee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003bf2:	681b      	ldr	r3, [r3, #0]
10003bf4:	3344      	adds	r3, #68	@ 0x44
10003bf6:	4618      	mov	r0, r3
10003bf8:	f7fe fd44 	bl	10002684 <RCCEx_PLL3_Config>
10003bfc:	4603      	mov	r3, r0
10003bfe:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003c02:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003c06:	2b00      	cmp	r3, #0
10003c08:	d003      	beq.n	10003c12 <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
10003c0a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003c0e:	f000 be85 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003c12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c16:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003c1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c1e:	f043 0320 	orr.w	r3, r3, #32
10003c22:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003c26:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10003c28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c2c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
10003c30:	f023 0103 	bic.w	r1, r3, #3
10003c34:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c3c:	681b      	ldr	r3, [r3, #0]
10003c3e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10003c42:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c46:	430b      	orrs	r3, r1
10003c48:	f8c2 38fc 	str.w	r3, [r2, #2300]	@ 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10003c4c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c54:	681b      	ldr	r3, [r3, #0]
10003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
10003c5a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
10003c5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
10003c62:	2300      	movs	r3, #0
10003c64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
10003c68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
10003c6c:	460b      	mov	r3, r1
10003c6e:	4313      	orrs	r3, r2
10003c70:	d05b      	beq.n	10003d2a <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10003c72:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c7a:	681b      	ldr	r3, [r3, #0]
10003c7c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10003c80:	2b01      	cmp	r3, #1
10003c82:	d002      	beq.n	10003c8a <HAL_RCCEx_PeriphCLKConfig+0x1082>
10003c84:	2b02      	cmp	r3, #2
10003c86:	d01f      	beq.n	10003cc8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10003c88:	e03d      	b.n	10003d06 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003c8a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c92:	681b      	ldr	r3, [r3, #0]
10003c94:	3344      	adds	r3, #68	@ 0x44
10003c96:	4618      	mov	r0, r3
10003c98:	f7fe fcf4 	bl	10002684 <RCCEx_PLL3_Config>
10003c9c:	4603      	mov	r3, r0
10003c9e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003ca2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ca6:	2b00      	cmp	r3, #0
10003ca8:	d003      	beq.n	10003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
10003caa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003cae:	f000 be35 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003cb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cb6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003cba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003cc2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003cc6:	e01e      	b.n	10003d06 <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003cc8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ccc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003cd0:	681b      	ldr	r3, [r3, #0]
10003cd2:	3380      	adds	r3, #128	@ 0x80
10003cd4:	4618      	mov	r0, r3
10003cd6:	f7fe fe3f 	bl	10002958 <RCCEx_PLL4_Config>
10003cda:	4603      	mov	r3, r0
10003cdc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003ce0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ce4:	2b00      	cmp	r3, #0
10003ce6:	d003      	beq.n	10003cf0 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
10003ce8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003cec:	f000 be16 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003cf0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cf4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003cf8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003cfc:	f043 0310 	orr.w	r3, r3, #16
10003d00:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003d04:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10003d06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d0a:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
10003d0e:	f023 0103 	bic.w	r1, r3, #3
10003d12:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d1a:	681b      	ldr	r3, [r3, #0]
10003d1c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10003d20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d24:	430b      	orrs	r3, r1
10003d26:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10003d2a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d32:	681b      	ldr	r3, [r3, #0]
10003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
10003d38:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
10003d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
10003d40:	2300      	movs	r3, #0
10003d42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
10003d46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
10003d4a:	460b      	mov	r3, r1
10003d4c:	4313      	orrs	r3, r2
10003d4e:	d05b      	beq.n	10003e08 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10003d50:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d58:	681b      	ldr	r3, [r3, #0]
10003d5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10003d5e:	2b01      	cmp	r3, #1
10003d60:	d002      	beq.n	10003d68 <HAL_RCCEx_PeriphCLKConfig+0x1160>
10003d62:	2b02      	cmp	r3, #2
10003d64:	d01f      	beq.n	10003da6 <HAL_RCCEx_PeriphCLKConfig+0x119e>
10003d66:	e03d      	b.n	10003de4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003d68:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d70:	681b      	ldr	r3, [r3, #0]
10003d72:	3344      	adds	r3, #68	@ 0x44
10003d74:	4618      	mov	r0, r3
10003d76:	f7fe fc85 	bl	10002684 <RCCEx_PLL3_Config>
10003d7a:	4603      	mov	r3, r0
10003d7c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003d80:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d84:	2b00      	cmp	r3, #0
10003d86:	d003      	beq.n	10003d90 <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10003d88:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d8c:	f000 bdc6 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003d90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d94:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003d98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003da0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003da4:	e01e      	b.n	10003de4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003da6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003daa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003dae:	681b      	ldr	r3, [r3, #0]
10003db0:	3380      	adds	r3, #128	@ 0x80
10003db2:	4618      	mov	r0, r3
10003db4:	f7fe fdd0 	bl	10002958 <RCCEx_PLL4_Config>
10003db8:	4603      	mov	r3, r0
10003dba:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003dbe:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003dc2:	2b00      	cmp	r3, #0
10003dc4:	d003      	beq.n	10003dce <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
10003dc6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003dca:	f000 bda7 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003dce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003dd2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003dd6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003dda:	f043 0310 	orr.w	r3, r3, #16
10003dde:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003de2:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10003de4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003de8:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
10003dec:	f023 0103 	bic.w	r1, r3, #3
10003df0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003df4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003df8:	681b      	ldr	r3, [r3, #0]
10003dfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10003dfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e02:	430b      	orrs	r3, r1
10003e04:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10003e08:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e10:	681b      	ldr	r3, [r3, #0]
10003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
10003e16:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
10003e1a:	67bb      	str	r3, [r7, #120]	@ 0x78
10003e1c:	2300      	movs	r3, #0
10003e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
10003e20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
10003e24:	460b      	mov	r3, r1
10003e26:	4313      	orrs	r3, r2
10003e28:	d07e      	beq.n	10003f28 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10003e2a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e32:	681b      	ldr	r3, [r3, #0]
10003e34:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10003e38:	2b03      	cmp	r3, #3
10003e3a:	d044      	beq.n	10003ec6 <HAL_RCCEx_PeriphCLKConfig+0x12be>
10003e3c:	2b03      	cmp	r3, #3
10003e3e:	d861      	bhi.n	10003f04 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10003e40:	2b01      	cmp	r3, #1
10003e42:	d002      	beq.n	10003e4a <HAL_RCCEx_PeriphCLKConfig+0x1242>
10003e44:	2b02      	cmp	r3, #2
10003e46:	d01f      	beq.n	10003e88 <HAL_RCCEx_PeriphCLKConfig+0x1280>
10003e48:	e05c      	b.n	10003f04 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003e4a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e52:	681b      	ldr	r3, [r3, #0]
10003e54:	3344      	adds	r3, #68	@ 0x44
10003e56:	4618      	mov	r0, r3
10003e58:	f7fe fc14 	bl	10002684 <RCCEx_PLL3_Config>
10003e5c:	4603      	mov	r3, r0
10003e5e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003e62:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e66:	2b00      	cmp	r3, #0
10003e68:	d003      	beq.n	10003e72 <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
10003e6a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e6e:	f000 bd55 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003e72:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e76:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003e7a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e7e:	f043 0320 	orr.w	r3, r3, #32
10003e82:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003e86:	e03d      	b.n	10003f04 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003e88:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e90:	681b      	ldr	r3, [r3, #0]
10003e92:	3380      	adds	r3, #128	@ 0x80
10003e94:	4618      	mov	r0, r3
10003e96:	f7fe fd5f 	bl	10002958 <RCCEx_PLL4_Config>
10003e9a:	4603      	mov	r3, r0
10003e9c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003ea0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ea4:	2b00      	cmp	r3, #0
10003ea6:	d003      	beq.n	10003eb0 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10003ea8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003eac:	f000 bd36 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003eb0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003eb4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003eb8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ebc:	f043 0320 	orr.w	r3, r3, #32
10003ec0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003ec4:	e01e      	b.n	10003f04 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003ec6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003eca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ece:	681b      	ldr	r3, [r3, #0]
10003ed0:	3380      	adds	r3, #128	@ 0x80
10003ed2:	4618      	mov	r0, r3
10003ed4:	f7fe fd40 	bl	10002958 <RCCEx_PLL4_Config>
10003ed8:	4603      	mov	r3, r0
10003eda:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003ede:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ee2:	2b00      	cmp	r3, #0
10003ee4:	d003      	beq.n	10003eee <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
10003ee6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003eea:	f000 bd17 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003eee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ef2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003ef6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003efe:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003f02:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10003f04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f08:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
10003f0c:	f023 0103 	bic.w	r1, r3, #3
10003f10:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f18:	681b      	ldr	r3, [r3, #0]
10003f1a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10003f1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f22:	430b      	orrs	r3, r1
10003f24:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10003f28:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f30:	681b      	ldr	r3, [r3, #0]
10003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
10003f36:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
10003f3a:	673b      	str	r3, [r7, #112]	@ 0x70
10003f3c:	2300      	movs	r3, #0
10003f3e:	677b      	str	r3, [r7, #116]	@ 0x74
10003f40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
10003f44:	460b      	mov	r3, r1
10003f46:	4313      	orrs	r3, r2
10003f48:	d05b      	beq.n	10004002 <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10003f4a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f52:	681b      	ldr	r3, [r3, #0]
10003f54:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10003f58:	2b00      	cmp	r3, #0
10003f5a:	d002      	beq.n	10003f62 <HAL_RCCEx_PeriphCLKConfig+0x135a>
10003f5c:	2b01      	cmp	r3, #1
10003f5e:	d01f      	beq.n	10003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1398>
10003f60:	e03d      	b.n	10003fde <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003f62:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f6a:	681b      	ldr	r3, [r3, #0]
10003f6c:	3380      	adds	r3, #128	@ 0x80
10003f6e:	4618      	mov	r0, r3
10003f70:	f7fe fcf2 	bl	10002958 <RCCEx_PLL4_Config>
10003f74:	4603      	mov	r3, r0
10003f76:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003f7a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f7e:	2b00      	cmp	r3, #0
10003f80:	d003      	beq.n	10003f8a <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
10003f82:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f86:	f000 bcc9 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003f8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f8e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003f92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f96:	f043 0310 	orr.w	r3, r3, #16
10003f9a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003f9e:	e01e      	b.n	10003fde <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003fa0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003fa4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003fa8:	681b      	ldr	r3, [r3, #0]
10003faa:	3344      	adds	r3, #68	@ 0x44
10003fac:	4618      	mov	r0, r3
10003fae:	f7fe fb69 	bl	10002684 <RCCEx_PLL3_Config>
10003fb2:	4603      	mov	r3, r0
10003fb4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003fb8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003fbc:	2b00      	cmp	r3, #0
10003fbe:	d003      	beq.n	10003fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10003fc0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003fc4:	f000 bcaa 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003fc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003fcc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003fd0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003fd4:	f043 0320 	orr.w	r3, r3, #32
10003fd8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003fdc:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10003fde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003fe2:	f8d3 3914 	ldr.w	r3, [r3, #2324]	@ 0x914
10003fe6:	f023 0103 	bic.w	r1, r3, #3
10003fea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003fee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ff2:	681b      	ldr	r3, [r3, #0]
10003ff4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10003ff8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ffc:	430b      	orrs	r3, r1
10003ffe:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10004002:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004006:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000400a:	681b      	ldr	r3, [r3, #0]
1000400c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004010:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
10004014:	66bb      	str	r3, [r7, #104]	@ 0x68
10004016:	2300      	movs	r3, #0
10004018:	66fb      	str	r3, [r7, #108]	@ 0x6c
1000401a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
1000401e:	460b      	mov	r3, r1
10004020:	4313      	orrs	r3, r2
10004022:	d011      	beq.n	10004048 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10004024:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004028:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
1000402c:	f023 0103 	bic.w	r1, r3, #3
10004030:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004034:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004038:	681b      	ldr	r3, [r3, #0]
1000403a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
1000403e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004042:	430b      	orrs	r3, r1
10004044:	f8c2 3918 	str.w	r3, [r2, #2328]	@ 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10004048:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000404c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004050:	681b      	ldr	r3, [r3, #0]
10004052:	e9d3 2300 	ldrd	r2, r3, [r3]
10004056:	f402 7300 	and.w	r3, r2, #512	@ 0x200
1000405a:	663b      	str	r3, [r7, #96]	@ 0x60
1000405c:	2300      	movs	r3, #0
1000405e:	667b      	str	r3, [r7, #100]	@ 0x64
10004060:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
10004064:	460b      	mov	r3, r1
10004066:	4313      	orrs	r3, r2
10004068:	d038      	beq.n	100040dc <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
1000406a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000406e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004072:	681b      	ldr	r3, [r3, #0]
10004074:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10004078:	2b01      	cmp	r3, #1
1000407a:	d11d      	bne.n	100040b8 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000407c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004080:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004084:	681b      	ldr	r3, [r3, #0]
10004086:	3380      	adds	r3, #128	@ 0x80
10004088:	4618      	mov	r0, r3
1000408a:	f7fe fc65 	bl	10002958 <RCCEx_PLL4_Config>
1000408e:	4603      	mov	r3, r0
10004090:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004094:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004098:	2b00      	cmp	r3, #0
1000409a:	d003      	beq.n	100040a4 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
1000409c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100040a0:	f000 bc3c 	b.w	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100040a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040a8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100040ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100040b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100040b4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
100040b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040bc:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
100040c0:	f023 0103 	bic.w	r1, r3, #3
100040c4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100040c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040cc:	681b      	ldr	r3, [r3, #0]
100040ce:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
100040d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100040d6:	430b      	orrs	r3, r1
100040d8:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
100040dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100040e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040e4:	681b      	ldr	r3, [r3, #0]
100040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
100040ea:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
100040ee:	65bb      	str	r3, [r7, #88]	@ 0x58
100040f0:	2300      	movs	r3, #0
100040f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
100040f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
100040f8:	460b      	mov	r3, r1
100040fa:	4313      	orrs	r3, r2
100040fc:	d037      	beq.n	1000416e <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
100040fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004102:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004106:	681b      	ldr	r3, [r3, #0]
10004108:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
1000410c:	2b00      	cmp	r3, #0
1000410e:	d11c      	bne.n	1000414a <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004110:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004114:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004118:	681b      	ldr	r3, [r3, #0]
1000411a:	3380      	adds	r3, #128	@ 0x80
1000411c:	4618      	mov	r0, r3
1000411e:	f7fe fc1b 	bl	10002958 <RCCEx_PLL4_Config>
10004122:	4603      	mov	r3, r0
10004124:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004128:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000412c:	2b00      	cmp	r3, #0
1000412e:	d002      	beq.n	10004136 <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10004130:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004134:	e3f2      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004136:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000413a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000413e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004146:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
1000414a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000414e:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10004152:	f023 0110 	bic.w	r1, r3, #16
10004156:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000415a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000415e:	681b      	ldr	r3, [r3, #0]
10004160:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
10004164:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004168:	430b      	orrs	r3, r1
1000416a:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
1000416e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004172:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004176:	681b      	ldr	r3, [r3, #0]
10004178:	e9d3 2300 	ldrd	r2, r3, [r3]
1000417c:	2100      	movs	r1, #0
1000417e:	6539      	str	r1, [r7, #80]	@ 0x50
10004180:	f003 0304 	and.w	r3, r3, #4
10004184:	657b      	str	r3, [r7, #84]	@ 0x54
10004186:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
1000418a:	460b      	mov	r3, r1
1000418c:	4313      	orrs	r3, r2
1000418e:	d037      	beq.n	10004200 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10004190:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004194:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004198:	681b      	ldr	r3, [r3, #0]
1000419a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
1000419e:	2b01      	cmp	r3, #1
100041a0:	d11c      	bne.n	100041dc <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100041a2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100041a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041aa:	681b      	ldr	r3, [r3, #0]
100041ac:	3380      	adds	r3, #128	@ 0x80
100041ae:	4618      	mov	r0, r3
100041b0:	f7fe fbd2 	bl	10002958 <RCCEx_PLL4_Config>
100041b4:	4603      	mov	r3, r0
100041b6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100041ba:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100041be:	2b00      	cmp	r3, #0
100041c0:	d002      	beq.n	100041c8 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
100041c2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100041c6:	e3a9      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100041c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041cc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100041d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100041d8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
100041dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
100041e4:	f023 0103 	bic.w	r1, r3, #3
100041e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100041ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041f0:	681b      	ldr	r3, [r3, #0]
100041f2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
100041f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041fa:	430b      	orrs	r3, r1
100041fc:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10004200:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004204:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004208:	681b      	ldr	r3, [r3, #0]
1000420a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000420e:	2100      	movs	r1, #0
10004210:	64b9      	str	r1, [r7, #72]	@ 0x48
10004212:	f003 0308 	and.w	r3, r3, #8
10004216:	64fb      	str	r3, [r7, #76]	@ 0x4c
10004218:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
1000421c:	460b      	mov	r3, r1
1000421e:	4313      	orrs	r3, r2
10004220:	d037      	beq.n	10004292 <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10004222:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004226:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000422a:	681b      	ldr	r3, [r3, #0]
1000422c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10004230:	2b01      	cmp	r3, #1
10004232:	d11c      	bne.n	1000426e <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004234:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004238:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000423c:	681b      	ldr	r3, [r3, #0]
1000423e:	3380      	adds	r3, #128	@ 0x80
10004240:	4618      	mov	r0, r3
10004242:	f7fe fb89 	bl	10002958 <RCCEx_PLL4_Config>
10004246:	4603      	mov	r3, r0
10004248:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000424c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004250:	2b00      	cmp	r3, #0
10004252:	d002      	beq.n	1000425a <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
10004254:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004258:	e360      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000425a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000425e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004262:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000426a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
1000426e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004272:	f8d3 3920 	ldr.w	r3, [r3, #2336]	@ 0x920
10004276:	f023 0103 	bic.w	r1, r3, #3
1000427a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000427e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004282:	681b      	ldr	r3, [r3, #0]
10004284:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10004288:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000428c:	430b      	orrs	r3, r1
1000428e:	f8c2 3920 	str.w	r3, [r2, #2336]	@ 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
10004292:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004296:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000429a:	681b      	ldr	r3, [r3, #0]
1000429c:	e9d3 2300 	ldrd	r2, r3, [r3]
100042a0:	2100      	movs	r1, #0
100042a2:	6439      	str	r1, [r7, #64]	@ 0x40
100042a4:	f003 0310 	and.w	r3, r3, #16
100042a8:	647b      	str	r3, [r7, #68]	@ 0x44
100042aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
100042ae:	460b      	mov	r3, r1
100042b0:	4313      	orrs	r3, r2
100042b2:	d011      	beq.n	100042d8 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
100042b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100042b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
100042bc:	f023 0103 	bic.w	r1, r3, #3
100042c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042c8:	681b      	ldr	r3, [r3, #0]
100042ca:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
100042ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100042d2:	430b      	orrs	r3, r1
100042d4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
100042d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042e0:	681b      	ldr	r3, [r3, #0]
100042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
100042e6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
100042ea:	63bb      	str	r3, [r7, #56]	@ 0x38
100042ec:	2300      	movs	r3, #0
100042ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
100042f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
100042f4:	460b      	mov	r3, r1
100042f6:	4313      	orrs	r3, r2
100042f8:	d037      	beq.n	1000436a <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
100042fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004302:	681b      	ldr	r3, [r3, #0]
10004304:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
10004308:	2b01      	cmp	r3, #1
1000430a:	d11c      	bne.n	10004346 <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000430c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004310:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004314:	681b      	ldr	r3, [r3, #0]
10004316:	3380      	adds	r3, #128	@ 0x80
10004318:	4618      	mov	r0, r3
1000431a:	f7fe fb1d 	bl	10002958 <RCCEx_PLL4_Config>
1000431e:	4603      	mov	r3, r0
10004320:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004324:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004328:	2b00      	cmp	r3, #0
1000432a:	d002      	beq.n	10004332 <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
1000432c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004330:	e2f4      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004332:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004336:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000433a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000433e:	f043 0310 	orr.w	r3, r3, #16
10004342:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
10004346:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000434a:	f8d3 3924 	ldr.w	r3, [r3, #2340]	@ 0x924
1000434e:	f023 0101 	bic.w	r1, r3, #1
10004352:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004356:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000435a:	681b      	ldr	r3, [r3, #0]
1000435c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
10004360:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004364:	430b      	orrs	r3, r1
10004366:	f8c2 3924 	str.w	r3, [r2, #2340]	@ 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
1000436a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000436e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004372:	681b      	ldr	r3, [r3, #0]
10004374:	e9d3 2300 	ldrd	r2, r3, [r3]
10004378:	f002 0308 	and.w	r3, r2, #8
1000437c:	633b      	str	r3, [r7, #48]	@ 0x30
1000437e:	2300      	movs	r3, #0
10004380:	637b      	str	r3, [r7, #52]	@ 0x34
10004382:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
10004386:	460b      	mov	r3, r1
10004388:	4313      	orrs	r3, r2
1000438a:	d059      	beq.n	10004440 <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
1000438c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004390:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004394:	681b      	ldr	r3, [r3, #0]
10004396:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000439a:	2b00      	cmp	r3, #0
1000439c:	d002      	beq.n	100043a4 <HAL_RCCEx_PeriphCLKConfig+0x179c>
1000439e:	2b02      	cmp	r3, #2
100043a0:	d01e      	beq.n	100043e0 <HAL_RCCEx_PeriphCLKConfig+0x17d8>
100043a2:	e03b      	b.n	1000441c <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100043a4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043ac:	681b      	ldr	r3, [r3, #0]
100043ae:	3380      	adds	r3, #128	@ 0x80
100043b0:	4618      	mov	r0, r3
100043b2:	f7fe fad1 	bl	10002958 <RCCEx_PLL4_Config>
100043b6:	4603      	mov	r3, r0
100043b8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100043bc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043c0:	2b00      	cmp	r3, #0
100043c2:	d002      	beq.n	100043ca <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
100043c4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043c8:	e2a8      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100043ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043ce:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100043d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100043d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100043da:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
        break;
100043de:	e01d      	b.n	1000441c <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100043e0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043e8:	681b      	ldr	r3, [r3, #0]
100043ea:	3344      	adds	r3, #68	@ 0x44
100043ec:	4618      	mov	r0, r3
100043ee:	f7fe f949 	bl	10002684 <RCCEx_PLL3_Config>
100043f2:	4603      	mov	r3, r0
100043f4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100043f8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043fc:	2b00      	cmp	r3, #0
100043fe:	d002      	beq.n	10004406 <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
10004400:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004404:	e28a      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004406:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000440a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000440e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004412:	f043 0320 	orr.w	r3, r3, #32
10004416:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000441a:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
1000441c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004420:	f8d3 3928 	ldr.w	r3, [r3, #2344]	@ 0x928
10004424:	f023 0103 	bic.w	r1, r3, #3
10004428:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000442c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004430:	681b      	ldr	r3, [r3, #0]
10004432:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10004436:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000443a:	430b      	orrs	r3, r1
1000443c:	f8c2 3928 	str.w	r3, [r2, #2344]	@ 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10004440:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004444:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004448:	681b      	ldr	r3, [r3, #0]
1000444a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000444e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
10004452:	62bb      	str	r3, [r7, #40]	@ 0x28
10004454:	2300      	movs	r3, #0
10004456:	62fb      	str	r3, [r7, #44]	@ 0x2c
10004458:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
1000445c:	460b      	mov	r3, r1
1000445e:	4313      	orrs	r3, r2
10004460:	d058      	beq.n	10004514 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
10004462:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004466:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000446a:	681b      	ldr	r3, [r3, #0]
1000446c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004470:	2b01      	cmp	r3, #1
10004472:	d01f      	beq.n	100044b4 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10004474:	2b02      	cmp	r3, #2
10004476:	d13b      	bne.n	100044f0 <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004478:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000447c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004480:	681b      	ldr	r3, [r3, #0]
10004482:	3344      	adds	r3, #68	@ 0x44
10004484:	4618      	mov	r0, r3
10004486:	f7fe f8fd 	bl	10002684 <RCCEx_PLL3_Config>
1000448a:	4603      	mov	r3, r0
1000448c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004490:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004494:	2b00      	cmp	r3, #0
10004496:	d002      	beq.n	1000449e <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10004498:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000449c:	e23e      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000449e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044a2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100044a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100044aa:	f043 0320 	orr.w	r3, r3, #32
100044ae:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100044b2:	e01d      	b.n	100044f0 <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100044b4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044bc:	681b      	ldr	r3, [r3, #0]
100044be:	3380      	adds	r3, #128	@ 0x80
100044c0:	4618      	mov	r0, r3
100044c2:	f7fe fa49 	bl	10002958 <RCCEx_PLL4_Config>
100044c6:	4603      	mov	r3, r0
100044c8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100044cc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100044d0:	2b00      	cmp	r3, #0
100044d2:	d002      	beq.n	100044da <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
100044d4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100044d8:	e220      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100044da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044de:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100044e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100044e6:	f043 0310 	orr.w	r3, r3, #16
100044ea:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100044ee:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
100044f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044f4:	f8d3 392c 	ldr.w	r3, [r3, #2348]	@ 0x92c
100044f8:	f023 0207 	bic.w	r2, r3, #7
100044fc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004500:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004504:	681b      	ldr	r3, [r3, #0]
10004506:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000450a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000450e:	4313      	orrs	r3, r2
10004510:	f8c1 392c 	str.w	r3, [r1, #2348]	@ 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10004514:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004518:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000451c:	681b      	ldr	r3, [r3, #0]
1000451e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004522:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
10004526:	623b      	str	r3, [r7, #32]
10004528:	2300      	movs	r3, #0
1000452a:	627b      	str	r3, [r7, #36]	@ 0x24
1000452c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
10004530:	460b      	mov	r3, r1
10004532:	4313      	orrs	r3, r2
10004534:	d037      	beq.n	100045a6 <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
10004536:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000453a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000453e:	681b      	ldr	r3, [r3, #0]
10004540:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10004544:	2b01      	cmp	r3, #1
10004546:	d11c      	bne.n	10004582 <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004548:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000454c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004550:	681b      	ldr	r3, [r3, #0]
10004552:	3380      	adds	r3, #128	@ 0x80
10004554:	4618      	mov	r0, r3
10004556:	f7fe f9ff 	bl	10002958 <RCCEx_PLL4_Config>
1000455a:	4603      	mov	r3, r0
1000455c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004560:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004564:	2b00      	cmp	r3, #0
10004566:	d002      	beq.n	1000456e <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
10004568:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000456c:	e1d6      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000456e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004572:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004576:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000457a:	f043 0320 	orr.w	r3, r3, #32
1000457e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
10004582:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004586:	f8d3 3930 	ldr.w	r3, [r3, #2352]	@ 0x930
1000458a:	f023 0207 	bic.w	r2, r3, #7
1000458e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004592:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004596:	681b      	ldr	r3, [r3, #0]
10004598:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
1000459c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100045a0:	4313      	orrs	r3, r2
100045a2:	f8c1 3930 	str.w	r3, [r1, #2352]	@ 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
100045a6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045ae:	681b      	ldr	r3, [r3, #0]
100045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
100045b4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
100045b8:	61bb      	str	r3, [r7, #24]
100045ba:	2300      	movs	r3, #0
100045bc:	61fb      	str	r3, [r7, #28]
100045be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
100045c2:	460b      	mov	r3, r1
100045c4:	4313      	orrs	r3, r2
100045c6:	d058      	beq.n	1000467a <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
100045c8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045d0:	681b      	ldr	r3, [r3, #0]
100045d2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
100045d6:	2b01      	cmp	r3, #1
100045d8:	d01f      	beq.n	1000461a <HAL_RCCEx_PeriphCLKConfig+0x1a12>
100045da:	2b02      	cmp	r3, #2
100045dc:	d13b      	bne.n	10004656 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100045de:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045e6:	681b      	ldr	r3, [r3, #0]
100045e8:	3344      	adds	r3, #68	@ 0x44
100045ea:	4618      	mov	r0, r3
100045ec:	f7fe f84a 	bl	10002684 <RCCEx_PLL3_Config>
100045f0:	4603      	mov	r3, r0
100045f2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100045f6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100045fa:	2b00      	cmp	r3, #0
100045fc:	d002      	beq.n	10004604 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
100045fe:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004602:	e18b      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004604:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004608:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000460c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004610:	f043 0320 	orr.w	r3, r3, #32
10004614:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004618:	e01d      	b.n	10004656 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000461a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000461e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004622:	681b      	ldr	r3, [r3, #0]
10004624:	3380      	adds	r3, #128	@ 0x80
10004626:	4618      	mov	r0, r3
10004628:	f7fe f996 	bl	10002958 <RCCEx_PLL4_Config>
1000462c:	4603      	mov	r3, r0
1000462e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004632:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004636:	2b00      	cmp	r3, #0
10004638:	d002      	beq.n	10004640 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
1000463a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000463e:	e16d      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004640:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004644:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004648:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000464c:	f043 0310 	orr.w	r3, r3, #16
10004650:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004654:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10004656:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000465a:	f8d3 3934 	ldr.w	r3, [r3, #2356]	@ 0x934
1000465e:	f023 0207 	bic.w	r2, r3, #7
10004662:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004666:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000466a:	681b      	ldr	r3, [r3, #0]
1000466c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
10004670:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004674:	4313      	orrs	r3, r2
10004676:	f8c1 3934 	str.w	r3, [r1, #2356]	@ 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
1000467a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000467e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004682:	681b      	ldr	r3, [r3, #0]
10004684:	e9d3 2300 	ldrd	r2, r3, [r3]
10004688:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
1000468c:	613b      	str	r3, [r7, #16]
1000468e:	2300      	movs	r3, #0
10004690:	617b      	str	r3, [r7, #20]
10004692:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
10004696:	460b      	mov	r3, r1
10004698:	4313      	orrs	r3, r2
1000469a:	f000 80c6 	beq.w	1000482a <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000469e:	4ba2      	ldr	r3, [pc, #648]	@ (10004928 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100046a0:	681b      	ldr	r3, [r3, #0]
100046a2:	4aa1      	ldr	r2, [pc, #644]	@ (10004928 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100046a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
100046a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100046aa:	f7fc f94d 	bl	10000948 <HAL_GetTick>
100046ae:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100046b2:	e00a      	b.n	100046ca <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100046b4:	f7fc f948 	bl	10000948 <HAL_GetTick>
100046b8:	4602      	mov	r2, r0
100046ba:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
100046be:	1ad3      	subs	r3, r2, r3
100046c0:	2b64      	cmp	r3, #100	@ 0x64
100046c2:	d902      	bls.n	100046ca <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
100046c4:	2303      	movs	r3, #3
100046c6:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100046ca:	4b97      	ldr	r3, [pc, #604]	@ (10004928 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100046cc:	681b      	ldr	r3, [r3, #0]
100046ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100046d2:	2b00      	cmp	r3, #0
100046d4:	d0ee      	beq.n	100046b4 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
100046d6:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
100046da:	2b00      	cmp	r3, #0
100046dc:	f040 80a2 	bne.w	10004824 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
100046e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046e4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
100046e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046f0:	681b      	ldr	r3, [r3, #0]
100046f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
100046f6:	4053      	eors	r3, r2
100046f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
100046fc:	2b00      	cmp	r3, #0
100046fe:	f000 8086 	beq.w	1000480e <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
10004702:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004706:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000470a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
1000470e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
10004712:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004716:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000471a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000471e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10004722:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
10004726:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000472a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000472e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004732:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
10004736:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
1000473a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000473e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004742:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
10004746:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
1000474a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
1000474e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004752:	4313      	orrs	r3, r2
10004754:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10004758:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000475c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004760:	2204      	movs	r2, #4
10004762:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10004764:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
10004768:	f003 020b 	and.w	r2, r3, #11
1000476c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004770:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004774:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10004776:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000477a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000477e:	2200      	movs	r2, #0
10004780:	625a      	str	r2, [r3, #36]	@ 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
10004782:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004786:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000478a:	2200      	movs	r2, #0
1000478c:	661a      	str	r2, [r3, #96]	@ 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
1000478e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004792:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004796:	2200      	movs	r2, #0
10004798:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
1000479c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100047a0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
100047a4:	2200      	movs	r2, #0
100047a6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
100047aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
100047ae:	4618      	mov	r0, r3
100047b0:	f7fc fc0e 	bl	10000fd0 <HAL_RCC_OscConfig>
100047b4:	4603      	mov	r3, r0
100047b6:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
        if (ret != HAL_OK)
100047ba:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
100047be:	2b00      	cmp	r3, #0
100047c0:	d002      	beq.n	100047c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
100047c2:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
100047c6:	e0a9      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
100047c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100047d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
100047d4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100047d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100047dc:	681b      	ldr	r3, [r3, #0]
100047de:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
100047e2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100047e6:	4313      	orrs	r3, r2
100047e8:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
100047ec:	4b4f      	ldr	r3, [pc, #316]	@ (1000492c <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
100047ee:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
100047f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047f6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
100047fa:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
100047fe:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
10004802:	400b      	ands	r3, r1
10004804:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004808:	4313      	orrs	r3, r2
1000480a:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
1000480e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004812:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004816:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000481a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
1000481e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10004822:	e002      	b.n	1000482a <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10004824:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10004828:	e078      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
1000482a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000482e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004832:	681b      	ldr	r3, [r3, #0]
10004834:	e9d3 2300 	ldrd	r2, r3, [r3]
10004838:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
1000483c:	60bb      	str	r3, [r7, #8]
1000483e:	2300      	movs	r3, #0
10004840:	60fb      	str	r3, [r7, #12]
10004842:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
10004846:	460b      	mov	r3, r1
10004848:	4313      	orrs	r3, r2
1000484a:	d02a      	beq.n	100048a2 <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
1000484c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004850:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10004854:	f023 0201 	bic.w	r2, r3, #1
10004858:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000485c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004860:	681b      	ldr	r3, [r3, #0]
10004862:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
10004866:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000486a:	4313      	orrs	r3, r2
1000486c:	f8c1 3828 	str.w	r3, [r1, #2088]	@ 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004870:	f7fc f86a 	bl	10000948 <HAL_GetTick>
10004874:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10004878:	e00a      	b.n	10004890 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000487a:	f7fc f865 	bl	10000948 <HAL_GetTick>
1000487e:	4602      	mov	r2, r0
10004880:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10004884:	1ad3      	subs	r3, r2, r3
10004886:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000488a:	d901      	bls.n	10004890 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
1000488c:	2303      	movs	r3, #3
1000488e:	e045      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10004890:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004894:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10004898:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000489c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100048a0:	d1eb      	bne.n	1000487a <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
100048a2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048aa:	681b      	ldr	r3, [r3, #0]
100048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
100048b0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
100048b4:	603b      	str	r3, [r7, #0]
100048b6:	2300      	movs	r3, #0
100048b8:	607b      	str	r3, [r7, #4]
100048ba:	e9d7 1200 	ldrd	r1, r2, [r7]
100048be:	460b      	mov	r3, r1
100048c0:	4313      	orrs	r3, r2
100048c2:	d02a      	beq.n	1000491a <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
100048c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100048c8:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
100048cc:	f023 0201 	bic.w	r2, r3, #1
100048d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048d8:	681b      	ldr	r3, [r3, #0]
100048da:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
100048de:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100048e2:	4313      	orrs	r3, r2
100048e4:	f8c1 382c 	str.w	r3, [r1, #2092]	@ 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100048e8:	f7fc f82e 	bl	10000948 <HAL_GetTick>
100048ec:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
100048f0:	e00a      	b.n	10004908 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100048f2:	f7fc f829 	bl	10000948 <HAL_GetTick>
100048f6:	4602      	mov	r2, r0
100048f8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
100048fc:	1ad3      	subs	r3, r2, r3
100048fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10004902:	d901      	bls.n	10004908 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10004904:	2303      	movs	r3, #3
10004906:	e009      	b.n	1000491c <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10004908:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000490c:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10004910:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004918:	d1eb      	bne.n	100048f2 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
1000491a:	2300      	movs	r3, #0
}
1000491c:	4618      	mov	r0, r3
1000491e:	f507 7712 	add.w	r7, r7, #584	@ 0x248
10004922:	46bd      	mov	sp, r7
10004924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
10004928:	50001000 	.word	0x50001000
1000492c:	7fecfdc0 	.word	0x7fecfdc0

10004930 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
10004930:	b480      	push	{r7}
10004932:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
10004934:	bf00      	nop
10004936:	46bd      	mov	sp, r7
10004938:	f85d 7b04 	ldr.w	r7, [sp], #4
1000493c:	4770      	bx	lr
	...

10004940 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
10004940:	b480      	push	{r7}
10004942:	b085      	sub	sp, #20
10004944:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10004946:	f3ef 8305 	mrs	r3, IPSR
1000494a:	60bb      	str	r3, [r7, #8]
  return(result);
1000494c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
1000494e:	2b00      	cmp	r3, #0
10004950:	d10f      	bne.n	10004972 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10004952:	f3ef 8310 	mrs	r3, PRIMASK
10004956:	607b      	str	r3, [r7, #4]
  return(result);
10004958:	687b      	ldr	r3, [r7, #4]
1000495a:	2b00      	cmp	r3, #0
1000495c:	d105      	bne.n	1000496a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
1000495e:	f3ef 8311 	mrs	r3, BASEPRI
10004962:	603b      	str	r3, [r7, #0]
  return(result);
10004964:	683b      	ldr	r3, [r7, #0]
10004966:	2b00      	cmp	r3, #0
10004968:	d007      	beq.n	1000497a <osKernelInitialize+0x3a>
1000496a:	4b0e      	ldr	r3, [pc, #56]	@ (100049a4 <osKernelInitialize+0x64>)
1000496c:	681b      	ldr	r3, [r3, #0]
1000496e:	2b02      	cmp	r3, #2
10004970:	d103      	bne.n	1000497a <osKernelInitialize+0x3a>
    stat = osErrorISR;
10004972:	f06f 0305 	mvn.w	r3, #5
10004976:	60fb      	str	r3, [r7, #12]
10004978:	e00c      	b.n	10004994 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
1000497a:	4b0a      	ldr	r3, [pc, #40]	@ (100049a4 <osKernelInitialize+0x64>)
1000497c:	681b      	ldr	r3, [r3, #0]
1000497e:	2b00      	cmp	r3, #0
10004980:	d105      	bne.n	1000498e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
10004982:	4b08      	ldr	r3, [pc, #32]	@ (100049a4 <osKernelInitialize+0x64>)
10004984:	2201      	movs	r2, #1
10004986:	601a      	str	r2, [r3, #0]
      stat = osOK;
10004988:	2300      	movs	r3, #0
1000498a:	60fb      	str	r3, [r7, #12]
1000498c:	e002      	b.n	10004994 <osKernelInitialize+0x54>
    } else {
      stat = osError;
1000498e:	f04f 33ff 	mov.w	r3, #4294967295
10004992:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
10004994:	68fb      	ldr	r3, [r7, #12]
}
10004996:	4618      	mov	r0, r3
10004998:	3714      	adds	r7, #20
1000499a:	46bd      	mov	sp, r7
1000499c:	f85d 7b04 	ldr.w	r7, [sp], #4
100049a0:	4770      	bx	lr
100049a2:	bf00      	nop
100049a4:	10020218 	.word	0x10020218

100049a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
100049a8:	b580      	push	{r7, lr}
100049aa:	b084      	sub	sp, #16
100049ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
100049ae:	f3ef 8305 	mrs	r3, IPSR
100049b2:	60bb      	str	r3, [r7, #8]
  return(result);
100049b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
100049b6:	2b00      	cmp	r3, #0
100049b8:	d10f      	bne.n	100049da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
100049ba:	f3ef 8310 	mrs	r3, PRIMASK
100049be:	607b      	str	r3, [r7, #4]
  return(result);
100049c0:	687b      	ldr	r3, [r7, #4]
100049c2:	2b00      	cmp	r3, #0
100049c4:	d105      	bne.n	100049d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
100049c6:	f3ef 8311 	mrs	r3, BASEPRI
100049ca:	603b      	str	r3, [r7, #0]
  return(result);
100049cc:	683b      	ldr	r3, [r7, #0]
100049ce:	2b00      	cmp	r3, #0
100049d0:	d007      	beq.n	100049e2 <osKernelStart+0x3a>
100049d2:	4b0f      	ldr	r3, [pc, #60]	@ (10004a10 <osKernelStart+0x68>)
100049d4:	681b      	ldr	r3, [r3, #0]
100049d6:	2b02      	cmp	r3, #2
100049d8:	d103      	bne.n	100049e2 <osKernelStart+0x3a>
    stat = osErrorISR;
100049da:	f06f 0305 	mvn.w	r3, #5
100049de:	60fb      	str	r3, [r7, #12]
100049e0:	e010      	b.n	10004a04 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
100049e2:	4b0b      	ldr	r3, [pc, #44]	@ (10004a10 <osKernelStart+0x68>)
100049e4:	681b      	ldr	r3, [r3, #0]
100049e6:	2b01      	cmp	r3, #1
100049e8:	d109      	bne.n	100049fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
100049ea:	f7ff ffa1 	bl	10004930 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
100049ee:	4b08      	ldr	r3, [pc, #32]	@ (10004a10 <osKernelStart+0x68>)
100049f0:	2202      	movs	r2, #2
100049f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
100049f4:	f001 fe6a 	bl	100066cc <vTaskStartScheduler>
      stat = osOK;
100049f8:	2300      	movs	r3, #0
100049fa:	60fb      	str	r3, [r7, #12]
100049fc:	e002      	b.n	10004a04 <osKernelStart+0x5c>
    } else {
      stat = osError;
100049fe:	f04f 33ff 	mov.w	r3, #4294967295
10004a02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
10004a04:	68fb      	ldr	r3, [r7, #12]
}
10004a06:	4618      	mov	r0, r3
10004a08:	3710      	adds	r7, #16
10004a0a:	46bd      	mov	sp, r7
10004a0c:	bd80      	pop	{r7, pc}
10004a0e:	bf00      	nop
10004a10:	10020218 	.word	0x10020218

10004a14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
10004a14:	b580      	push	{r7, lr}
10004a16:	b090      	sub	sp, #64	@ 0x40
10004a18:	af04      	add	r7, sp, #16
10004a1a:	60f8      	str	r0, [r7, #12]
10004a1c:	60b9      	str	r1, [r7, #8]
10004a1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
10004a20:	2300      	movs	r3, #0
10004a22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10004a24:	f3ef 8305 	mrs	r3, IPSR
10004a28:	61fb      	str	r3, [r7, #28]
  return(result);
10004a2a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
10004a2c:	2b00      	cmp	r3, #0
10004a2e:	f040 808f 	bne.w	10004b50 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10004a32:	f3ef 8310 	mrs	r3, PRIMASK
10004a36:	61bb      	str	r3, [r7, #24]
  return(result);
10004a38:	69bb      	ldr	r3, [r7, #24]
10004a3a:	2b00      	cmp	r3, #0
10004a3c:	d105      	bne.n	10004a4a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
10004a3e:	f3ef 8311 	mrs	r3, BASEPRI
10004a42:	617b      	str	r3, [r7, #20]
  return(result);
10004a44:	697b      	ldr	r3, [r7, #20]
10004a46:	2b00      	cmp	r3, #0
10004a48:	d003      	beq.n	10004a52 <osThreadNew+0x3e>
10004a4a:	4b44      	ldr	r3, [pc, #272]	@ (10004b5c <osThreadNew+0x148>)
10004a4c:	681b      	ldr	r3, [r3, #0]
10004a4e:	2b02      	cmp	r3, #2
10004a50:	d07e      	beq.n	10004b50 <osThreadNew+0x13c>
10004a52:	68fb      	ldr	r3, [r7, #12]
10004a54:	2b00      	cmp	r3, #0
10004a56:	d07b      	beq.n	10004b50 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
10004a58:	2380      	movs	r3, #128	@ 0x80
10004a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
10004a5c:	2318      	movs	r3, #24
10004a5e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
10004a60:	2300      	movs	r3, #0
10004a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
10004a64:	f04f 33ff 	mov.w	r3, #4294967295
10004a68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
10004a6a:	687b      	ldr	r3, [r7, #4]
10004a6c:	2b00      	cmp	r3, #0
10004a6e:	d045      	beq.n	10004afc <osThreadNew+0xe8>
      if (attr->name != NULL) {
10004a70:	687b      	ldr	r3, [r7, #4]
10004a72:	681b      	ldr	r3, [r3, #0]
10004a74:	2b00      	cmp	r3, #0
10004a76:	d002      	beq.n	10004a7e <osThreadNew+0x6a>
        name = attr->name;
10004a78:	687b      	ldr	r3, [r7, #4]
10004a7a:	681b      	ldr	r3, [r3, #0]
10004a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
10004a7e:	687b      	ldr	r3, [r7, #4]
10004a80:	699b      	ldr	r3, [r3, #24]
10004a82:	2b00      	cmp	r3, #0
10004a84:	d002      	beq.n	10004a8c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
10004a86:	687b      	ldr	r3, [r7, #4]
10004a88:	699b      	ldr	r3, [r3, #24]
10004a8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
10004a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004a8e:	2b00      	cmp	r3, #0
10004a90:	d008      	beq.n	10004aa4 <osThreadNew+0x90>
10004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004a94:	2b38      	cmp	r3, #56	@ 0x38
10004a96:	d805      	bhi.n	10004aa4 <osThreadNew+0x90>
10004a98:	687b      	ldr	r3, [r7, #4]
10004a9a:	685b      	ldr	r3, [r3, #4]
10004a9c:	f003 0301 	and.w	r3, r3, #1
10004aa0:	2b00      	cmp	r3, #0
10004aa2:	d001      	beq.n	10004aa8 <osThreadNew+0x94>
        return (NULL);
10004aa4:	2300      	movs	r3, #0
10004aa6:	e054      	b.n	10004b52 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
10004aa8:	687b      	ldr	r3, [r7, #4]
10004aaa:	695b      	ldr	r3, [r3, #20]
10004aac:	2b00      	cmp	r3, #0
10004aae:	d003      	beq.n	10004ab8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
10004ab0:	687b      	ldr	r3, [r7, #4]
10004ab2:	695b      	ldr	r3, [r3, #20]
10004ab4:	089b      	lsrs	r3, r3, #2
10004ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
10004ab8:	687b      	ldr	r3, [r7, #4]
10004aba:	689b      	ldr	r3, [r3, #8]
10004abc:	2b00      	cmp	r3, #0
10004abe:	d00e      	beq.n	10004ade <osThreadNew+0xca>
10004ac0:	687b      	ldr	r3, [r7, #4]
10004ac2:	68db      	ldr	r3, [r3, #12]
10004ac4:	2b5b      	cmp	r3, #91	@ 0x5b
10004ac6:	d90a      	bls.n	10004ade <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
10004ac8:	687b      	ldr	r3, [r7, #4]
10004aca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
10004acc:	2b00      	cmp	r3, #0
10004ace:	d006      	beq.n	10004ade <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
10004ad0:	687b      	ldr	r3, [r7, #4]
10004ad2:	695b      	ldr	r3, [r3, #20]
10004ad4:	2b00      	cmp	r3, #0
10004ad6:	d002      	beq.n	10004ade <osThreadNew+0xca>
        mem = 1;
10004ad8:	2301      	movs	r3, #1
10004ada:	623b      	str	r3, [r7, #32]
10004adc:	e010      	b.n	10004b00 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
10004ade:	687b      	ldr	r3, [r7, #4]
10004ae0:	689b      	ldr	r3, [r3, #8]
10004ae2:	2b00      	cmp	r3, #0
10004ae4:	d10c      	bne.n	10004b00 <osThreadNew+0xec>
10004ae6:	687b      	ldr	r3, [r7, #4]
10004ae8:	68db      	ldr	r3, [r3, #12]
10004aea:	2b00      	cmp	r3, #0
10004aec:	d108      	bne.n	10004b00 <osThreadNew+0xec>
10004aee:	687b      	ldr	r3, [r7, #4]
10004af0:	691b      	ldr	r3, [r3, #16]
10004af2:	2b00      	cmp	r3, #0
10004af4:	d104      	bne.n	10004b00 <osThreadNew+0xec>
          mem = 0;
10004af6:	2300      	movs	r3, #0
10004af8:	623b      	str	r3, [r7, #32]
10004afa:	e001      	b.n	10004b00 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
10004afc:	2300      	movs	r3, #0
10004afe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
10004b00:	6a3b      	ldr	r3, [r7, #32]
10004b02:	2b01      	cmp	r3, #1
10004b04:	d110      	bne.n	10004b28 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
10004b06:	687b      	ldr	r3, [r7, #4]
10004b08:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
10004b0a:	687a      	ldr	r2, [r7, #4]
10004b0c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
10004b0e:	9202      	str	r2, [sp, #8]
10004b10:	9301      	str	r3, [sp, #4]
10004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004b14:	9300      	str	r3, [sp, #0]
10004b16:	68bb      	ldr	r3, [r7, #8]
10004b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10004b1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
10004b1c:	68f8      	ldr	r0, [r7, #12]
10004b1e:	f001 fbf9 	bl	10006314 <xTaskCreateStatic>
10004b22:	4603      	mov	r3, r0
10004b24:	613b      	str	r3, [r7, #16]
10004b26:	e013      	b.n	10004b50 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
10004b28:	6a3b      	ldr	r3, [r7, #32]
10004b2a:	2b00      	cmp	r3, #0
10004b2c:	d110      	bne.n	10004b50 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
10004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10004b30:	b29a      	uxth	r2, r3
10004b32:	f107 0310 	add.w	r3, r7, #16
10004b36:	9301      	str	r3, [sp, #4]
10004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004b3a:	9300      	str	r3, [sp, #0]
10004b3c:	68bb      	ldr	r3, [r7, #8]
10004b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
10004b40:	68f8      	ldr	r0, [r7, #12]
10004b42:	f001 fc47 	bl	100063d4 <xTaskCreate>
10004b46:	4603      	mov	r3, r0
10004b48:	2b01      	cmp	r3, #1
10004b4a:	d001      	beq.n	10004b50 <osThreadNew+0x13c>
          hTask = NULL;
10004b4c:	2300      	movs	r3, #0
10004b4e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
10004b50:	693b      	ldr	r3, [r7, #16]
}
10004b52:	4618      	mov	r0, r3
10004b54:	3730      	adds	r7, #48	@ 0x30
10004b56:	46bd      	mov	sp, r7
10004b58:	bd80      	pop	{r7, pc}
10004b5a:	bf00      	nop
10004b5c:	10020218 	.word	0x10020218

10004b60 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
10004b60:	b580      	push	{r7, lr}
10004b62:	b086      	sub	sp, #24
10004b64:	af00      	add	r7, sp, #0
10004b66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10004b68:	f3ef 8305 	mrs	r3, IPSR
10004b6c:	613b      	str	r3, [r7, #16]
  return(result);
10004b6e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
10004b70:	2b00      	cmp	r3, #0
10004b72:	d10f      	bne.n	10004b94 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10004b74:	f3ef 8310 	mrs	r3, PRIMASK
10004b78:	60fb      	str	r3, [r7, #12]
  return(result);
10004b7a:	68fb      	ldr	r3, [r7, #12]
10004b7c:	2b00      	cmp	r3, #0
10004b7e:	d105      	bne.n	10004b8c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
10004b80:	f3ef 8311 	mrs	r3, BASEPRI
10004b84:	60bb      	str	r3, [r7, #8]
  return(result);
10004b86:	68bb      	ldr	r3, [r7, #8]
10004b88:	2b00      	cmp	r3, #0
10004b8a:	d007      	beq.n	10004b9c <osDelay+0x3c>
10004b8c:	4b0a      	ldr	r3, [pc, #40]	@ (10004bb8 <osDelay+0x58>)
10004b8e:	681b      	ldr	r3, [r3, #0]
10004b90:	2b02      	cmp	r3, #2
10004b92:	d103      	bne.n	10004b9c <osDelay+0x3c>
    stat = osErrorISR;
10004b94:	f06f 0305 	mvn.w	r3, #5
10004b98:	617b      	str	r3, [r7, #20]
10004b9a:	e007      	b.n	10004bac <osDelay+0x4c>
  }
  else {
    stat = osOK;
10004b9c:	2300      	movs	r3, #0
10004b9e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
10004ba0:	687b      	ldr	r3, [r7, #4]
10004ba2:	2b00      	cmp	r3, #0
10004ba4:	d002      	beq.n	10004bac <osDelay+0x4c>
      vTaskDelay(ticks);
10004ba6:	6878      	ldr	r0, [r7, #4]
10004ba8:	f001 fd5a 	bl	10006660 <vTaskDelay>
    }
  }

  return (stat);
10004bac:	697b      	ldr	r3, [r7, #20]
}
10004bae:	4618      	mov	r0, r3
10004bb0:	3718      	adds	r7, #24
10004bb2:	46bd      	mov	sp, r7
10004bb4:	bd80      	pop	{r7, pc}
10004bb6:	bf00      	nop
10004bb8:	10020218 	.word	0x10020218

10004bbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
10004bbc:	b480      	push	{r7}
10004bbe:	b085      	sub	sp, #20
10004bc0:	af00      	add	r7, sp, #0
10004bc2:	60f8      	str	r0, [r7, #12]
10004bc4:	60b9      	str	r1, [r7, #8]
10004bc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
10004bc8:	68fb      	ldr	r3, [r7, #12]
10004bca:	4a07      	ldr	r2, [pc, #28]	@ (10004be8 <vApplicationGetIdleTaskMemory+0x2c>)
10004bcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
10004bce:	68bb      	ldr	r3, [r7, #8]
10004bd0:	4a06      	ldr	r2, [pc, #24]	@ (10004bec <vApplicationGetIdleTaskMemory+0x30>)
10004bd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
10004bd4:	687b      	ldr	r3, [r7, #4]
10004bd6:	2280      	movs	r2, #128	@ 0x80
10004bd8:	601a      	str	r2, [r3, #0]
}
10004bda:	bf00      	nop
10004bdc:	3714      	adds	r7, #20
10004bde:	46bd      	mov	sp, r7
10004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
10004be4:	4770      	bx	lr
10004be6:	bf00      	nop
10004be8:	1002021c 	.word	0x1002021c
10004bec:	10020278 	.word	0x10020278

10004bf0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
10004bf0:	b480      	push	{r7}
10004bf2:	b085      	sub	sp, #20
10004bf4:	af00      	add	r7, sp, #0
10004bf6:	60f8      	str	r0, [r7, #12]
10004bf8:	60b9      	str	r1, [r7, #8]
10004bfa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
10004bfc:	68fb      	ldr	r3, [r7, #12]
10004bfe:	4a07      	ldr	r2, [pc, #28]	@ (10004c1c <vApplicationGetTimerTaskMemory+0x2c>)
10004c00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
10004c02:	68bb      	ldr	r3, [r7, #8]
10004c04:	4a06      	ldr	r2, [pc, #24]	@ (10004c20 <vApplicationGetTimerTaskMemory+0x30>)
10004c06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
10004c08:	687b      	ldr	r3, [r7, #4]
10004c0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
10004c0e:	601a      	str	r2, [r3, #0]
}
10004c10:	bf00      	nop
10004c12:	3714      	adds	r7, #20
10004c14:	46bd      	mov	sp, r7
10004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
10004c1a:	4770      	bx	lr
10004c1c:	10020478 	.word	0x10020478
10004c20:	100204d4 	.word	0x100204d4

10004c24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
10004c24:	b580      	push	{r7, lr}
10004c26:	b08a      	sub	sp, #40	@ 0x28
10004c28:	af00      	add	r7, sp, #0
10004c2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
10004c2c:	2300      	movs	r3, #0
10004c2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
10004c30:	f001 fdb4 	bl	1000679c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
10004c34:	4b5a      	ldr	r3, [pc, #360]	@ (10004da0 <pvPortMalloc+0x17c>)
10004c36:	681b      	ldr	r3, [r3, #0]
10004c38:	2b00      	cmp	r3, #0
10004c3a:	d101      	bne.n	10004c40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
10004c3c:	f000 f916 	bl	10004e6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
10004c40:	4b58      	ldr	r3, [pc, #352]	@ (10004da4 <pvPortMalloc+0x180>)
10004c42:	681a      	ldr	r2, [r3, #0]
10004c44:	687b      	ldr	r3, [r7, #4]
10004c46:	4013      	ands	r3, r2
10004c48:	2b00      	cmp	r3, #0
10004c4a:	f040 8090 	bne.w	10004d6e <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
10004c4e:	687b      	ldr	r3, [r7, #4]
10004c50:	2b00      	cmp	r3, #0
10004c52:	d01e      	beq.n	10004c92 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
10004c54:	2208      	movs	r2, #8
10004c56:	687b      	ldr	r3, [r7, #4]
10004c58:	4413      	add	r3, r2
10004c5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
10004c5c:	687b      	ldr	r3, [r7, #4]
10004c5e:	f003 0307 	and.w	r3, r3, #7
10004c62:	2b00      	cmp	r3, #0
10004c64:	d015      	beq.n	10004c92 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
10004c66:	687b      	ldr	r3, [r7, #4]
10004c68:	f023 0307 	bic.w	r3, r3, #7
10004c6c:	3308      	adds	r3, #8
10004c6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
10004c70:	687b      	ldr	r3, [r7, #4]
10004c72:	f003 0307 	and.w	r3, r3, #7
10004c76:	2b00      	cmp	r3, #0
10004c78:	d00b      	beq.n	10004c92 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
10004c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
10004c7e:	f383 8811 	msr	BASEPRI, r3
10004c82:	f3bf 8f6f 	isb	sy
10004c86:	f3bf 8f4f 	dsb	sy
10004c8a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
10004c8c:	bf00      	nop
10004c8e:	bf00      	nop
10004c90:	e7fd      	b.n	10004c8e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
10004c92:	687b      	ldr	r3, [r7, #4]
10004c94:	2b00      	cmp	r3, #0
10004c96:	d06a      	beq.n	10004d6e <pvPortMalloc+0x14a>
10004c98:	4b43      	ldr	r3, [pc, #268]	@ (10004da8 <pvPortMalloc+0x184>)
10004c9a:	681b      	ldr	r3, [r3, #0]
10004c9c:	687a      	ldr	r2, [r7, #4]
10004c9e:	429a      	cmp	r2, r3
10004ca0:	d865      	bhi.n	10004d6e <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
10004ca2:	4b42      	ldr	r3, [pc, #264]	@ (10004dac <pvPortMalloc+0x188>)
10004ca4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
10004ca6:	4b41      	ldr	r3, [pc, #260]	@ (10004dac <pvPortMalloc+0x188>)
10004ca8:	681b      	ldr	r3, [r3, #0]
10004caa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
10004cac:	e004      	b.n	10004cb8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
10004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004cb0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
10004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004cb4:	681b      	ldr	r3, [r3, #0]
10004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
10004cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004cba:	685b      	ldr	r3, [r3, #4]
10004cbc:	687a      	ldr	r2, [r7, #4]
10004cbe:	429a      	cmp	r2, r3
10004cc0:	d903      	bls.n	10004cca <pvPortMalloc+0xa6>
10004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004cc4:	681b      	ldr	r3, [r3, #0]
10004cc6:	2b00      	cmp	r3, #0
10004cc8:	d1f1      	bne.n	10004cae <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
10004cca:	4b35      	ldr	r3, [pc, #212]	@ (10004da0 <pvPortMalloc+0x17c>)
10004ccc:	681b      	ldr	r3, [r3, #0]
10004cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10004cd0:	429a      	cmp	r2, r3
10004cd2:	d04c      	beq.n	10004d6e <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
10004cd4:	6a3b      	ldr	r3, [r7, #32]
10004cd6:	681b      	ldr	r3, [r3, #0]
10004cd8:	2208      	movs	r2, #8
10004cda:	4413      	add	r3, r2
10004cdc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
10004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004ce0:	681a      	ldr	r2, [r3, #0]
10004ce2:	6a3b      	ldr	r3, [r7, #32]
10004ce4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
10004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004ce8:	685a      	ldr	r2, [r3, #4]
10004cea:	687b      	ldr	r3, [r7, #4]
10004cec:	1ad2      	subs	r2, r2, r3
10004cee:	2308      	movs	r3, #8
10004cf0:	005b      	lsls	r3, r3, #1
10004cf2:	429a      	cmp	r2, r3
10004cf4:	d920      	bls.n	10004d38 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
10004cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10004cf8:	687b      	ldr	r3, [r7, #4]
10004cfa:	4413      	add	r3, r2
10004cfc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
10004cfe:	69bb      	ldr	r3, [r7, #24]
10004d00:	f003 0307 	and.w	r3, r3, #7
10004d04:	2b00      	cmp	r3, #0
10004d06:	d00b      	beq.n	10004d20 <pvPortMalloc+0xfc>
	__asm volatile
10004d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
10004d0c:	f383 8811 	msr	BASEPRI, r3
10004d10:	f3bf 8f6f 	isb	sy
10004d14:	f3bf 8f4f 	dsb	sy
10004d18:	613b      	str	r3, [r7, #16]
}
10004d1a:	bf00      	nop
10004d1c:	bf00      	nop
10004d1e:	e7fd      	b.n	10004d1c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
10004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004d22:	685a      	ldr	r2, [r3, #4]
10004d24:	687b      	ldr	r3, [r7, #4]
10004d26:	1ad2      	subs	r2, r2, r3
10004d28:	69bb      	ldr	r3, [r7, #24]
10004d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
10004d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004d2e:	687a      	ldr	r2, [r7, #4]
10004d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
10004d32:	69b8      	ldr	r0, [r7, #24]
10004d34:	f000 f8fc 	bl	10004f30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
10004d38:	4b1b      	ldr	r3, [pc, #108]	@ (10004da8 <pvPortMalloc+0x184>)
10004d3a:	681a      	ldr	r2, [r3, #0]
10004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004d3e:	685b      	ldr	r3, [r3, #4]
10004d40:	1ad3      	subs	r3, r2, r3
10004d42:	4a19      	ldr	r2, [pc, #100]	@ (10004da8 <pvPortMalloc+0x184>)
10004d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
10004d46:	4b18      	ldr	r3, [pc, #96]	@ (10004da8 <pvPortMalloc+0x184>)
10004d48:	681a      	ldr	r2, [r3, #0]
10004d4a:	4b19      	ldr	r3, [pc, #100]	@ (10004db0 <pvPortMalloc+0x18c>)
10004d4c:	681b      	ldr	r3, [r3, #0]
10004d4e:	429a      	cmp	r2, r3
10004d50:	d203      	bcs.n	10004d5a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
10004d52:	4b15      	ldr	r3, [pc, #84]	@ (10004da8 <pvPortMalloc+0x184>)
10004d54:	681b      	ldr	r3, [r3, #0]
10004d56:	4a16      	ldr	r2, [pc, #88]	@ (10004db0 <pvPortMalloc+0x18c>)
10004d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
10004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004d5c:	685a      	ldr	r2, [r3, #4]
10004d5e:	4b11      	ldr	r3, [pc, #68]	@ (10004da4 <pvPortMalloc+0x180>)
10004d60:	681b      	ldr	r3, [r3, #0]
10004d62:	431a      	orrs	r2, r3
10004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
10004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004d6a:	2200      	movs	r2, #0
10004d6c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
10004d6e:	f001 fd23 	bl	100067b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
10004d72:	69fb      	ldr	r3, [r7, #28]
10004d74:	f003 0307 	and.w	r3, r3, #7
10004d78:	2b00      	cmp	r3, #0
10004d7a:	d00b      	beq.n	10004d94 <pvPortMalloc+0x170>
	__asm volatile
10004d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
10004d80:	f383 8811 	msr	BASEPRI, r3
10004d84:	f3bf 8f6f 	isb	sy
10004d88:	f3bf 8f4f 	dsb	sy
10004d8c:	60fb      	str	r3, [r7, #12]
}
10004d8e:	bf00      	nop
10004d90:	bf00      	nop
10004d92:	e7fd      	b.n	10004d90 <pvPortMalloc+0x16c>
	return pvReturn;
10004d94:	69fb      	ldr	r3, [r7, #28]
}
10004d96:	4618      	mov	r0, r3
10004d98:	3728      	adds	r7, #40	@ 0x28
10004d9a:	46bd      	mov	sp, r7
10004d9c:	bd80      	pop	{r7, pc}
10004d9e:	bf00      	nop
10004da0:	100214dc 	.word	0x100214dc
10004da4:	100214e8 	.word	0x100214e8
10004da8:	100214e0 	.word	0x100214e0
10004dac:	100214d4 	.word	0x100214d4
10004db0:	100214e4 	.word	0x100214e4

10004db4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
10004db4:	b580      	push	{r7, lr}
10004db6:	b086      	sub	sp, #24
10004db8:	af00      	add	r7, sp, #0
10004dba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
10004dbc:	687b      	ldr	r3, [r7, #4]
10004dbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
10004dc0:	687b      	ldr	r3, [r7, #4]
10004dc2:	2b00      	cmp	r3, #0
10004dc4:	d04a      	beq.n	10004e5c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
10004dc6:	2308      	movs	r3, #8
10004dc8:	425b      	negs	r3, r3
10004dca:	697a      	ldr	r2, [r7, #20]
10004dcc:	4413      	add	r3, r2
10004dce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
10004dd0:	697b      	ldr	r3, [r7, #20]
10004dd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
10004dd4:	693b      	ldr	r3, [r7, #16]
10004dd6:	685a      	ldr	r2, [r3, #4]
10004dd8:	4b22      	ldr	r3, [pc, #136]	@ (10004e64 <vPortFree+0xb0>)
10004dda:	681b      	ldr	r3, [r3, #0]
10004ddc:	4013      	ands	r3, r2
10004dde:	2b00      	cmp	r3, #0
10004de0:	d10b      	bne.n	10004dfa <vPortFree+0x46>
	__asm volatile
10004de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
10004de6:	f383 8811 	msr	BASEPRI, r3
10004dea:	f3bf 8f6f 	isb	sy
10004dee:	f3bf 8f4f 	dsb	sy
10004df2:	60fb      	str	r3, [r7, #12]
}
10004df4:	bf00      	nop
10004df6:	bf00      	nop
10004df8:	e7fd      	b.n	10004df6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
10004dfa:	693b      	ldr	r3, [r7, #16]
10004dfc:	681b      	ldr	r3, [r3, #0]
10004dfe:	2b00      	cmp	r3, #0
10004e00:	d00b      	beq.n	10004e1a <vPortFree+0x66>
	__asm volatile
10004e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
10004e06:	f383 8811 	msr	BASEPRI, r3
10004e0a:	f3bf 8f6f 	isb	sy
10004e0e:	f3bf 8f4f 	dsb	sy
10004e12:	60bb      	str	r3, [r7, #8]
}
10004e14:	bf00      	nop
10004e16:	bf00      	nop
10004e18:	e7fd      	b.n	10004e16 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
10004e1a:	693b      	ldr	r3, [r7, #16]
10004e1c:	685a      	ldr	r2, [r3, #4]
10004e1e:	4b11      	ldr	r3, [pc, #68]	@ (10004e64 <vPortFree+0xb0>)
10004e20:	681b      	ldr	r3, [r3, #0]
10004e22:	4013      	ands	r3, r2
10004e24:	2b00      	cmp	r3, #0
10004e26:	d019      	beq.n	10004e5c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
10004e28:	693b      	ldr	r3, [r7, #16]
10004e2a:	681b      	ldr	r3, [r3, #0]
10004e2c:	2b00      	cmp	r3, #0
10004e2e:	d115      	bne.n	10004e5c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
10004e30:	693b      	ldr	r3, [r7, #16]
10004e32:	685a      	ldr	r2, [r3, #4]
10004e34:	4b0b      	ldr	r3, [pc, #44]	@ (10004e64 <vPortFree+0xb0>)
10004e36:	681b      	ldr	r3, [r3, #0]
10004e38:	43db      	mvns	r3, r3
10004e3a:	401a      	ands	r2, r3
10004e3c:	693b      	ldr	r3, [r7, #16]
10004e3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
10004e40:	f001 fcac 	bl	1000679c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
10004e44:	693b      	ldr	r3, [r7, #16]
10004e46:	685a      	ldr	r2, [r3, #4]
10004e48:	4b07      	ldr	r3, [pc, #28]	@ (10004e68 <vPortFree+0xb4>)
10004e4a:	681b      	ldr	r3, [r3, #0]
10004e4c:	4413      	add	r3, r2
10004e4e:	4a06      	ldr	r2, [pc, #24]	@ (10004e68 <vPortFree+0xb4>)
10004e50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
10004e52:	6938      	ldr	r0, [r7, #16]
10004e54:	f000 f86c 	bl	10004f30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
10004e58:	f001 fcae 	bl	100067b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
10004e5c:	bf00      	nop
10004e5e:	3718      	adds	r7, #24
10004e60:	46bd      	mov	sp, r7
10004e62:	bd80      	pop	{r7, pc}
10004e64:	100214e8 	.word	0x100214e8
10004e68:	100214e0 	.word	0x100214e0

10004e6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
10004e6c:	b480      	push	{r7}
10004e6e:	b085      	sub	sp, #20
10004e70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
10004e72:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
10004e76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
10004e78:	4b27      	ldr	r3, [pc, #156]	@ (10004f18 <prvHeapInit+0xac>)
10004e7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
10004e7c:	68fb      	ldr	r3, [r7, #12]
10004e7e:	f003 0307 	and.w	r3, r3, #7
10004e82:	2b00      	cmp	r3, #0
10004e84:	d00c      	beq.n	10004ea0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
10004e86:	68fb      	ldr	r3, [r7, #12]
10004e88:	3307      	adds	r3, #7
10004e8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
10004e8c:	68fb      	ldr	r3, [r7, #12]
10004e8e:	f023 0307 	bic.w	r3, r3, #7
10004e92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
10004e94:	68ba      	ldr	r2, [r7, #8]
10004e96:	68fb      	ldr	r3, [r7, #12]
10004e98:	1ad3      	subs	r3, r2, r3
10004e9a:	4a1f      	ldr	r2, [pc, #124]	@ (10004f18 <prvHeapInit+0xac>)
10004e9c:	4413      	add	r3, r2
10004e9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
10004ea0:	68fb      	ldr	r3, [r7, #12]
10004ea2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
10004ea4:	4a1d      	ldr	r2, [pc, #116]	@ (10004f1c <prvHeapInit+0xb0>)
10004ea6:	687b      	ldr	r3, [r7, #4]
10004ea8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
10004eaa:	4b1c      	ldr	r3, [pc, #112]	@ (10004f1c <prvHeapInit+0xb0>)
10004eac:	2200      	movs	r2, #0
10004eae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
10004eb0:	687b      	ldr	r3, [r7, #4]
10004eb2:	68ba      	ldr	r2, [r7, #8]
10004eb4:	4413      	add	r3, r2
10004eb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
10004eb8:	2208      	movs	r2, #8
10004eba:	68fb      	ldr	r3, [r7, #12]
10004ebc:	1a9b      	subs	r3, r3, r2
10004ebe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
10004ec0:	68fb      	ldr	r3, [r7, #12]
10004ec2:	f023 0307 	bic.w	r3, r3, #7
10004ec6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
10004ec8:	68fb      	ldr	r3, [r7, #12]
10004eca:	4a15      	ldr	r2, [pc, #84]	@ (10004f20 <prvHeapInit+0xb4>)
10004ecc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
10004ece:	4b14      	ldr	r3, [pc, #80]	@ (10004f20 <prvHeapInit+0xb4>)
10004ed0:	681b      	ldr	r3, [r3, #0]
10004ed2:	2200      	movs	r2, #0
10004ed4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
10004ed6:	4b12      	ldr	r3, [pc, #72]	@ (10004f20 <prvHeapInit+0xb4>)
10004ed8:	681b      	ldr	r3, [r3, #0]
10004eda:	2200      	movs	r2, #0
10004edc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
10004ede:	687b      	ldr	r3, [r7, #4]
10004ee0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
10004ee2:	683b      	ldr	r3, [r7, #0]
10004ee4:	68fa      	ldr	r2, [r7, #12]
10004ee6:	1ad2      	subs	r2, r2, r3
10004ee8:	683b      	ldr	r3, [r7, #0]
10004eea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
10004eec:	4b0c      	ldr	r3, [pc, #48]	@ (10004f20 <prvHeapInit+0xb4>)
10004eee:	681a      	ldr	r2, [r3, #0]
10004ef0:	683b      	ldr	r3, [r7, #0]
10004ef2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
10004ef4:	683b      	ldr	r3, [r7, #0]
10004ef6:	685b      	ldr	r3, [r3, #4]
10004ef8:	4a0a      	ldr	r2, [pc, #40]	@ (10004f24 <prvHeapInit+0xb8>)
10004efa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
10004efc:	683b      	ldr	r3, [r7, #0]
10004efe:	685b      	ldr	r3, [r3, #4]
10004f00:	4a09      	ldr	r2, [pc, #36]	@ (10004f28 <prvHeapInit+0xbc>)
10004f02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
10004f04:	4b09      	ldr	r3, [pc, #36]	@ (10004f2c <prvHeapInit+0xc0>)
10004f06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
10004f0a:	601a      	str	r2, [r3, #0]
}
10004f0c:	bf00      	nop
10004f0e:	3714      	adds	r7, #20
10004f10:	46bd      	mov	sp, r7
10004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
10004f16:	4770      	bx	lr
10004f18:	100208d4 	.word	0x100208d4
10004f1c:	100214d4 	.word	0x100214d4
10004f20:	100214dc 	.word	0x100214dc
10004f24:	100214e4 	.word	0x100214e4
10004f28:	100214e0 	.word	0x100214e0
10004f2c:	100214e8 	.word	0x100214e8

10004f30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
10004f30:	b480      	push	{r7}
10004f32:	b085      	sub	sp, #20
10004f34:	af00      	add	r7, sp, #0
10004f36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
10004f38:	4b28      	ldr	r3, [pc, #160]	@ (10004fdc <prvInsertBlockIntoFreeList+0xac>)
10004f3a:	60fb      	str	r3, [r7, #12]
10004f3c:	e002      	b.n	10004f44 <prvInsertBlockIntoFreeList+0x14>
10004f3e:	68fb      	ldr	r3, [r7, #12]
10004f40:	681b      	ldr	r3, [r3, #0]
10004f42:	60fb      	str	r3, [r7, #12]
10004f44:	68fb      	ldr	r3, [r7, #12]
10004f46:	681b      	ldr	r3, [r3, #0]
10004f48:	687a      	ldr	r2, [r7, #4]
10004f4a:	429a      	cmp	r2, r3
10004f4c:	d8f7      	bhi.n	10004f3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
10004f4e:	68fb      	ldr	r3, [r7, #12]
10004f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
10004f52:	68fb      	ldr	r3, [r7, #12]
10004f54:	685b      	ldr	r3, [r3, #4]
10004f56:	68ba      	ldr	r2, [r7, #8]
10004f58:	4413      	add	r3, r2
10004f5a:	687a      	ldr	r2, [r7, #4]
10004f5c:	429a      	cmp	r2, r3
10004f5e:	d108      	bne.n	10004f72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
10004f60:	68fb      	ldr	r3, [r7, #12]
10004f62:	685a      	ldr	r2, [r3, #4]
10004f64:	687b      	ldr	r3, [r7, #4]
10004f66:	685b      	ldr	r3, [r3, #4]
10004f68:	441a      	add	r2, r3
10004f6a:	68fb      	ldr	r3, [r7, #12]
10004f6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
10004f6e:	68fb      	ldr	r3, [r7, #12]
10004f70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
10004f72:	687b      	ldr	r3, [r7, #4]
10004f74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
10004f76:	687b      	ldr	r3, [r7, #4]
10004f78:	685b      	ldr	r3, [r3, #4]
10004f7a:	68ba      	ldr	r2, [r7, #8]
10004f7c:	441a      	add	r2, r3
10004f7e:	68fb      	ldr	r3, [r7, #12]
10004f80:	681b      	ldr	r3, [r3, #0]
10004f82:	429a      	cmp	r2, r3
10004f84:	d118      	bne.n	10004fb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
10004f86:	68fb      	ldr	r3, [r7, #12]
10004f88:	681a      	ldr	r2, [r3, #0]
10004f8a:	4b15      	ldr	r3, [pc, #84]	@ (10004fe0 <prvInsertBlockIntoFreeList+0xb0>)
10004f8c:	681b      	ldr	r3, [r3, #0]
10004f8e:	429a      	cmp	r2, r3
10004f90:	d00d      	beq.n	10004fae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
10004f92:	687b      	ldr	r3, [r7, #4]
10004f94:	685a      	ldr	r2, [r3, #4]
10004f96:	68fb      	ldr	r3, [r7, #12]
10004f98:	681b      	ldr	r3, [r3, #0]
10004f9a:	685b      	ldr	r3, [r3, #4]
10004f9c:	441a      	add	r2, r3
10004f9e:	687b      	ldr	r3, [r7, #4]
10004fa0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
10004fa2:	68fb      	ldr	r3, [r7, #12]
10004fa4:	681b      	ldr	r3, [r3, #0]
10004fa6:	681a      	ldr	r2, [r3, #0]
10004fa8:	687b      	ldr	r3, [r7, #4]
10004faa:	601a      	str	r2, [r3, #0]
10004fac:	e008      	b.n	10004fc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
10004fae:	4b0c      	ldr	r3, [pc, #48]	@ (10004fe0 <prvInsertBlockIntoFreeList+0xb0>)
10004fb0:	681a      	ldr	r2, [r3, #0]
10004fb2:	687b      	ldr	r3, [r7, #4]
10004fb4:	601a      	str	r2, [r3, #0]
10004fb6:	e003      	b.n	10004fc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
10004fb8:	68fb      	ldr	r3, [r7, #12]
10004fba:	681a      	ldr	r2, [r3, #0]
10004fbc:	687b      	ldr	r3, [r7, #4]
10004fbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
10004fc0:	68fa      	ldr	r2, [r7, #12]
10004fc2:	687b      	ldr	r3, [r7, #4]
10004fc4:	429a      	cmp	r2, r3
10004fc6:	d002      	beq.n	10004fce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
10004fc8:	68fb      	ldr	r3, [r7, #12]
10004fca:	687a      	ldr	r2, [r7, #4]
10004fcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
10004fce:	bf00      	nop
10004fd0:	3714      	adds	r7, #20
10004fd2:	46bd      	mov	sp, r7
10004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
10004fd8:	4770      	bx	lr
10004fda:	bf00      	nop
10004fdc:	100214d4 	.word	0x100214d4
10004fe0:	100214dc 	.word	0x100214dc

10004fe4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
10004fe4:	b480      	push	{r7}
10004fe6:	b083      	sub	sp, #12
10004fe8:	af00      	add	r7, sp, #0
10004fea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
10004fec:	687b      	ldr	r3, [r7, #4]
10004fee:	f103 0208 	add.w	r2, r3, #8
10004ff2:	687b      	ldr	r3, [r7, #4]
10004ff4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
10004ff6:	687b      	ldr	r3, [r7, #4]
10004ff8:	f04f 32ff 	mov.w	r2, #4294967295
10004ffc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
10004ffe:	687b      	ldr	r3, [r7, #4]
10005000:	f103 0208 	add.w	r2, r3, #8
10005004:	687b      	ldr	r3, [r7, #4]
10005006:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
10005008:	687b      	ldr	r3, [r7, #4]
1000500a:	f103 0208 	add.w	r2, r3, #8
1000500e:	687b      	ldr	r3, [r7, #4]
10005010:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
10005012:	687b      	ldr	r3, [r7, #4]
10005014:	2200      	movs	r2, #0
10005016:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
10005018:	bf00      	nop
1000501a:	370c      	adds	r7, #12
1000501c:	46bd      	mov	sp, r7
1000501e:	f85d 7b04 	ldr.w	r7, [sp], #4
10005022:	4770      	bx	lr

10005024 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
10005024:	b480      	push	{r7}
10005026:	b083      	sub	sp, #12
10005028:	af00      	add	r7, sp, #0
1000502a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
1000502c:	687b      	ldr	r3, [r7, #4]
1000502e:	2200      	movs	r2, #0
10005030:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
10005032:	bf00      	nop
10005034:	370c      	adds	r7, #12
10005036:	46bd      	mov	sp, r7
10005038:	f85d 7b04 	ldr.w	r7, [sp], #4
1000503c:	4770      	bx	lr

1000503e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1000503e:	b480      	push	{r7}
10005040:	b085      	sub	sp, #20
10005042:	af00      	add	r7, sp, #0
10005044:	6078      	str	r0, [r7, #4]
10005046:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
10005048:	687b      	ldr	r3, [r7, #4]
1000504a:	685b      	ldr	r3, [r3, #4]
1000504c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1000504e:	683b      	ldr	r3, [r7, #0]
10005050:	68fa      	ldr	r2, [r7, #12]
10005052:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
10005054:	68fb      	ldr	r3, [r7, #12]
10005056:	689a      	ldr	r2, [r3, #8]
10005058:	683b      	ldr	r3, [r7, #0]
1000505a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1000505c:	68fb      	ldr	r3, [r7, #12]
1000505e:	689b      	ldr	r3, [r3, #8]
10005060:	683a      	ldr	r2, [r7, #0]
10005062:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
10005064:	68fb      	ldr	r3, [r7, #12]
10005066:	683a      	ldr	r2, [r7, #0]
10005068:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
1000506a:	683b      	ldr	r3, [r7, #0]
1000506c:	687a      	ldr	r2, [r7, #4]
1000506e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
10005070:	687b      	ldr	r3, [r7, #4]
10005072:	681b      	ldr	r3, [r3, #0]
10005074:	1c5a      	adds	r2, r3, #1
10005076:	687b      	ldr	r3, [r7, #4]
10005078:	601a      	str	r2, [r3, #0]
}
1000507a:	bf00      	nop
1000507c:	3714      	adds	r7, #20
1000507e:	46bd      	mov	sp, r7
10005080:	f85d 7b04 	ldr.w	r7, [sp], #4
10005084:	4770      	bx	lr

10005086 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
10005086:	b480      	push	{r7}
10005088:	b085      	sub	sp, #20
1000508a:	af00      	add	r7, sp, #0
1000508c:	6078      	str	r0, [r7, #4]
1000508e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
10005090:	683b      	ldr	r3, [r7, #0]
10005092:	681b      	ldr	r3, [r3, #0]
10005094:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
10005096:	68bb      	ldr	r3, [r7, #8]
10005098:	f1b3 3fff 	cmp.w	r3, #4294967295
1000509c:	d103      	bne.n	100050a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
1000509e:	687b      	ldr	r3, [r7, #4]
100050a0:	691b      	ldr	r3, [r3, #16]
100050a2:	60fb      	str	r3, [r7, #12]
100050a4:	e00c      	b.n	100050c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
100050a6:	687b      	ldr	r3, [r7, #4]
100050a8:	3308      	adds	r3, #8
100050aa:	60fb      	str	r3, [r7, #12]
100050ac:	e002      	b.n	100050b4 <vListInsert+0x2e>
100050ae:	68fb      	ldr	r3, [r7, #12]
100050b0:	685b      	ldr	r3, [r3, #4]
100050b2:	60fb      	str	r3, [r7, #12]
100050b4:	68fb      	ldr	r3, [r7, #12]
100050b6:	685b      	ldr	r3, [r3, #4]
100050b8:	681b      	ldr	r3, [r3, #0]
100050ba:	68ba      	ldr	r2, [r7, #8]
100050bc:	429a      	cmp	r2, r3
100050be:	d2f6      	bcs.n	100050ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
100050c0:	68fb      	ldr	r3, [r7, #12]
100050c2:	685a      	ldr	r2, [r3, #4]
100050c4:	683b      	ldr	r3, [r7, #0]
100050c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
100050c8:	683b      	ldr	r3, [r7, #0]
100050ca:	685b      	ldr	r3, [r3, #4]
100050cc:	683a      	ldr	r2, [r7, #0]
100050ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
100050d0:	683b      	ldr	r3, [r7, #0]
100050d2:	68fa      	ldr	r2, [r7, #12]
100050d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
100050d6:	68fb      	ldr	r3, [r7, #12]
100050d8:	683a      	ldr	r2, [r7, #0]
100050da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
100050dc:	683b      	ldr	r3, [r7, #0]
100050de:	687a      	ldr	r2, [r7, #4]
100050e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
100050e2:	687b      	ldr	r3, [r7, #4]
100050e4:	681b      	ldr	r3, [r3, #0]
100050e6:	1c5a      	adds	r2, r3, #1
100050e8:	687b      	ldr	r3, [r7, #4]
100050ea:	601a      	str	r2, [r3, #0]
}
100050ec:	bf00      	nop
100050ee:	3714      	adds	r7, #20
100050f0:	46bd      	mov	sp, r7
100050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
100050f6:	4770      	bx	lr

100050f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
100050f8:	b480      	push	{r7}
100050fa:	b085      	sub	sp, #20
100050fc:	af00      	add	r7, sp, #0
100050fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
10005100:	687b      	ldr	r3, [r7, #4]
10005102:	691b      	ldr	r3, [r3, #16]
10005104:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
10005106:	687b      	ldr	r3, [r7, #4]
10005108:	685b      	ldr	r3, [r3, #4]
1000510a:	687a      	ldr	r2, [r7, #4]
1000510c:	6892      	ldr	r2, [r2, #8]
1000510e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
10005110:	687b      	ldr	r3, [r7, #4]
10005112:	689b      	ldr	r3, [r3, #8]
10005114:	687a      	ldr	r2, [r7, #4]
10005116:	6852      	ldr	r2, [r2, #4]
10005118:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1000511a:	68fb      	ldr	r3, [r7, #12]
1000511c:	685b      	ldr	r3, [r3, #4]
1000511e:	687a      	ldr	r2, [r7, #4]
10005120:	429a      	cmp	r2, r3
10005122:	d103      	bne.n	1000512c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
10005124:	687b      	ldr	r3, [r7, #4]
10005126:	689a      	ldr	r2, [r3, #8]
10005128:	68fb      	ldr	r3, [r7, #12]
1000512a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
1000512c:	687b      	ldr	r3, [r7, #4]
1000512e:	2200      	movs	r2, #0
10005130:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
10005132:	68fb      	ldr	r3, [r7, #12]
10005134:	681b      	ldr	r3, [r3, #0]
10005136:	1e5a      	subs	r2, r3, #1
10005138:	68fb      	ldr	r3, [r7, #12]
1000513a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1000513c:	68fb      	ldr	r3, [r7, #12]
1000513e:	681b      	ldr	r3, [r3, #0]
}
10005140:	4618      	mov	r0, r3
10005142:	3714      	adds	r7, #20
10005144:	46bd      	mov	sp, r7
10005146:	f85d 7b04 	ldr.w	r7, [sp], #4
1000514a:	4770      	bx	lr

1000514c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
1000514c:	b480      	push	{r7}
1000514e:	b085      	sub	sp, #20
10005150:	af00      	add	r7, sp, #0
10005152:	60f8      	str	r0, [r7, #12]
10005154:	60b9      	str	r1, [r7, #8]
10005156:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
10005158:	68fb      	ldr	r3, [r7, #12]
1000515a:	3b04      	subs	r3, #4
1000515c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1000515e:	68fb      	ldr	r3, [r7, #12]
10005160:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
10005164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
10005166:	68fb      	ldr	r3, [r7, #12]
10005168:	3b04      	subs	r3, #4
1000516a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1000516c:	68bb      	ldr	r3, [r7, #8]
1000516e:	f023 0201 	bic.w	r2, r3, #1
10005172:	68fb      	ldr	r3, [r7, #12]
10005174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
10005176:	68fb      	ldr	r3, [r7, #12]
10005178:	3b04      	subs	r3, #4
1000517a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1000517c:	4a0c      	ldr	r2, [pc, #48]	@ (100051b0 <pxPortInitialiseStack+0x64>)
1000517e:	68fb      	ldr	r3, [r7, #12]
10005180:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
10005182:	68fb      	ldr	r3, [r7, #12]
10005184:	3b14      	subs	r3, #20
10005186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
10005188:	687a      	ldr	r2, [r7, #4]
1000518a:	68fb      	ldr	r3, [r7, #12]
1000518c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
1000518e:	68fb      	ldr	r3, [r7, #12]
10005190:	3b04      	subs	r3, #4
10005192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
10005194:	68fb      	ldr	r3, [r7, #12]
10005196:	f06f 0202 	mvn.w	r2, #2
1000519a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
1000519c:	68fb      	ldr	r3, [r7, #12]
1000519e:	3b20      	subs	r3, #32
100051a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
100051a2:	68fb      	ldr	r3, [r7, #12]
}
100051a4:	4618      	mov	r0, r3
100051a6:	3714      	adds	r7, #20
100051a8:	46bd      	mov	sp, r7
100051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
100051ae:	4770      	bx	lr
100051b0:	100051b5 	.word	0x100051b5

100051b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
100051b4:	b480      	push	{r7}
100051b6:	b085      	sub	sp, #20
100051b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
100051ba:	2300      	movs	r3, #0
100051bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
100051be:	4b13      	ldr	r3, [pc, #76]	@ (1000520c <prvTaskExitError+0x58>)
100051c0:	681b      	ldr	r3, [r3, #0]
100051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
100051c6:	d00b      	beq.n	100051e0 <prvTaskExitError+0x2c>
	__asm volatile
100051c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
100051cc:	f383 8811 	msr	BASEPRI, r3
100051d0:	f3bf 8f6f 	isb	sy
100051d4:	f3bf 8f4f 	dsb	sy
100051d8:	60fb      	str	r3, [r7, #12]
}
100051da:	bf00      	nop
100051dc:	bf00      	nop
100051de:	e7fd      	b.n	100051dc <prvTaskExitError+0x28>
	__asm volatile
100051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
100051e4:	f383 8811 	msr	BASEPRI, r3
100051e8:	f3bf 8f6f 	isb	sy
100051ec:	f3bf 8f4f 	dsb	sy
100051f0:	60bb      	str	r3, [r7, #8]
}
100051f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
100051f4:	bf00      	nop
100051f6:	687b      	ldr	r3, [r7, #4]
100051f8:	2b00      	cmp	r3, #0
100051fa:	d0fc      	beq.n	100051f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
100051fc:	bf00      	nop
100051fe:	bf00      	nop
10005200:	3714      	adds	r7, #20
10005202:	46bd      	mov	sp, r7
10005204:	f85d 7b04 	ldr.w	r7, [sp], #4
10005208:	4770      	bx	lr
1000520a:	bf00      	nop
1000520c:	1002000c 	.word	0x1002000c

10005210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
10005210:	4b07      	ldr	r3, [pc, #28]	@ (10005230 <pxCurrentTCBConst2>)
10005212:	6819      	ldr	r1, [r3, #0]
10005214:	6808      	ldr	r0, [r1, #0]
10005216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000521a:	f380 8809 	msr	PSP, r0
1000521e:	f3bf 8f6f 	isb	sy
10005222:	f04f 0000 	mov.w	r0, #0
10005226:	f380 8811 	msr	BASEPRI, r0
1000522a:	4770      	bx	lr
1000522c:	f3af 8000 	nop.w

10005230 <pxCurrentTCBConst2>:
10005230:	10021534 	.word	0x10021534
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
10005234:	bf00      	nop
10005236:	bf00      	nop

10005238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
10005238:	4808      	ldr	r0, [pc, #32]	@ (1000525c <prvPortStartFirstTask+0x24>)
1000523a:	6800      	ldr	r0, [r0, #0]
1000523c:	6800      	ldr	r0, [r0, #0]
1000523e:	f380 8808 	msr	MSP, r0
10005242:	f04f 0000 	mov.w	r0, #0
10005246:	f380 8814 	msr	CONTROL, r0
1000524a:	b662      	cpsie	i
1000524c:	b661      	cpsie	f
1000524e:	f3bf 8f4f 	dsb	sy
10005252:	f3bf 8f6f 	isb	sy
10005256:	df00      	svc	0
10005258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1000525a:	bf00      	nop
1000525c:	e000ed08 	.word	0xe000ed08

10005260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
10005260:	b580      	push	{r7, lr}
10005262:	b086      	sub	sp, #24
10005264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
10005266:	4b47      	ldr	r3, [pc, #284]	@ (10005384 <xPortStartScheduler+0x124>)
10005268:	681b      	ldr	r3, [r3, #0]
1000526a:	4a47      	ldr	r2, [pc, #284]	@ (10005388 <xPortStartScheduler+0x128>)
1000526c:	4293      	cmp	r3, r2
1000526e:	d10b      	bne.n	10005288 <xPortStartScheduler+0x28>
	__asm volatile
10005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005274:	f383 8811 	msr	BASEPRI, r3
10005278:	f3bf 8f6f 	isb	sy
1000527c:	f3bf 8f4f 	dsb	sy
10005280:	613b      	str	r3, [r7, #16]
}
10005282:	bf00      	nop
10005284:	bf00      	nop
10005286:	e7fd      	b.n	10005284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
10005288:	4b3e      	ldr	r3, [pc, #248]	@ (10005384 <xPortStartScheduler+0x124>)
1000528a:	681b      	ldr	r3, [r3, #0]
1000528c:	4a3f      	ldr	r2, [pc, #252]	@ (1000538c <xPortStartScheduler+0x12c>)
1000528e:	4293      	cmp	r3, r2
10005290:	d10b      	bne.n	100052aa <xPortStartScheduler+0x4a>
	__asm volatile
10005292:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005296:	f383 8811 	msr	BASEPRI, r3
1000529a:	f3bf 8f6f 	isb	sy
1000529e:	f3bf 8f4f 	dsb	sy
100052a2:	60fb      	str	r3, [r7, #12]
}
100052a4:	bf00      	nop
100052a6:	bf00      	nop
100052a8:	e7fd      	b.n	100052a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
100052aa:	4b39      	ldr	r3, [pc, #228]	@ (10005390 <xPortStartScheduler+0x130>)
100052ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
100052ae:	697b      	ldr	r3, [r7, #20]
100052b0:	781b      	ldrb	r3, [r3, #0]
100052b2:	b2db      	uxtb	r3, r3
100052b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
100052b6:	697b      	ldr	r3, [r7, #20]
100052b8:	22ff      	movs	r2, #255	@ 0xff
100052ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
100052bc:	697b      	ldr	r3, [r7, #20]
100052be:	781b      	ldrb	r3, [r3, #0]
100052c0:	b2db      	uxtb	r3, r3
100052c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
100052c4:	78fb      	ldrb	r3, [r7, #3]
100052c6:	b2db      	uxtb	r3, r3
100052c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
100052cc:	b2da      	uxtb	r2, r3
100052ce:	4b31      	ldr	r3, [pc, #196]	@ (10005394 <xPortStartScheduler+0x134>)
100052d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
100052d2:	4b31      	ldr	r3, [pc, #196]	@ (10005398 <xPortStartScheduler+0x138>)
100052d4:	2207      	movs	r2, #7
100052d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
100052d8:	e009      	b.n	100052ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
100052da:	4b2f      	ldr	r3, [pc, #188]	@ (10005398 <xPortStartScheduler+0x138>)
100052dc:	681b      	ldr	r3, [r3, #0]
100052de:	3b01      	subs	r3, #1
100052e0:	4a2d      	ldr	r2, [pc, #180]	@ (10005398 <xPortStartScheduler+0x138>)
100052e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
100052e4:	78fb      	ldrb	r3, [r7, #3]
100052e6:	b2db      	uxtb	r3, r3
100052e8:	005b      	lsls	r3, r3, #1
100052ea:	b2db      	uxtb	r3, r3
100052ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
100052ee:	78fb      	ldrb	r3, [r7, #3]
100052f0:	b2db      	uxtb	r3, r3
100052f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
100052f6:	2b80      	cmp	r3, #128	@ 0x80
100052f8:	d0ef      	beq.n	100052da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
100052fa:	4b27      	ldr	r3, [pc, #156]	@ (10005398 <xPortStartScheduler+0x138>)
100052fc:	681b      	ldr	r3, [r3, #0]
100052fe:	f1c3 0307 	rsb	r3, r3, #7
10005302:	2b04      	cmp	r3, #4
10005304:	d00b      	beq.n	1000531e <xPortStartScheduler+0xbe>
	__asm volatile
10005306:	f04f 0350 	mov.w	r3, #80	@ 0x50
1000530a:	f383 8811 	msr	BASEPRI, r3
1000530e:	f3bf 8f6f 	isb	sy
10005312:	f3bf 8f4f 	dsb	sy
10005316:	60bb      	str	r3, [r7, #8]
}
10005318:	bf00      	nop
1000531a:	bf00      	nop
1000531c:	e7fd      	b.n	1000531a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1000531e:	4b1e      	ldr	r3, [pc, #120]	@ (10005398 <xPortStartScheduler+0x138>)
10005320:	681b      	ldr	r3, [r3, #0]
10005322:	021b      	lsls	r3, r3, #8
10005324:	4a1c      	ldr	r2, [pc, #112]	@ (10005398 <xPortStartScheduler+0x138>)
10005326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
10005328:	4b1b      	ldr	r3, [pc, #108]	@ (10005398 <xPortStartScheduler+0x138>)
1000532a:	681b      	ldr	r3, [r3, #0]
1000532c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
10005330:	4a19      	ldr	r2, [pc, #100]	@ (10005398 <xPortStartScheduler+0x138>)
10005332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
10005334:	687b      	ldr	r3, [r7, #4]
10005336:	b2da      	uxtb	r2, r3
10005338:	697b      	ldr	r3, [r7, #20]
1000533a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1000533c:	4b17      	ldr	r3, [pc, #92]	@ (1000539c <xPortStartScheduler+0x13c>)
1000533e:	681b      	ldr	r3, [r3, #0]
10005340:	4a16      	ldr	r2, [pc, #88]	@ (1000539c <xPortStartScheduler+0x13c>)
10005342:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10005346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
10005348:	4b14      	ldr	r3, [pc, #80]	@ (1000539c <xPortStartScheduler+0x13c>)
1000534a:	681b      	ldr	r3, [r3, #0]
1000534c:	4a13      	ldr	r2, [pc, #76]	@ (1000539c <xPortStartScheduler+0x13c>)
1000534e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
10005352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
10005354:	f000 f8da 	bl	1000550c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
10005358:	4b11      	ldr	r3, [pc, #68]	@ (100053a0 <xPortStartScheduler+0x140>)
1000535a:	2200      	movs	r2, #0
1000535c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
1000535e:	f000 f8f9 	bl	10005554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
10005362:	4b10      	ldr	r3, [pc, #64]	@ (100053a4 <xPortStartScheduler+0x144>)
10005364:	681b      	ldr	r3, [r3, #0]
10005366:	4a0f      	ldr	r2, [pc, #60]	@ (100053a4 <xPortStartScheduler+0x144>)
10005368:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
1000536c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
1000536e:	f7ff ff63 	bl	10005238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
10005372:	f001 fb89 	bl	10006a88 <vTaskSwitchContext>
	prvTaskExitError();
10005376:	f7ff ff1d 	bl	100051b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
1000537a:	2300      	movs	r3, #0
}
1000537c:	4618      	mov	r0, r3
1000537e:	3718      	adds	r7, #24
10005380:	46bd      	mov	sp, r7
10005382:	bd80      	pop	{r7, pc}
10005384:	e000ed00 	.word	0xe000ed00
10005388:	410fc271 	.word	0x410fc271
1000538c:	410fc270 	.word	0x410fc270
10005390:	e000e400 	.word	0xe000e400
10005394:	100214ec 	.word	0x100214ec
10005398:	100214f0 	.word	0x100214f0
1000539c:	e000ed20 	.word	0xe000ed20
100053a0:	1002000c 	.word	0x1002000c
100053a4:	e000ef34 	.word	0xe000ef34

100053a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
100053a8:	b480      	push	{r7}
100053aa:	b083      	sub	sp, #12
100053ac:	af00      	add	r7, sp, #0
	__asm volatile
100053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
100053b2:	f383 8811 	msr	BASEPRI, r3
100053b6:	f3bf 8f6f 	isb	sy
100053ba:	f3bf 8f4f 	dsb	sy
100053be:	607b      	str	r3, [r7, #4]
}
100053c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
100053c2:	4b10      	ldr	r3, [pc, #64]	@ (10005404 <vPortEnterCritical+0x5c>)
100053c4:	681b      	ldr	r3, [r3, #0]
100053c6:	3301      	adds	r3, #1
100053c8:	4a0e      	ldr	r2, [pc, #56]	@ (10005404 <vPortEnterCritical+0x5c>)
100053ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
100053cc:	4b0d      	ldr	r3, [pc, #52]	@ (10005404 <vPortEnterCritical+0x5c>)
100053ce:	681b      	ldr	r3, [r3, #0]
100053d0:	2b01      	cmp	r3, #1
100053d2:	d110      	bne.n	100053f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
100053d4:	4b0c      	ldr	r3, [pc, #48]	@ (10005408 <vPortEnterCritical+0x60>)
100053d6:	681b      	ldr	r3, [r3, #0]
100053d8:	b2db      	uxtb	r3, r3
100053da:	2b00      	cmp	r3, #0
100053dc:	d00b      	beq.n	100053f6 <vPortEnterCritical+0x4e>
	__asm volatile
100053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
100053e2:	f383 8811 	msr	BASEPRI, r3
100053e6:	f3bf 8f6f 	isb	sy
100053ea:	f3bf 8f4f 	dsb	sy
100053ee:	603b      	str	r3, [r7, #0]
}
100053f0:	bf00      	nop
100053f2:	bf00      	nop
100053f4:	e7fd      	b.n	100053f2 <vPortEnterCritical+0x4a>
	}
}
100053f6:	bf00      	nop
100053f8:	370c      	adds	r7, #12
100053fa:	46bd      	mov	sp, r7
100053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
10005400:	4770      	bx	lr
10005402:	bf00      	nop
10005404:	1002000c 	.word	0x1002000c
10005408:	e000ed04 	.word	0xe000ed04

1000540c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
1000540c:	b480      	push	{r7}
1000540e:	b083      	sub	sp, #12
10005410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
10005412:	4b12      	ldr	r3, [pc, #72]	@ (1000545c <vPortExitCritical+0x50>)
10005414:	681b      	ldr	r3, [r3, #0]
10005416:	2b00      	cmp	r3, #0
10005418:	d10b      	bne.n	10005432 <vPortExitCritical+0x26>
	__asm volatile
1000541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
1000541e:	f383 8811 	msr	BASEPRI, r3
10005422:	f3bf 8f6f 	isb	sy
10005426:	f3bf 8f4f 	dsb	sy
1000542a:	607b      	str	r3, [r7, #4]
}
1000542c:	bf00      	nop
1000542e:	bf00      	nop
10005430:	e7fd      	b.n	1000542e <vPortExitCritical+0x22>
	uxCriticalNesting--;
10005432:	4b0a      	ldr	r3, [pc, #40]	@ (1000545c <vPortExitCritical+0x50>)
10005434:	681b      	ldr	r3, [r3, #0]
10005436:	3b01      	subs	r3, #1
10005438:	4a08      	ldr	r2, [pc, #32]	@ (1000545c <vPortExitCritical+0x50>)
1000543a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1000543c:	4b07      	ldr	r3, [pc, #28]	@ (1000545c <vPortExitCritical+0x50>)
1000543e:	681b      	ldr	r3, [r3, #0]
10005440:	2b00      	cmp	r3, #0
10005442:	d105      	bne.n	10005450 <vPortExitCritical+0x44>
10005444:	2300      	movs	r3, #0
10005446:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
10005448:	683b      	ldr	r3, [r7, #0]
1000544a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
1000544e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
10005450:	bf00      	nop
10005452:	370c      	adds	r7, #12
10005454:	46bd      	mov	sp, r7
10005456:	f85d 7b04 	ldr.w	r7, [sp], #4
1000545a:	4770      	bx	lr
1000545c:	1002000c 	.word	0x1002000c

10005460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
10005460:	f3ef 8009 	mrs	r0, PSP
10005464:	f3bf 8f6f 	isb	sy
10005468:	4b15      	ldr	r3, [pc, #84]	@ (100054c0 <pxCurrentTCBConst>)
1000546a:	681a      	ldr	r2, [r3, #0]
1000546c:	f01e 0f10 	tst.w	lr, #16
10005470:	bf08      	it	eq
10005472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
10005476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000547a:	6010      	str	r0, [r2, #0]
1000547c:	e92d 0009 	stmdb	sp!, {r0, r3}
10005480:	f04f 0050 	mov.w	r0, #80	@ 0x50
10005484:	f380 8811 	msr	BASEPRI, r0
10005488:	f3bf 8f4f 	dsb	sy
1000548c:	f3bf 8f6f 	isb	sy
10005490:	f001 fafa 	bl	10006a88 <vTaskSwitchContext>
10005494:	f04f 0000 	mov.w	r0, #0
10005498:	f380 8811 	msr	BASEPRI, r0
1000549c:	bc09      	pop	{r0, r3}
1000549e:	6819      	ldr	r1, [r3, #0]
100054a0:	6808      	ldr	r0, [r1, #0]
100054a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100054a6:	f01e 0f10 	tst.w	lr, #16
100054aa:	bf08      	it	eq
100054ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
100054b0:	f380 8809 	msr	PSP, r0
100054b4:	f3bf 8f6f 	isb	sy
100054b8:	4770      	bx	lr
100054ba:	bf00      	nop
100054bc:	f3af 8000 	nop.w

100054c0 <pxCurrentTCBConst>:
100054c0:	10021534 	.word	0x10021534
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
100054c4:	bf00      	nop
100054c6:	bf00      	nop

100054c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
100054c8:	b580      	push	{r7, lr}
100054ca:	b082      	sub	sp, #8
100054cc:	af00      	add	r7, sp, #0
	__asm volatile
100054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
100054d2:	f383 8811 	msr	BASEPRI, r3
100054d6:	f3bf 8f6f 	isb	sy
100054da:	f3bf 8f4f 	dsb	sy
100054de:	607b      	str	r3, [r7, #4]
}
100054e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
100054e2:	f001 fa17 	bl	10006914 <xTaskIncrementTick>
100054e6:	4603      	mov	r3, r0
100054e8:	2b00      	cmp	r3, #0
100054ea:	d003      	beq.n	100054f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
100054ec:	4b06      	ldr	r3, [pc, #24]	@ (10005508 <xPortSysTickHandler+0x40>)
100054ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
100054f2:	601a      	str	r2, [r3, #0]
100054f4:	2300      	movs	r3, #0
100054f6:	603b      	str	r3, [r7, #0]
	__asm volatile
100054f8:	683b      	ldr	r3, [r7, #0]
100054fa:	f383 8811 	msr	BASEPRI, r3
}
100054fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
10005500:	bf00      	nop
10005502:	3708      	adds	r7, #8
10005504:	46bd      	mov	sp, r7
10005506:	bd80      	pop	{r7, pc}
10005508:	e000ed04 	.word	0xe000ed04

1000550c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
1000550c:	b480      	push	{r7}
1000550e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
10005510:	4b0b      	ldr	r3, [pc, #44]	@ (10005540 <vPortSetupTimerInterrupt+0x34>)
10005512:	2200      	movs	r2, #0
10005514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
10005516:	4b0b      	ldr	r3, [pc, #44]	@ (10005544 <vPortSetupTimerInterrupt+0x38>)
10005518:	2200      	movs	r2, #0
1000551a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1000551c:	4b0a      	ldr	r3, [pc, #40]	@ (10005548 <vPortSetupTimerInterrupt+0x3c>)
1000551e:	681b      	ldr	r3, [r3, #0]
10005520:	4a0a      	ldr	r2, [pc, #40]	@ (1000554c <vPortSetupTimerInterrupt+0x40>)
10005522:	fba2 2303 	umull	r2, r3, r2, r3
10005526:	099b      	lsrs	r3, r3, #6
10005528:	4a09      	ldr	r2, [pc, #36]	@ (10005550 <vPortSetupTimerInterrupt+0x44>)
1000552a:	3b01      	subs	r3, #1
1000552c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1000552e:	4b04      	ldr	r3, [pc, #16]	@ (10005540 <vPortSetupTimerInterrupt+0x34>)
10005530:	2207      	movs	r2, #7
10005532:	601a      	str	r2, [r3, #0]
}
10005534:	bf00      	nop
10005536:	46bd      	mov	sp, r7
10005538:	f85d 7b04 	ldr.w	r7, [sp], #4
1000553c:	4770      	bx	lr
1000553e:	bf00      	nop
10005540:	e000e010 	.word	0xe000e010
10005544:	e000e018 	.word	0xe000e018
10005548:	10020000 	.word	0x10020000
1000554c:	10624dd3 	.word	0x10624dd3
10005550:	e000e014 	.word	0xe000e014

10005554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
10005554:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 10005564 <vPortEnableVFP+0x10>
10005558:	6801      	ldr	r1, [r0, #0]
1000555a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
1000555e:	6001      	str	r1, [r0, #0]
10005560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
10005562:	bf00      	nop
10005564:	e000ed88 	.word	0xe000ed88

10005568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
10005568:	b480      	push	{r7}
1000556a:	b085      	sub	sp, #20
1000556c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1000556e:	f3ef 8305 	mrs	r3, IPSR
10005572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
10005574:	68fb      	ldr	r3, [r7, #12]
10005576:	2b0f      	cmp	r3, #15
10005578:	d915      	bls.n	100055a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1000557a:	4a18      	ldr	r2, [pc, #96]	@ (100055dc <vPortValidateInterruptPriority+0x74>)
1000557c:	68fb      	ldr	r3, [r7, #12]
1000557e:	4413      	add	r3, r2
10005580:	781b      	ldrb	r3, [r3, #0]
10005582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
10005584:	4b16      	ldr	r3, [pc, #88]	@ (100055e0 <vPortValidateInterruptPriority+0x78>)
10005586:	781b      	ldrb	r3, [r3, #0]
10005588:	7afa      	ldrb	r2, [r7, #11]
1000558a:	429a      	cmp	r2, r3
1000558c:	d20b      	bcs.n	100055a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
1000558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005592:	f383 8811 	msr	BASEPRI, r3
10005596:	f3bf 8f6f 	isb	sy
1000559a:	f3bf 8f4f 	dsb	sy
1000559e:	607b      	str	r3, [r7, #4]
}
100055a0:	bf00      	nop
100055a2:	bf00      	nop
100055a4:	e7fd      	b.n	100055a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
100055a6:	4b0f      	ldr	r3, [pc, #60]	@ (100055e4 <vPortValidateInterruptPriority+0x7c>)
100055a8:	681b      	ldr	r3, [r3, #0]
100055aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
100055ae:	4b0e      	ldr	r3, [pc, #56]	@ (100055e8 <vPortValidateInterruptPriority+0x80>)
100055b0:	681b      	ldr	r3, [r3, #0]
100055b2:	429a      	cmp	r2, r3
100055b4:	d90b      	bls.n	100055ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
100055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
100055ba:	f383 8811 	msr	BASEPRI, r3
100055be:	f3bf 8f6f 	isb	sy
100055c2:	f3bf 8f4f 	dsb	sy
100055c6:	603b      	str	r3, [r7, #0]
}
100055c8:	bf00      	nop
100055ca:	bf00      	nop
100055cc:	e7fd      	b.n	100055ca <vPortValidateInterruptPriority+0x62>
	}
100055ce:	bf00      	nop
100055d0:	3714      	adds	r7, #20
100055d2:	46bd      	mov	sp, r7
100055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
100055d8:	4770      	bx	lr
100055da:	bf00      	nop
100055dc:	e000e3f0 	.word	0xe000e3f0
100055e0:	100214ec 	.word	0x100214ec
100055e4:	e000ed0c 	.word	0xe000ed0c
100055e8:	100214f0 	.word	0x100214f0

100055ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
100055ec:	b580      	push	{r7, lr}
100055ee:	b084      	sub	sp, #16
100055f0:	af00      	add	r7, sp, #0
100055f2:	6078      	str	r0, [r7, #4]
100055f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
100055f6:	687b      	ldr	r3, [r7, #4]
100055f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
100055fa:	68fb      	ldr	r3, [r7, #12]
100055fc:	2b00      	cmp	r3, #0
100055fe:	d10b      	bne.n	10005618 <xQueueGenericReset+0x2c>
	__asm volatile
10005600:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005604:	f383 8811 	msr	BASEPRI, r3
10005608:	f3bf 8f6f 	isb	sy
1000560c:	f3bf 8f4f 	dsb	sy
10005610:	60bb      	str	r3, [r7, #8]
}
10005612:	bf00      	nop
10005614:	bf00      	nop
10005616:	e7fd      	b.n	10005614 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
10005618:	f7ff fec6 	bl	100053a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1000561c:	68fb      	ldr	r3, [r7, #12]
1000561e:	681a      	ldr	r2, [r3, #0]
10005620:	68fb      	ldr	r3, [r7, #12]
10005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005624:	68f9      	ldr	r1, [r7, #12]
10005626:	6c09      	ldr	r1, [r1, #64]	@ 0x40
10005628:	fb01 f303 	mul.w	r3, r1, r3
1000562c:	441a      	add	r2, r3
1000562e:	68fb      	ldr	r3, [r7, #12]
10005630:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
10005632:	68fb      	ldr	r3, [r7, #12]
10005634:	2200      	movs	r2, #0
10005636:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
10005638:	68fb      	ldr	r3, [r7, #12]
1000563a:	681a      	ldr	r2, [r3, #0]
1000563c:	68fb      	ldr	r3, [r7, #12]
1000563e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
10005640:	68fb      	ldr	r3, [r7, #12]
10005642:	681a      	ldr	r2, [r3, #0]
10005644:	68fb      	ldr	r3, [r7, #12]
10005646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005648:	3b01      	subs	r3, #1
1000564a:	68f9      	ldr	r1, [r7, #12]
1000564c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
1000564e:	fb01 f303 	mul.w	r3, r1, r3
10005652:	441a      	add	r2, r3
10005654:	68fb      	ldr	r3, [r7, #12]
10005656:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
10005658:	68fb      	ldr	r3, [r7, #12]
1000565a:	22ff      	movs	r2, #255	@ 0xff
1000565c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
10005660:	68fb      	ldr	r3, [r7, #12]
10005662:	22ff      	movs	r2, #255	@ 0xff
10005664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
10005668:	683b      	ldr	r3, [r7, #0]
1000566a:	2b00      	cmp	r3, #0
1000566c:	d114      	bne.n	10005698 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1000566e:	68fb      	ldr	r3, [r7, #12]
10005670:	691b      	ldr	r3, [r3, #16]
10005672:	2b00      	cmp	r3, #0
10005674:	d01a      	beq.n	100056ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
10005676:	68fb      	ldr	r3, [r7, #12]
10005678:	3310      	adds	r3, #16
1000567a:	4618      	mov	r0, r3
1000567c:	f001 fab4 	bl	10006be8 <xTaskRemoveFromEventList>
10005680:	4603      	mov	r3, r0
10005682:	2b00      	cmp	r3, #0
10005684:	d012      	beq.n	100056ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
10005686:	4b0d      	ldr	r3, [pc, #52]	@ (100056bc <xQueueGenericReset+0xd0>)
10005688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
1000568c:	601a      	str	r2, [r3, #0]
1000568e:	f3bf 8f4f 	dsb	sy
10005692:	f3bf 8f6f 	isb	sy
10005696:	e009      	b.n	100056ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
10005698:	68fb      	ldr	r3, [r7, #12]
1000569a:	3310      	adds	r3, #16
1000569c:	4618      	mov	r0, r3
1000569e:	f7ff fca1 	bl	10004fe4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
100056a2:	68fb      	ldr	r3, [r7, #12]
100056a4:	3324      	adds	r3, #36	@ 0x24
100056a6:	4618      	mov	r0, r3
100056a8:	f7ff fc9c 	bl	10004fe4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
100056ac:	f7ff feae 	bl	1000540c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
100056b0:	2301      	movs	r3, #1
}
100056b2:	4618      	mov	r0, r3
100056b4:	3710      	adds	r7, #16
100056b6:	46bd      	mov	sp, r7
100056b8:	bd80      	pop	{r7, pc}
100056ba:	bf00      	nop
100056bc:	e000ed04 	.word	0xe000ed04

100056c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
100056c0:	b580      	push	{r7, lr}
100056c2:	b08e      	sub	sp, #56	@ 0x38
100056c4:	af02      	add	r7, sp, #8
100056c6:	60f8      	str	r0, [r7, #12]
100056c8:	60b9      	str	r1, [r7, #8]
100056ca:	607a      	str	r2, [r7, #4]
100056cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
100056ce:	68fb      	ldr	r3, [r7, #12]
100056d0:	2b00      	cmp	r3, #0
100056d2:	d10b      	bne.n	100056ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
100056d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
100056d8:	f383 8811 	msr	BASEPRI, r3
100056dc:	f3bf 8f6f 	isb	sy
100056e0:	f3bf 8f4f 	dsb	sy
100056e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
100056e6:	bf00      	nop
100056e8:	bf00      	nop
100056ea:	e7fd      	b.n	100056e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
100056ec:	683b      	ldr	r3, [r7, #0]
100056ee:	2b00      	cmp	r3, #0
100056f0:	d10b      	bne.n	1000570a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
100056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
100056f6:	f383 8811 	msr	BASEPRI, r3
100056fa:	f3bf 8f6f 	isb	sy
100056fe:	f3bf 8f4f 	dsb	sy
10005702:	627b      	str	r3, [r7, #36]	@ 0x24
}
10005704:	bf00      	nop
10005706:	bf00      	nop
10005708:	e7fd      	b.n	10005706 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1000570a:	687b      	ldr	r3, [r7, #4]
1000570c:	2b00      	cmp	r3, #0
1000570e:	d002      	beq.n	10005716 <xQueueGenericCreateStatic+0x56>
10005710:	68bb      	ldr	r3, [r7, #8]
10005712:	2b00      	cmp	r3, #0
10005714:	d001      	beq.n	1000571a <xQueueGenericCreateStatic+0x5a>
10005716:	2301      	movs	r3, #1
10005718:	e000      	b.n	1000571c <xQueueGenericCreateStatic+0x5c>
1000571a:	2300      	movs	r3, #0
1000571c:	2b00      	cmp	r3, #0
1000571e:	d10b      	bne.n	10005738 <xQueueGenericCreateStatic+0x78>
	__asm volatile
10005720:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005724:	f383 8811 	msr	BASEPRI, r3
10005728:	f3bf 8f6f 	isb	sy
1000572c:	f3bf 8f4f 	dsb	sy
10005730:	623b      	str	r3, [r7, #32]
}
10005732:	bf00      	nop
10005734:	bf00      	nop
10005736:	e7fd      	b.n	10005734 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
10005738:	687b      	ldr	r3, [r7, #4]
1000573a:	2b00      	cmp	r3, #0
1000573c:	d102      	bne.n	10005744 <xQueueGenericCreateStatic+0x84>
1000573e:	68bb      	ldr	r3, [r7, #8]
10005740:	2b00      	cmp	r3, #0
10005742:	d101      	bne.n	10005748 <xQueueGenericCreateStatic+0x88>
10005744:	2301      	movs	r3, #1
10005746:	e000      	b.n	1000574a <xQueueGenericCreateStatic+0x8a>
10005748:	2300      	movs	r3, #0
1000574a:	2b00      	cmp	r3, #0
1000574c:	d10b      	bne.n	10005766 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
1000574e:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005752:	f383 8811 	msr	BASEPRI, r3
10005756:	f3bf 8f6f 	isb	sy
1000575a:	f3bf 8f4f 	dsb	sy
1000575e:	61fb      	str	r3, [r7, #28]
}
10005760:	bf00      	nop
10005762:	bf00      	nop
10005764:	e7fd      	b.n	10005762 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
10005766:	2350      	movs	r3, #80	@ 0x50
10005768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
1000576a:	697b      	ldr	r3, [r7, #20]
1000576c:	2b50      	cmp	r3, #80	@ 0x50
1000576e:	d00b      	beq.n	10005788 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
10005770:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005774:	f383 8811 	msr	BASEPRI, r3
10005778:	f3bf 8f6f 	isb	sy
1000577c:	f3bf 8f4f 	dsb	sy
10005780:	61bb      	str	r3, [r7, #24]
}
10005782:	bf00      	nop
10005784:	bf00      	nop
10005786:	e7fd      	b.n	10005784 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
10005788:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
1000578a:	683b      	ldr	r3, [r7, #0]
1000578c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
1000578e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005790:	2b00      	cmp	r3, #0
10005792:	d00d      	beq.n	100057b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
10005794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005796:	2201      	movs	r2, #1
10005798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1000579c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
100057a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100057a2:	9300      	str	r3, [sp, #0]
100057a4:	4613      	mov	r3, r2
100057a6:	687a      	ldr	r2, [r7, #4]
100057a8:	68b9      	ldr	r1, [r7, #8]
100057aa:	68f8      	ldr	r0, [r7, #12]
100057ac:	f000 f846 	bl	1000583c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
100057b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
100057b2:	4618      	mov	r0, r3
100057b4:	3730      	adds	r7, #48	@ 0x30
100057b6:	46bd      	mov	sp, r7
100057b8:	bd80      	pop	{r7, pc}

100057ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
100057ba:	b580      	push	{r7, lr}
100057bc:	b08a      	sub	sp, #40	@ 0x28
100057be:	af02      	add	r7, sp, #8
100057c0:	60f8      	str	r0, [r7, #12]
100057c2:	60b9      	str	r1, [r7, #8]
100057c4:	4613      	mov	r3, r2
100057c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
100057c8:	68fb      	ldr	r3, [r7, #12]
100057ca:	2b00      	cmp	r3, #0
100057cc:	d10b      	bne.n	100057e6 <xQueueGenericCreate+0x2c>
	__asm volatile
100057ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
100057d2:	f383 8811 	msr	BASEPRI, r3
100057d6:	f3bf 8f6f 	isb	sy
100057da:	f3bf 8f4f 	dsb	sy
100057de:	613b      	str	r3, [r7, #16]
}
100057e0:	bf00      	nop
100057e2:	bf00      	nop
100057e4:	e7fd      	b.n	100057e2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
100057e6:	68bb      	ldr	r3, [r7, #8]
100057e8:	2b00      	cmp	r3, #0
100057ea:	d102      	bne.n	100057f2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
100057ec:	2300      	movs	r3, #0
100057ee:	61fb      	str	r3, [r7, #28]
100057f0:	e004      	b.n	100057fc <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
100057f2:	68fb      	ldr	r3, [r7, #12]
100057f4:	68ba      	ldr	r2, [r7, #8]
100057f6:	fb02 f303 	mul.w	r3, r2, r3
100057fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
100057fc:	69fb      	ldr	r3, [r7, #28]
100057fe:	3350      	adds	r3, #80	@ 0x50
10005800:	4618      	mov	r0, r3
10005802:	f7ff fa0f 	bl	10004c24 <pvPortMalloc>
10005806:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
10005808:	69bb      	ldr	r3, [r7, #24]
1000580a:	2b00      	cmp	r3, #0
1000580c:	d011      	beq.n	10005832 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
1000580e:	69bb      	ldr	r3, [r7, #24]
10005810:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
10005812:	697b      	ldr	r3, [r7, #20]
10005814:	3350      	adds	r3, #80	@ 0x50
10005816:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
10005818:	69bb      	ldr	r3, [r7, #24]
1000581a:	2200      	movs	r2, #0
1000581c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
10005820:	79fa      	ldrb	r2, [r7, #7]
10005822:	69bb      	ldr	r3, [r7, #24]
10005824:	9300      	str	r3, [sp, #0]
10005826:	4613      	mov	r3, r2
10005828:	697a      	ldr	r2, [r7, #20]
1000582a:	68b9      	ldr	r1, [r7, #8]
1000582c:	68f8      	ldr	r0, [r7, #12]
1000582e:	f000 f805 	bl	1000583c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
10005832:	69bb      	ldr	r3, [r7, #24]
	}
10005834:	4618      	mov	r0, r3
10005836:	3720      	adds	r7, #32
10005838:	46bd      	mov	sp, r7
1000583a:	bd80      	pop	{r7, pc}

1000583c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
1000583c:	b580      	push	{r7, lr}
1000583e:	b084      	sub	sp, #16
10005840:	af00      	add	r7, sp, #0
10005842:	60f8      	str	r0, [r7, #12]
10005844:	60b9      	str	r1, [r7, #8]
10005846:	607a      	str	r2, [r7, #4]
10005848:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
1000584a:	68bb      	ldr	r3, [r7, #8]
1000584c:	2b00      	cmp	r3, #0
1000584e:	d103      	bne.n	10005858 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
10005850:	69bb      	ldr	r3, [r7, #24]
10005852:	69ba      	ldr	r2, [r7, #24]
10005854:	601a      	str	r2, [r3, #0]
10005856:	e002      	b.n	1000585e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
10005858:	69bb      	ldr	r3, [r7, #24]
1000585a:	687a      	ldr	r2, [r7, #4]
1000585c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
1000585e:	69bb      	ldr	r3, [r7, #24]
10005860:	68fa      	ldr	r2, [r7, #12]
10005862:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
10005864:	69bb      	ldr	r3, [r7, #24]
10005866:	68ba      	ldr	r2, [r7, #8]
10005868:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1000586a:	2101      	movs	r1, #1
1000586c:	69b8      	ldr	r0, [r7, #24]
1000586e:	f7ff febd 	bl	100055ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
10005872:	69bb      	ldr	r3, [r7, #24]
10005874:	78fa      	ldrb	r2, [r7, #3]
10005876:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
1000587a:	bf00      	nop
1000587c:	3710      	adds	r7, #16
1000587e:	46bd      	mov	sp, r7
10005880:	bd80      	pop	{r7, pc}

10005882 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
10005882:	b580      	push	{r7, lr}
10005884:	b082      	sub	sp, #8
10005886:	af00      	add	r7, sp, #0
10005888:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
1000588a:	687b      	ldr	r3, [r7, #4]
1000588c:	2b00      	cmp	r3, #0
1000588e:	d00e      	beq.n	100058ae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
10005890:	687b      	ldr	r3, [r7, #4]
10005892:	2200      	movs	r2, #0
10005894:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
10005896:	687b      	ldr	r3, [r7, #4]
10005898:	2200      	movs	r2, #0
1000589a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
1000589c:	687b      	ldr	r3, [r7, #4]
1000589e:	2200      	movs	r2, #0
100058a0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
100058a2:	2300      	movs	r3, #0
100058a4:	2200      	movs	r2, #0
100058a6:	2100      	movs	r1, #0
100058a8:	6878      	ldr	r0, [r7, #4]
100058aa:	f000 f81d 	bl	100058e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
100058ae:	bf00      	nop
100058b0:	3708      	adds	r7, #8
100058b2:	46bd      	mov	sp, r7
100058b4:	bd80      	pop	{r7, pc}

100058b6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
100058b6:	b580      	push	{r7, lr}
100058b8:	b086      	sub	sp, #24
100058ba:	af00      	add	r7, sp, #0
100058bc:	4603      	mov	r3, r0
100058be:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
100058c0:	2301      	movs	r3, #1
100058c2:	617b      	str	r3, [r7, #20]
100058c4:	2300      	movs	r3, #0
100058c6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
100058c8:	79fb      	ldrb	r3, [r7, #7]
100058ca:	461a      	mov	r2, r3
100058cc:	6939      	ldr	r1, [r7, #16]
100058ce:	6978      	ldr	r0, [r7, #20]
100058d0:	f7ff ff73 	bl	100057ba <xQueueGenericCreate>
100058d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
100058d6:	68f8      	ldr	r0, [r7, #12]
100058d8:	f7ff ffd3 	bl	10005882 <prvInitialiseMutex>

		return xNewQueue;
100058dc:	68fb      	ldr	r3, [r7, #12]
	}
100058de:	4618      	mov	r0, r3
100058e0:	3718      	adds	r7, #24
100058e2:	46bd      	mov	sp, r7
100058e4:	bd80      	pop	{r7, pc}
	...

100058e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
100058e8:	b580      	push	{r7, lr}
100058ea:	b08e      	sub	sp, #56	@ 0x38
100058ec:	af00      	add	r7, sp, #0
100058ee:	60f8      	str	r0, [r7, #12]
100058f0:	60b9      	str	r1, [r7, #8]
100058f2:	607a      	str	r2, [r7, #4]
100058f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
100058f6:	2300      	movs	r3, #0
100058f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
100058fa:	68fb      	ldr	r3, [r7, #12]
100058fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
100058fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005900:	2b00      	cmp	r3, #0
10005902:	d10b      	bne.n	1000591c <xQueueGenericSend+0x34>
	__asm volatile
10005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005908:	f383 8811 	msr	BASEPRI, r3
1000590c:	f3bf 8f6f 	isb	sy
10005910:	f3bf 8f4f 	dsb	sy
10005914:	62bb      	str	r3, [r7, #40]	@ 0x28
}
10005916:	bf00      	nop
10005918:	bf00      	nop
1000591a:	e7fd      	b.n	10005918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1000591c:	68bb      	ldr	r3, [r7, #8]
1000591e:	2b00      	cmp	r3, #0
10005920:	d103      	bne.n	1000592a <xQueueGenericSend+0x42>
10005922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10005926:	2b00      	cmp	r3, #0
10005928:	d101      	bne.n	1000592e <xQueueGenericSend+0x46>
1000592a:	2301      	movs	r3, #1
1000592c:	e000      	b.n	10005930 <xQueueGenericSend+0x48>
1000592e:	2300      	movs	r3, #0
10005930:	2b00      	cmp	r3, #0
10005932:	d10b      	bne.n	1000594c <xQueueGenericSend+0x64>
	__asm volatile
10005934:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005938:	f383 8811 	msr	BASEPRI, r3
1000593c:	f3bf 8f6f 	isb	sy
10005940:	f3bf 8f4f 	dsb	sy
10005944:	627b      	str	r3, [r7, #36]	@ 0x24
}
10005946:	bf00      	nop
10005948:	bf00      	nop
1000594a:	e7fd      	b.n	10005948 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1000594c:	683b      	ldr	r3, [r7, #0]
1000594e:	2b02      	cmp	r3, #2
10005950:	d103      	bne.n	1000595a <xQueueGenericSend+0x72>
10005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005956:	2b01      	cmp	r3, #1
10005958:	d101      	bne.n	1000595e <xQueueGenericSend+0x76>
1000595a:	2301      	movs	r3, #1
1000595c:	e000      	b.n	10005960 <xQueueGenericSend+0x78>
1000595e:	2300      	movs	r3, #0
10005960:	2b00      	cmp	r3, #0
10005962:	d10b      	bne.n	1000597c <xQueueGenericSend+0x94>
	__asm volatile
10005964:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005968:	f383 8811 	msr	BASEPRI, r3
1000596c:	f3bf 8f6f 	isb	sy
10005970:	f3bf 8f4f 	dsb	sy
10005974:	623b      	str	r3, [r7, #32]
}
10005976:	bf00      	nop
10005978:	bf00      	nop
1000597a:	e7fd      	b.n	10005978 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1000597c:	f001 faf4 	bl	10006f68 <xTaskGetSchedulerState>
10005980:	4603      	mov	r3, r0
10005982:	2b00      	cmp	r3, #0
10005984:	d102      	bne.n	1000598c <xQueueGenericSend+0xa4>
10005986:	687b      	ldr	r3, [r7, #4]
10005988:	2b00      	cmp	r3, #0
1000598a:	d101      	bne.n	10005990 <xQueueGenericSend+0xa8>
1000598c:	2301      	movs	r3, #1
1000598e:	e000      	b.n	10005992 <xQueueGenericSend+0xaa>
10005990:	2300      	movs	r3, #0
10005992:	2b00      	cmp	r3, #0
10005994:	d10b      	bne.n	100059ae <xQueueGenericSend+0xc6>
	__asm volatile
10005996:	f04f 0350 	mov.w	r3, #80	@ 0x50
1000599a:	f383 8811 	msr	BASEPRI, r3
1000599e:	f3bf 8f6f 	isb	sy
100059a2:	f3bf 8f4f 	dsb	sy
100059a6:	61fb      	str	r3, [r7, #28]
}
100059a8:	bf00      	nop
100059aa:	bf00      	nop
100059ac:	e7fd      	b.n	100059aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
100059ae:	f7ff fcfb 	bl	100053a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
100059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100059b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
100059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100059b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100059ba:	429a      	cmp	r2, r3
100059bc:	d302      	bcc.n	100059c4 <xQueueGenericSend+0xdc>
100059be:	683b      	ldr	r3, [r7, #0]
100059c0:	2b02      	cmp	r3, #2
100059c2:	d129      	bne.n	10005a18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
100059c4:	683a      	ldr	r2, [r7, #0]
100059c6:	68b9      	ldr	r1, [r7, #8]
100059c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
100059ca:	f000 fb35 	bl	10006038 <prvCopyDataToQueue>
100059ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
100059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100059d4:	2b00      	cmp	r3, #0
100059d6:	d010      	beq.n	100059fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
100059d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100059da:	3324      	adds	r3, #36	@ 0x24
100059dc:	4618      	mov	r0, r3
100059de:	f001 f903 	bl	10006be8 <xTaskRemoveFromEventList>
100059e2:	4603      	mov	r3, r0
100059e4:	2b00      	cmp	r3, #0
100059e6:	d013      	beq.n	10005a10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
100059e8:	4b3f      	ldr	r3, [pc, #252]	@ (10005ae8 <xQueueGenericSend+0x200>)
100059ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
100059ee:	601a      	str	r2, [r3, #0]
100059f0:	f3bf 8f4f 	dsb	sy
100059f4:	f3bf 8f6f 	isb	sy
100059f8:	e00a      	b.n	10005a10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
100059fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100059fc:	2b00      	cmp	r3, #0
100059fe:	d007      	beq.n	10005a10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
10005a00:	4b39      	ldr	r3, [pc, #228]	@ (10005ae8 <xQueueGenericSend+0x200>)
10005a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
10005a06:	601a      	str	r2, [r3, #0]
10005a08:	f3bf 8f4f 	dsb	sy
10005a0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
10005a10:	f7ff fcfc 	bl	1000540c <vPortExitCritical>
				return pdPASS;
10005a14:	2301      	movs	r3, #1
10005a16:	e063      	b.n	10005ae0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
10005a18:	687b      	ldr	r3, [r7, #4]
10005a1a:	2b00      	cmp	r3, #0
10005a1c:	d103      	bne.n	10005a26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
10005a1e:	f7ff fcf5 	bl	1000540c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
10005a22:	2300      	movs	r3, #0
10005a24:	e05c      	b.n	10005ae0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
10005a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005a28:	2b00      	cmp	r3, #0
10005a2a:	d106      	bne.n	10005a3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
10005a2c:	f107 0314 	add.w	r3, r7, #20
10005a30:	4618      	mov	r0, r3
10005a32:	f001 f93d 	bl	10006cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
10005a36:	2301      	movs	r3, #1
10005a38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
10005a3a:	f7ff fce7 	bl	1000540c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
10005a3e:	f000 fead 	bl	1000679c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
10005a42:	f7ff fcb1 	bl	100053a8 <vPortEnterCritical>
10005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005a48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
10005a4c:	b25b      	sxtb	r3, r3
10005a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
10005a52:	d103      	bne.n	10005a5c <xQueueGenericSend+0x174>
10005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005a56:	2200      	movs	r2, #0
10005a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
10005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
10005a62:	b25b      	sxtb	r3, r3
10005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
10005a68:	d103      	bne.n	10005a72 <xQueueGenericSend+0x18a>
10005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005a6c:	2200      	movs	r2, #0
10005a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
10005a72:	f7ff fccb 	bl	1000540c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
10005a76:	1d3a      	adds	r2, r7, #4
10005a78:	f107 0314 	add.w	r3, r7, #20
10005a7c:	4611      	mov	r1, r2
10005a7e:	4618      	mov	r0, r3
10005a80:	f001 f92c 	bl	10006cdc <xTaskCheckForTimeOut>
10005a84:	4603      	mov	r3, r0
10005a86:	2b00      	cmp	r3, #0
10005a88:	d124      	bne.n	10005ad4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
10005a8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10005a8c:	f000 fbcc 	bl	10006228 <prvIsQueueFull>
10005a90:	4603      	mov	r3, r0
10005a92:	2b00      	cmp	r3, #0
10005a94:	d018      	beq.n	10005ac8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
10005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005a98:	3310      	adds	r3, #16
10005a9a:	687a      	ldr	r2, [r7, #4]
10005a9c:	4611      	mov	r1, r2
10005a9e:	4618      	mov	r0, r3
10005aa0:	f001 f850 	bl	10006b44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
10005aa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10005aa6:	f000 fb57 	bl	10006158 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
10005aaa:	f000 fe85 	bl	100067b8 <xTaskResumeAll>
10005aae:	4603      	mov	r3, r0
10005ab0:	2b00      	cmp	r3, #0
10005ab2:	f47f af7c 	bne.w	100059ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
10005ab6:	4b0c      	ldr	r3, [pc, #48]	@ (10005ae8 <xQueueGenericSend+0x200>)
10005ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
10005abc:	601a      	str	r2, [r3, #0]
10005abe:	f3bf 8f4f 	dsb	sy
10005ac2:	f3bf 8f6f 	isb	sy
10005ac6:	e772      	b.n	100059ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
10005ac8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10005aca:	f000 fb45 	bl	10006158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
10005ace:	f000 fe73 	bl	100067b8 <xTaskResumeAll>
10005ad2:	e76c      	b.n	100059ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
10005ad4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10005ad6:	f000 fb3f 	bl	10006158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
10005ada:	f000 fe6d 	bl	100067b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
10005ade:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
10005ae0:	4618      	mov	r0, r3
10005ae2:	3738      	adds	r7, #56	@ 0x38
10005ae4:	46bd      	mov	sp, r7
10005ae6:	bd80      	pop	{r7, pc}
10005ae8:	e000ed04 	.word	0xe000ed04

10005aec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
10005aec:	b580      	push	{r7, lr}
10005aee:	b08e      	sub	sp, #56	@ 0x38
10005af0:	af00      	add	r7, sp, #0
10005af2:	60f8      	str	r0, [r7, #12]
10005af4:	60b9      	str	r1, [r7, #8]
10005af6:	607a      	str	r2, [r7, #4]
10005af8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
10005afa:	68fb      	ldr	r3, [r7, #12]
10005afc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
10005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005b00:	2b00      	cmp	r3, #0
10005b02:	d10b      	bne.n	10005b1c <xQueueGenericSendFromISR+0x30>
	__asm volatile
10005b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005b08:	f383 8811 	msr	BASEPRI, r3
10005b0c:	f3bf 8f6f 	isb	sy
10005b10:	f3bf 8f4f 	dsb	sy
10005b14:	627b      	str	r3, [r7, #36]	@ 0x24
}
10005b16:	bf00      	nop
10005b18:	bf00      	nop
10005b1a:	e7fd      	b.n	10005b18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
10005b1c:	68bb      	ldr	r3, [r7, #8]
10005b1e:	2b00      	cmp	r3, #0
10005b20:	d103      	bne.n	10005b2a <xQueueGenericSendFromISR+0x3e>
10005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10005b26:	2b00      	cmp	r3, #0
10005b28:	d101      	bne.n	10005b2e <xQueueGenericSendFromISR+0x42>
10005b2a:	2301      	movs	r3, #1
10005b2c:	e000      	b.n	10005b30 <xQueueGenericSendFromISR+0x44>
10005b2e:	2300      	movs	r3, #0
10005b30:	2b00      	cmp	r3, #0
10005b32:	d10b      	bne.n	10005b4c <xQueueGenericSendFromISR+0x60>
	__asm volatile
10005b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005b38:	f383 8811 	msr	BASEPRI, r3
10005b3c:	f3bf 8f6f 	isb	sy
10005b40:	f3bf 8f4f 	dsb	sy
10005b44:	623b      	str	r3, [r7, #32]
}
10005b46:	bf00      	nop
10005b48:	bf00      	nop
10005b4a:	e7fd      	b.n	10005b48 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
10005b4c:	683b      	ldr	r3, [r7, #0]
10005b4e:	2b02      	cmp	r3, #2
10005b50:	d103      	bne.n	10005b5a <xQueueGenericSendFromISR+0x6e>
10005b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005b56:	2b01      	cmp	r3, #1
10005b58:	d101      	bne.n	10005b5e <xQueueGenericSendFromISR+0x72>
10005b5a:	2301      	movs	r3, #1
10005b5c:	e000      	b.n	10005b60 <xQueueGenericSendFromISR+0x74>
10005b5e:	2300      	movs	r3, #0
10005b60:	2b00      	cmp	r3, #0
10005b62:	d10b      	bne.n	10005b7c <xQueueGenericSendFromISR+0x90>
	__asm volatile
10005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005b68:	f383 8811 	msr	BASEPRI, r3
10005b6c:	f3bf 8f6f 	isb	sy
10005b70:	f3bf 8f4f 	dsb	sy
10005b74:	61fb      	str	r3, [r7, #28]
}
10005b76:	bf00      	nop
10005b78:	bf00      	nop
10005b7a:	e7fd      	b.n	10005b78 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
10005b7c:	f7ff fcf4 	bl	10005568 <vPortValidateInterruptPriority>
	__asm volatile
10005b80:	f3ef 8211 	mrs	r2, BASEPRI
10005b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005b88:	f383 8811 	msr	BASEPRI, r3
10005b8c:	f3bf 8f6f 	isb	sy
10005b90:	f3bf 8f4f 	dsb	sy
10005b94:	61ba      	str	r2, [r7, #24]
10005b96:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
10005b98:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
10005b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
10005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005b9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10005ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005ba4:	429a      	cmp	r2, r3
10005ba6:	d302      	bcc.n	10005bae <xQueueGenericSendFromISR+0xc2>
10005ba8:	683b      	ldr	r3, [r7, #0]
10005baa:	2b02      	cmp	r3, #2
10005bac:	d12c      	bne.n	10005c08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
10005bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
10005bb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
10005bb8:	683a      	ldr	r2, [r7, #0]
10005bba:	68b9      	ldr	r1, [r7, #8]
10005bbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10005bbe:	f000 fa3b 	bl	10006038 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
10005bc2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
10005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
10005bca:	d112      	bne.n	10005bf2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
10005bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005bd0:	2b00      	cmp	r3, #0
10005bd2:	d016      	beq.n	10005c02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
10005bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005bd6:	3324      	adds	r3, #36	@ 0x24
10005bd8:	4618      	mov	r0, r3
10005bda:	f001 f805 	bl	10006be8 <xTaskRemoveFromEventList>
10005bde:	4603      	mov	r3, r0
10005be0:	2b00      	cmp	r3, #0
10005be2:	d00e      	beq.n	10005c02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
10005be4:	687b      	ldr	r3, [r7, #4]
10005be6:	2b00      	cmp	r3, #0
10005be8:	d00b      	beq.n	10005c02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
10005bea:	687b      	ldr	r3, [r7, #4]
10005bec:	2201      	movs	r2, #1
10005bee:	601a      	str	r2, [r3, #0]
10005bf0:	e007      	b.n	10005c02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
10005bf2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
10005bf6:	3301      	adds	r3, #1
10005bf8:	b2db      	uxtb	r3, r3
10005bfa:	b25a      	sxtb	r2, r3
10005bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005bfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
10005c02:	2301      	movs	r3, #1
10005c04:	637b      	str	r3, [r7, #52]	@ 0x34
		{
10005c06:	e001      	b.n	10005c0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
10005c08:	2300      	movs	r3, #0
10005c0a:	637b      	str	r3, [r7, #52]	@ 0x34
10005c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005c0e:	613b      	str	r3, [r7, #16]
	__asm volatile
10005c10:	693b      	ldr	r3, [r7, #16]
10005c12:	f383 8811 	msr	BASEPRI, r3
}
10005c16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
10005c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
10005c1a:	4618      	mov	r0, r3
10005c1c:	3738      	adds	r7, #56	@ 0x38
10005c1e:	46bd      	mov	sp, r7
10005c20:	bd80      	pop	{r7, pc}
	...

10005c24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
10005c24:	b580      	push	{r7, lr}
10005c26:	b08c      	sub	sp, #48	@ 0x30
10005c28:	af00      	add	r7, sp, #0
10005c2a:	60f8      	str	r0, [r7, #12]
10005c2c:	60b9      	str	r1, [r7, #8]
10005c2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
10005c30:	2300      	movs	r3, #0
10005c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
10005c34:	68fb      	ldr	r3, [r7, #12]
10005c36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
10005c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005c3a:	2b00      	cmp	r3, #0
10005c3c:	d10b      	bne.n	10005c56 <xQueueReceive+0x32>
	__asm volatile
10005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005c42:	f383 8811 	msr	BASEPRI, r3
10005c46:	f3bf 8f6f 	isb	sy
10005c4a:	f3bf 8f4f 	dsb	sy
10005c4e:	623b      	str	r3, [r7, #32]
}
10005c50:	bf00      	nop
10005c52:	bf00      	nop
10005c54:	e7fd      	b.n	10005c52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
10005c56:	68bb      	ldr	r3, [r7, #8]
10005c58:	2b00      	cmp	r3, #0
10005c5a:	d103      	bne.n	10005c64 <xQueueReceive+0x40>
10005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10005c60:	2b00      	cmp	r3, #0
10005c62:	d101      	bne.n	10005c68 <xQueueReceive+0x44>
10005c64:	2301      	movs	r3, #1
10005c66:	e000      	b.n	10005c6a <xQueueReceive+0x46>
10005c68:	2300      	movs	r3, #0
10005c6a:	2b00      	cmp	r3, #0
10005c6c:	d10b      	bne.n	10005c86 <xQueueReceive+0x62>
	__asm volatile
10005c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005c72:	f383 8811 	msr	BASEPRI, r3
10005c76:	f3bf 8f6f 	isb	sy
10005c7a:	f3bf 8f4f 	dsb	sy
10005c7e:	61fb      	str	r3, [r7, #28]
}
10005c80:	bf00      	nop
10005c82:	bf00      	nop
10005c84:	e7fd      	b.n	10005c82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
10005c86:	f001 f96f 	bl	10006f68 <xTaskGetSchedulerState>
10005c8a:	4603      	mov	r3, r0
10005c8c:	2b00      	cmp	r3, #0
10005c8e:	d102      	bne.n	10005c96 <xQueueReceive+0x72>
10005c90:	687b      	ldr	r3, [r7, #4]
10005c92:	2b00      	cmp	r3, #0
10005c94:	d101      	bne.n	10005c9a <xQueueReceive+0x76>
10005c96:	2301      	movs	r3, #1
10005c98:	e000      	b.n	10005c9c <xQueueReceive+0x78>
10005c9a:	2300      	movs	r3, #0
10005c9c:	2b00      	cmp	r3, #0
10005c9e:	d10b      	bne.n	10005cb8 <xQueueReceive+0x94>
	__asm volatile
10005ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005ca4:	f383 8811 	msr	BASEPRI, r3
10005ca8:	f3bf 8f6f 	isb	sy
10005cac:	f3bf 8f4f 	dsb	sy
10005cb0:	61bb      	str	r3, [r7, #24]
}
10005cb2:	bf00      	nop
10005cb4:	bf00      	nop
10005cb6:	e7fd      	b.n	10005cb4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
10005cb8:	f7ff fb76 	bl	100053a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
10005cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005cc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
10005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005cc4:	2b00      	cmp	r3, #0
10005cc6:	d01f      	beq.n	10005d08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
10005cc8:	68b9      	ldr	r1, [r7, #8]
10005cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10005ccc:	f000 fa1e 	bl	1000610c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
10005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005cd2:	1e5a      	subs	r2, r3, #1
10005cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005cd6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
10005cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005cda:	691b      	ldr	r3, [r3, #16]
10005cdc:	2b00      	cmp	r3, #0
10005cde:	d00f      	beq.n	10005d00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
10005ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005ce2:	3310      	adds	r3, #16
10005ce4:	4618      	mov	r0, r3
10005ce6:	f000 ff7f 	bl	10006be8 <xTaskRemoveFromEventList>
10005cea:	4603      	mov	r3, r0
10005cec:	2b00      	cmp	r3, #0
10005cee:	d007      	beq.n	10005d00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
10005cf0:	4b3c      	ldr	r3, [pc, #240]	@ (10005de4 <xQueueReceive+0x1c0>)
10005cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
10005cf6:	601a      	str	r2, [r3, #0]
10005cf8:	f3bf 8f4f 	dsb	sy
10005cfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
10005d00:	f7ff fb84 	bl	1000540c <vPortExitCritical>
				return pdPASS;
10005d04:	2301      	movs	r3, #1
10005d06:	e069      	b.n	10005ddc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
10005d08:	687b      	ldr	r3, [r7, #4]
10005d0a:	2b00      	cmp	r3, #0
10005d0c:	d103      	bne.n	10005d16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
10005d0e:	f7ff fb7d 	bl	1000540c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
10005d12:	2300      	movs	r3, #0
10005d14:	e062      	b.n	10005ddc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
10005d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005d18:	2b00      	cmp	r3, #0
10005d1a:	d106      	bne.n	10005d2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
10005d1c:	f107 0310 	add.w	r3, r7, #16
10005d20:	4618      	mov	r0, r3
10005d22:	f000 ffc5 	bl	10006cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
10005d26:	2301      	movs	r3, #1
10005d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
10005d2a:	f7ff fb6f 	bl	1000540c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
10005d2e:	f000 fd35 	bl	1000679c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
10005d32:	f7ff fb39 	bl	100053a8 <vPortEnterCritical>
10005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005d38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
10005d3c:	b25b      	sxtb	r3, r3
10005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
10005d42:	d103      	bne.n	10005d4c <xQueueReceive+0x128>
10005d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005d46:	2200      	movs	r2, #0
10005d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
10005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
10005d52:	b25b      	sxtb	r3, r3
10005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
10005d58:	d103      	bne.n	10005d62 <xQueueReceive+0x13e>
10005d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005d5c:	2200      	movs	r2, #0
10005d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
10005d62:	f7ff fb53 	bl	1000540c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
10005d66:	1d3a      	adds	r2, r7, #4
10005d68:	f107 0310 	add.w	r3, r7, #16
10005d6c:	4611      	mov	r1, r2
10005d6e:	4618      	mov	r0, r3
10005d70:	f000 ffb4 	bl	10006cdc <xTaskCheckForTimeOut>
10005d74:	4603      	mov	r3, r0
10005d76:	2b00      	cmp	r3, #0
10005d78:	d123      	bne.n	10005dc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
10005d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10005d7c:	f000 fa3e 	bl	100061fc <prvIsQueueEmpty>
10005d80:	4603      	mov	r3, r0
10005d82:	2b00      	cmp	r3, #0
10005d84:	d017      	beq.n	10005db6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
10005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005d88:	3324      	adds	r3, #36	@ 0x24
10005d8a:	687a      	ldr	r2, [r7, #4]
10005d8c:	4611      	mov	r1, r2
10005d8e:	4618      	mov	r0, r3
10005d90:	f000 fed8 	bl	10006b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
10005d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10005d96:	f000 f9df 	bl	10006158 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
10005d9a:	f000 fd0d 	bl	100067b8 <xTaskResumeAll>
10005d9e:	4603      	mov	r3, r0
10005da0:	2b00      	cmp	r3, #0
10005da2:	d189      	bne.n	10005cb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
10005da4:	4b0f      	ldr	r3, [pc, #60]	@ (10005de4 <xQueueReceive+0x1c0>)
10005da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
10005daa:	601a      	str	r2, [r3, #0]
10005dac:	f3bf 8f4f 	dsb	sy
10005db0:	f3bf 8f6f 	isb	sy
10005db4:	e780      	b.n	10005cb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
10005db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10005db8:	f000 f9ce 	bl	10006158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
10005dbc:	f000 fcfc 	bl	100067b8 <xTaskResumeAll>
10005dc0:	e77a      	b.n	10005cb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
10005dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10005dc4:	f000 f9c8 	bl	10006158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
10005dc8:	f000 fcf6 	bl	100067b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
10005dcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10005dce:	f000 fa15 	bl	100061fc <prvIsQueueEmpty>
10005dd2:	4603      	mov	r3, r0
10005dd4:	2b00      	cmp	r3, #0
10005dd6:	f43f af6f 	beq.w	10005cb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
10005dda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
10005ddc:	4618      	mov	r0, r3
10005dde:	3730      	adds	r7, #48	@ 0x30
10005de0:	46bd      	mov	sp, r7
10005de2:	bd80      	pop	{r7, pc}
10005de4:	e000ed04 	.word	0xe000ed04

10005de8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
10005de8:	b580      	push	{r7, lr}
10005dea:	b08e      	sub	sp, #56	@ 0x38
10005dec:	af00      	add	r7, sp, #0
10005dee:	6078      	str	r0, [r7, #4]
10005df0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
10005df2:	2300      	movs	r3, #0
10005df4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
10005df6:	687b      	ldr	r3, [r7, #4]
10005df8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
10005dfa:	2300      	movs	r3, #0
10005dfc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
10005dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005e00:	2b00      	cmp	r3, #0
10005e02:	d10b      	bne.n	10005e1c <xQueueSemaphoreTake+0x34>
	__asm volatile
10005e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005e08:	f383 8811 	msr	BASEPRI, r3
10005e0c:	f3bf 8f6f 	isb	sy
10005e10:	f3bf 8f4f 	dsb	sy
10005e14:	623b      	str	r3, [r7, #32]
}
10005e16:	bf00      	nop
10005e18:	bf00      	nop
10005e1a:	e7fd      	b.n	10005e18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
10005e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10005e20:	2b00      	cmp	r3, #0
10005e22:	d00b      	beq.n	10005e3c <xQueueSemaphoreTake+0x54>
	__asm volatile
10005e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005e28:	f383 8811 	msr	BASEPRI, r3
10005e2c:	f3bf 8f6f 	isb	sy
10005e30:	f3bf 8f4f 	dsb	sy
10005e34:	61fb      	str	r3, [r7, #28]
}
10005e36:	bf00      	nop
10005e38:	bf00      	nop
10005e3a:	e7fd      	b.n	10005e38 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
10005e3c:	f001 f894 	bl	10006f68 <xTaskGetSchedulerState>
10005e40:	4603      	mov	r3, r0
10005e42:	2b00      	cmp	r3, #0
10005e44:	d102      	bne.n	10005e4c <xQueueSemaphoreTake+0x64>
10005e46:	683b      	ldr	r3, [r7, #0]
10005e48:	2b00      	cmp	r3, #0
10005e4a:	d101      	bne.n	10005e50 <xQueueSemaphoreTake+0x68>
10005e4c:	2301      	movs	r3, #1
10005e4e:	e000      	b.n	10005e52 <xQueueSemaphoreTake+0x6a>
10005e50:	2300      	movs	r3, #0
10005e52:	2b00      	cmp	r3, #0
10005e54:	d10b      	bne.n	10005e6e <xQueueSemaphoreTake+0x86>
	__asm volatile
10005e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005e5a:	f383 8811 	msr	BASEPRI, r3
10005e5e:	f3bf 8f6f 	isb	sy
10005e62:	f3bf 8f4f 	dsb	sy
10005e66:	61bb      	str	r3, [r7, #24]
}
10005e68:	bf00      	nop
10005e6a:	bf00      	nop
10005e6c:	e7fd      	b.n	10005e6a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
10005e6e:	f7ff fa9b 	bl	100053a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
10005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005e76:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
10005e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005e7a:	2b00      	cmp	r3, #0
10005e7c:	d024      	beq.n	10005ec8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
10005e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005e80:	1e5a      	subs	r2, r3, #1
10005e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005e84:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
10005e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005e88:	681b      	ldr	r3, [r3, #0]
10005e8a:	2b00      	cmp	r3, #0
10005e8c:	d104      	bne.n	10005e98 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
10005e8e:	f001 f9e5 	bl	1000725c <pvTaskIncrementMutexHeldCount>
10005e92:	4602      	mov	r2, r0
10005e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005e96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
10005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005e9a:	691b      	ldr	r3, [r3, #16]
10005e9c:	2b00      	cmp	r3, #0
10005e9e:	d00f      	beq.n	10005ec0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
10005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005ea2:	3310      	adds	r3, #16
10005ea4:	4618      	mov	r0, r3
10005ea6:	f000 fe9f 	bl	10006be8 <xTaskRemoveFromEventList>
10005eaa:	4603      	mov	r3, r0
10005eac:	2b00      	cmp	r3, #0
10005eae:	d007      	beq.n	10005ec0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
10005eb0:	4b54      	ldr	r3, [pc, #336]	@ (10006004 <xQueueSemaphoreTake+0x21c>)
10005eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
10005eb6:	601a      	str	r2, [r3, #0]
10005eb8:	f3bf 8f4f 	dsb	sy
10005ebc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
10005ec0:	f7ff faa4 	bl	1000540c <vPortExitCritical>
				return pdPASS;
10005ec4:	2301      	movs	r3, #1
10005ec6:	e098      	b.n	10005ffa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
10005ec8:	683b      	ldr	r3, [r7, #0]
10005eca:	2b00      	cmp	r3, #0
10005ecc:	d112      	bne.n	10005ef4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
10005ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005ed0:	2b00      	cmp	r3, #0
10005ed2:	d00b      	beq.n	10005eec <xQueueSemaphoreTake+0x104>
	__asm volatile
10005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
10005ed8:	f383 8811 	msr	BASEPRI, r3
10005edc:	f3bf 8f6f 	isb	sy
10005ee0:	f3bf 8f4f 	dsb	sy
10005ee4:	617b      	str	r3, [r7, #20]
}
10005ee6:	bf00      	nop
10005ee8:	bf00      	nop
10005eea:	e7fd      	b.n	10005ee8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
10005eec:	f7ff fa8e 	bl	1000540c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
10005ef0:	2300      	movs	r3, #0
10005ef2:	e082      	b.n	10005ffa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
10005ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005ef6:	2b00      	cmp	r3, #0
10005ef8:	d106      	bne.n	10005f08 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
10005efa:	f107 030c 	add.w	r3, r7, #12
10005efe:	4618      	mov	r0, r3
10005f00:	f000 fed6 	bl	10006cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
10005f04:	2301      	movs	r3, #1
10005f06:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
10005f08:	f7ff fa80 	bl	1000540c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
10005f0c:	f000 fc46 	bl	1000679c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
10005f10:	f7ff fa4a 	bl	100053a8 <vPortEnterCritical>
10005f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005f16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
10005f1a:	b25b      	sxtb	r3, r3
10005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
10005f20:	d103      	bne.n	10005f2a <xQueueSemaphoreTake+0x142>
10005f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005f24:	2200      	movs	r2, #0
10005f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
10005f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
10005f30:	b25b      	sxtb	r3, r3
10005f32:	f1b3 3fff 	cmp.w	r3, #4294967295
10005f36:	d103      	bne.n	10005f40 <xQueueSemaphoreTake+0x158>
10005f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005f3a:	2200      	movs	r2, #0
10005f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
10005f40:	f7ff fa64 	bl	1000540c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
10005f44:	463a      	mov	r2, r7
10005f46:	f107 030c 	add.w	r3, r7, #12
10005f4a:	4611      	mov	r1, r2
10005f4c:	4618      	mov	r0, r3
10005f4e:	f000 fec5 	bl	10006cdc <xTaskCheckForTimeOut>
10005f52:	4603      	mov	r3, r0
10005f54:	2b00      	cmp	r3, #0
10005f56:	d132      	bne.n	10005fbe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
10005f58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
10005f5a:	f000 f94f 	bl	100061fc <prvIsQueueEmpty>
10005f5e:	4603      	mov	r3, r0
10005f60:	2b00      	cmp	r3, #0
10005f62:	d026      	beq.n	10005fb2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
10005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005f66:	681b      	ldr	r3, [r3, #0]
10005f68:	2b00      	cmp	r3, #0
10005f6a:	d109      	bne.n	10005f80 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
10005f6c:	f7ff fa1c 	bl	100053a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
10005f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005f72:	689b      	ldr	r3, [r3, #8]
10005f74:	4618      	mov	r0, r3
10005f76:	f001 f815 	bl	10006fa4 <xTaskPriorityInherit>
10005f7a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
10005f7c:	f7ff fa46 	bl	1000540c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
10005f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005f82:	3324      	adds	r3, #36	@ 0x24
10005f84:	683a      	ldr	r2, [r7, #0]
10005f86:	4611      	mov	r1, r2
10005f88:	4618      	mov	r0, r3
10005f8a:	f000 fddb 	bl	10006b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
10005f8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
10005f90:	f000 f8e2 	bl	10006158 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
10005f94:	f000 fc10 	bl	100067b8 <xTaskResumeAll>
10005f98:	4603      	mov	r3, r0
10005f9a:	2b00      	cmp	r3, #0
10005f9c:	f47f af67 	bne.w	10005e6e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
10005fa0:	4b18      	ldr	r3, [pc, #96]	@ (10006004 <xQueueSemaphoreTake+0x21c>)
10005fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
10005fa6:	601a      	str	r2, [r3, #0]
10005fa8:	f3bf 8f4f 	dsb	sy
10005fac:	f3bf 8f6f 	isb	sy
10005fb0:	e75d      	b.n	10005e6e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
10005fb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
10005fb4:	f000 f8d0 	bl	10006158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
10005fb8:	f000 fbfe 	bl	100067b8 <xTaskResumeAll>
10005fbc:	e757      	b.n	10005e6e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
10005fbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
10005fc0:	f000 f8ca 	bl	10006158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
10005fc4:	f000 fbf8 	bl	100067b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
10005fc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
10005fca:	f000 f917 	bl	100061fc <prvIsQueueEmpty>
10005fce:	4603      	mov	r3, r0
10005fd0:	2b00      	cmp	r3, #0
10005fd2:	f43f af4c 	beq.w	10005e6e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
10005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005fd8:	2b00      	cmp	r3, #0
10005fda:	d00d      	beq.n	10005ff8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
10005fdc:	f7ff f9e4 	bl	100053a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
10005fe0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
10005fe2:	f000 f811 	bl	10006008 <prvGetDisinheritPriorityAfterTimeout>
10005fe6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
10005fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005fea:	689b      	ldr	r3, [r3, #8]
10005fec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10005fee:	4618      	mov	r0, r3
10005ff0:	f001 f8b0 	bl	10007154 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
10005ff4:	f7ff fa0a 	bl	1000540c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
10005ff8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
10005ffa:	4618      	mov	r0, r3
10005ffc:	3738      	adds	r7, #56	@ 0x38
10005ffe:	46bd      	mov	sp, r7
10006000:	bd80      	pop	{r7, pc}
10006002:	bf00      	nop
10006004:	e000ed04 	.word	0xe000ed04

10006008 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
10006008:	b480      	push	{r7}
1000600a:	b085      	sub	sp, #20
1000600c:	af00      	add	r7, sp, #0
1000600e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
10006010:	687b      	ldr	r3, [r7, #4]
10006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006014:	2b00      	cmp	r3, #0
10006016:	d006      	beq.n	10006026 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
10006018:	687b      	ldr	r3, [r7, #4]
1000601a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000601c:	681b      	ldr	r3, [r3, #0]
1000601e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
10006022:	60fb      	str	r3, [r7, #12]
10006024:	e001      	b.n	1000602a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
10006026:	2300      	movs	r3, #0
10006028:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
1000602a:	68fb      	ldr	r3, [r7, #12]
	}
1000602c:	4618      	mov	r0, r3
1000602e:	3714      	adds	r7, #20
10006030:	46bd      	mov	sp, r7
10006032:	f85d 7b04 	ldr.w	r7, [sp], #4
10006036:	4770      	bx	lr

10006038 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
10006038:	b580      	push	{r7, lr}
1000603a:	b086      	sub	sp, #24
1000603c:	af00      	add	r7, sp, #0
1000603e:	60f8      	str	r0, [r7, #12]
10006040:	60b9      	str	r1, [r7, #8]
10006042:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
10006044:	2300      	movs	r3, #0
10006046:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
10006048:	68fb      	ldr	r3, [r7, #12]
1000604a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000604c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1000604e:	68fb      	ldr	r3, [r7, #12]
10006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10006052:	2b00      	cmp	r3, #0
10006054:	d10d      	bne.n	10006072 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
10006056:	68fb      	ldr	r3, [r7, #12]
10006058:	681b      	ldr	r3, [r3, #0]
1000605a:	2b00      	cmp	r3, #0
1000605c:	d14d      	bne.n	100060fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
1000605e:	68fb      	ldr	r3, [r7, #12]
10006060:	689b      	ldr	r3, [r3, #8]
10006062:	4618      	mov	r0, r3
10006064:	f001 f806 	bl	10007074 <xTaskPriorityDisinherit>
10006068:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
1000606a:	68fb      	ldr	r3, [r7, #12]
1000606c:	2200      	movs	r2, #0
1000606e:	609a      	str	r2, [r3, #8]
10006070:	e043      	b.n	100060fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
10006072:	687b      	ldr	r3, [r7, #4]
10006074:	2b00      	cmp	r3, #0
10006076:	d119      	bne.n	100060ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
10006078:	68fb      	ldr	r3, [r7, #12]
1000607a:	6858      	ldr	r0, [r3, #4]
1000607c:	68fb      	ldr	r3, [r7, #12]
1000607e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10006080:	461a      	mov	r2, r3
10006082:	68b9      	ldr	r1, [r7, #8]
10006084:	f003 fff1 	bl	1000a06a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
10006088:	68fb      	ldr	r3, [r7, #12]
1000608a:	685a      	ldr	r2, [r3, #4]
1000608c:	68fb      	ldr	r3, [r7, #12]
1000608e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10006090:	441a      	add	r2, r3
10006092:	68fb      	ldr	r3, [r7, #12]
10006094:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
10006096:	68fb      	ldr	r3, [r7, #12]
10006098:	685a      	ldr	r2, [r3, #4]
1000609a:	68fb      	ldr	r3, [r7, #12]
1000609c:	689b      	ldr	r3, [r3, #8]
1000609e:	429a      	cmp	r2, r3
100060a0:	d32b      	bcc.n	100060fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
100060a2:	68fb      	ldr	r3, [r7, #12]
100060a4:	681a      	ldr	r2, [r3, #0]
100060a6:	68fb      	ldr	r3, [r7, #12]
100060a8:	605a      	str	r2, [r3, #4]
100060aa:	e026      	b.n	100060fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
100060ac:	68fb      	ldr	r3, [r7, #12]
100060ae:	68d8      	ldr	r0, [r3, #12]
100060b0:	68fb      	ldr	r3, [r7, #12]
100060b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100060b4:	461a      	mov	r2, r3
100060b6:	68b9      	ldr	r1, [r7, #8]
100060b8:	f003 ffd7 	bl	1000a06a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
100060bc:	68fb      	ldr	r3, [r7, #12]
100060be:	68da      	ldr	r2, [r3, #12]
100060c0:	68fb      	ldr	r3, [r7, #12]
100060c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100060c4:	425b      	negs	r3, r3
100060c6:	441a      	add	r2, r3
100060c8:	68fb      	ldr	r3, [r7, #12]
100060ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
100060cc:	68fb      	ldr	r3, [r7, #12]
100060ce:	68da      	ldr	r2, [r3, #12]
100060d0:	68fb      	ldr	r3, [r7, #12]
100060d2:	681b      	ldr	r3, [r3, #0]
100060d4:	429a      	cmp	r2, r3
100060d6:	d207      	bcs.n	100060e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
100060d8:	68fb      	ldr	r3, [r7, #12]
100060da:	689a      	ldr	r2, [r3, #8]
100060dc:	68fb      	ldr	r3, [r7, #12]
100060de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100060e0:	425b      	negs	r3, r3
100060e2:	441a      	add	r2, r3
100060e4:	68fb      	ldr	r3, [r7, #12]
100060e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
100060e8:	687b      	ldr	r3, [r7, #4]
100060ea:	2b02      	cmp	r3, #2
100060ec:	d105      	bne.n	100060fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
100060ee:	693b      	ldr	r3, [r7, #16]
100060f0:	2b00      	cmp	r3, #0
100060f2:	d002      	beq.n	100060fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
100060f4:	693b      	ldr	r3, [r7, #16]
100060f6:	3b01      	subs	r3, #1
100060f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
100060fa:	693b      	ldr	r3, [r7, #16]
100060fc:	1c5a      	adds	r2, r3, #1
100060fe:	68fb      	ldr	r3, [r7, #12]
10006100:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
10006102:	697b      	ldr	r3, [r7, #20]
}
10006104:	4618      	mov	r0, r3
10006106:	3718      	adds	r7, #24
10006108:	46bd      	mov	sp, r7
1000610a:	bd80      	pop	{r7, pc}

1000610c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
1000610c:	b580      	push	{r7, lr}
1000610e:	b082      	sub	sp, #8
10006110:	af00      	add	r7, sp, #0
10006112:	6078      	str	r0, [r7, #4]
10006114:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
10006116:	687b      	ldr	r3, [r7, #4]
10006118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
1000611a:	2b00      	cmp	r3, #0
1000611c:	d018      	beq.n	10006150 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
1000611e:	687b      	ldr	r3, [r7, #4]
10006120:	68da      	ldr	r2, [r3, #12]
10006122:	687b      	ldr	r3, [r7, #4]
10006124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10006126:	441a      	add	r2, r3
10006128:	687b      	ldr	r3, [r7, #4]
1000612a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1000612c:	687b      	ldr	r3, [r7, #4]
1000612e:	68da      	ldr	r2, [r3, #12]
10006130:	687b      	ldr	r3, [r7, #4]
10006132:	689b      	ldr	r3, [r3, #8]
10006134:	429a      	cmp	r2, r3
10006136:	d303      	bcc.n	10006140 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
10006138:	687b      	ldr	r3, [r7, #4]
1000613a:	681a      	ldr	r2, [r3, #0]
1000613c:	687b      	ldr	r3, [r7, #4]
1000613e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
10006140:	687b      	ldr	r3, [r7, #4]
10006142:	68d9      	ldr	r1, [r3, #12]
10006144:	687b      	ldr	r3, [r7, #4]
10006146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10006148:	461a      	mov	r2, r3
1000614a:	6838      	ldr	r0, [r7, #0]
1000614c:	f003 ff8d 	bl	1000a06a <memcpy>
	}
}
10006150:	bf00      	nop
10006152:	3708      	adds	r7, #8
10006154:	46bd      	mov	sp, r7
10006156:	bd80      	pop	{r7, pc}

10006158 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
10006158:	b580      	push	{r7, lr}
1000615a:	b084      	sub	sp, #16
1000615c:	af00      	add	r7, sp, #0
1000615e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
10006160:	f7ff f922 	bl	100053a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
10006164:	687b      	ldr	r3, [r7, #4]
10006166:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
1000616a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1000616c:	e011      	b.n	10006192 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1000616e:	687b      	ldr	r3, [r7, #4]
10006170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006172:	2b00      	cmp	r3, #0
10006174:	d012      	beq.n	1000619c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
10006176:	687b      	ldr	r3, [r7, #4]
10006178:	3324      	adds	r3, #36	@ 0x24
1000617a:	4618      	mov	r0, r3
1000617c:	f000 fd34 	bl	10006be8 <xTaskRemoveFromEventList>
10006180:	4603      	mov	r3, r0
10006182:	2b00      	cmp	r3, #0
10006184:	d001      	beq.n	1000618a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
10006186:	f000 fe0d 	bl	10006da4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
1000618a:	7bfb      	ldrb	r3, [r7, #15]
1000618c:	3b01      	subs	r3, #1
1000618e:	b2db      	uxtb	r3, r3
10006190:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
10006192:	f997 300f 	ldrsb.w	r3, [r7, #15]
10006196:	2b00      	cmp	r3, #0
10006198:	dce9      	bgt.n	1000616e <prvUnlockQueue+0x16>
1000619a:	e000      	b.n	1000619e <prvUnlockQueue+0x46>
					break;
1000619c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
1000619e:	687b      	ldr	r3, [r7, #4]
100061a0:	22ff      	movs	r2, #255	@ 0xff
100061a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
100061a6:	f7ff f931 	bl	1000540c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
100061aa:	f7ff f8fd 	bl	100053a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
100061ae:	687b      	ldr	r3, [r7, #4]
100061b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
100061b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
100061b6:	e011      	b.n	100061dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
100061b8:	687b      	ldr	r3, [r7, #4]
100061ba:	691b      	ldr	r3, [r3, #16]
100061bc:	2b00      	cmp	r3, #0
100061be:	d012      	beq.n	100061e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
100061c0:	687b      	ldr	r3, [r7, #4]
100061c2:	3310      	adds	r3, #16
100061c4:	4618      	mov	r0, r3
100061c6:	f000 fd0f 	bl	10006be8 <xTaskRemoveFromEventList>
100061ca:	4603      	mov	r3, r0
100061cc:	2b00      	cmp	r3, #0
100061ce:	d001      	beq.n	100061d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
100061d0:	f000 fde8 	bl	10006da4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
100061d4:	7bbb      	ldrb	r3, [r7, #14]
100061d6:	3b01      	subs	r3, #1
100061d8:	b2db      	uxtb	r3, r3
100061da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
100061dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
100061e0:	2b00      	cmp	r3, #0
100061e2:	dce9      	bgt.n	100061b8 <prvUnlockQueue+0x60>
100061e4:	e000      	b.n	100061e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
100061e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
100061e8:	687b      	ldr	r3, [r7, #4]
100061ea:	22ff      	movs	r2, #255	@ 0xff
100061ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
100061f0:	f7ff f90c 	bl	1000540c <vPortExitCritical>
}
100061f4:	bf00      	nop
100061f6:	3710      	adds	r7, #16
100061f8:	46bd      	mov	sp, r7
100061fa:	bd80      	pop	{r7, pc}

100061fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
100061fc:	b580      	push	{r7, lr}
100061fe:	b084      	sub	sp, #16
10006200:	af00      	add	r7, sp, #0
10006202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
10006204:	f7ff f8d0 	bl	100053a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
10006208:	687b      	ldr	r3, [r7, #4]
1000620a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000620c:	2b00      	cmp	r3, #0
1000620e:	d102      	bne.n	10006216 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
10006210:	2301      	movs	r3, #1
10006212:	60fb      	str	r3, [r7, #12]
10006214:	e001      	b.n	1000621a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
10006216:	2300      	movs	r3, #0
10006218:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
1000621a:	f7ff f8f7 	bl	1000540c <vPortExitCritical>

	return xReturn;
1000621e:	68fb      	ldr	r3, [r7, #12]
}
10006220:	4618      	mov	r0, r3
10006222:	3710      	adds	r7, #16
10006224:	46bd      	mov	sp, r7
10006226:	bd80      	pop	{r7, pc}

10006228 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
10006228:	b580      	push	{r7, lr}
1000622a:	b084      	sub	sp, #16
1000622c:	af00      	add	r7, sp, #0
1000622e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
10006230:	f7ff f8ba 	bl	100053a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
10006234:	687b      	ldr	r3, [r7, #4]
10006236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10006238:	687b      	ldr	r3, [r7, #4]
1000623a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1000623c:	429a      	cmp	r2, r3
1000623e:	d102      	bne.n	10006246 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
10006240:	2301      	movs	r3, #1
10006242:	60fb      	str	r3, [r7, #12]
10006244:	e001      	b.n	1000624a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
10006246:	2300      	movs	r3, #0
10006248:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
1000624a:	f7ff f8df 	bl	1000540c <vPortExitCritical>

	return xReturn;
1000624e:	68fb      	ldr	r3, [r7, #12]
}
10006250:	4618      	mov	r0, r3
10006252:	3710      	adds	r7, #16
10006254:	46bd      	mov	sp, r7
10006256:	bd80      	pop	{r7, pc}

10006258 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
10006258:	b480      	push	{r7}
1000625a:	b085      	sub	sp, #20
1000625c:	af00      	add	r7, sp, #0
1000625e:	6078      	str	r0, [r7, #4]
10006260:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
10006262:	2300      	movs	r3, #0
10006264:	60fb      	str	r3, [r7, #12]
10006266:	e014      	b.n	10006292 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
10006268:	4a0f      	ldr	r2, [pc, #60]	@ (100062a8 <vQueueAddToRegistry+0x50>)
1000626a:	68fb      	ldr	r3, [r7, #12]
1000626c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
10006270:	2b00      	cmp	r3, #0
10006272:	d10b      	bne.n	1000628c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
10006274:	490c      	ldr	r1, [pc, #48]	@ (100062a8 <vQueueAddToRegistry+0x50>)
10006276:	68fb      	ldr	r3, [r7, #12]
10006278:	683a      	ldr	r2, [r7, #0]
1000627a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1000627e:	4a0a      	ldr	r2, [pc, #40]	@ (100062a8 <vQueueAddToRegistry+0x50>)
10006280:	68fb      	ldr	r3, [r7, #12]
10006282:	00db      	lsls	r3, r3, #3
10006284:	4413      	add	r3, r2
10006286:	687a      	ldr	r2, [r7, #4]
10006288:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1000628a:	e006      	b.n	1000629a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1000628c:	68fb      	ldr	r3, [r7, #12]
1000628e:	3301      	adds	r3, #1
10006290:	60fb      	str	r3, [r7, #12]
10006292:	68fb      	ldr	r3, [r7, #12]
10006294:	2b07      	cmp	r3, #7
10006296:	d9e7      	bls.n	10006268 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
10006298:	bf00      	nop
1000629a:	bf00      	nop
1000629c:	3714      	adds	r7, #20
1000629e:	46bd      	mov	sp, r7
100062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
100062a4:	4770      	bx	lr
100062a6:	bf00      	nop
100062a8:	100214f4 	.word	0x100214f4

100062ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
100062ac:	b580      	push	{r7, lr}
100062ae:	b086      	sub	sp, #24
100062b0:	af00      	add	r7, sp, #0
100062b2:	60f8      	str	r0, [r7, #12]
100062b4:	60b9      	str	r1, [r7, #8]
100062b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
100062b8:	68fb      	ldr	r3, [r7, #12]
100062ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
100062bc:	f7ff f874 	bl	100053a8 <vPortEnterCritical>
100062c0:	697b      	ldr	r3, [r7, #20]
100062c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
100062c6:	b25b      	sxtb	r3, r3
100062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
100062cc:	d103      	bne.n	100062d6 <vQueueWaitForMessageRestricted+0x2a>
100062ce:	697b      	ldr	r3, [r7, #20]
100062d0:	2200      	movs	r2, #0
100062d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
100062d6:	697b      	ldr	r3, [r7, #20]
100062d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
100062dc:	b25b      	sxtb	r3, r3
100062de:	f1b3 3fff 	cmp.w	r3, #4294967295
100062e2:	d103      	bne.n	100062ec <vQueueWaitForMessageRestricted+0x40>
100062e4:	697b      	ldr	r3, [r7, #20]
100062e6:	2200      	movs	r2, #0
100062e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
100062ec:	f7ff f88e 	bl	1000540c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
100062f0:	697b      	ldr	r3, [r7, #20]
100062f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100062f4:	2b00      	cmp	r3, #0
100062f6:	d106      	bne.n	10006306 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
100062f8:	697b      	ldr	r3, [r7, #20]
100062fa:	3324      	adds	r3, #36	@ 0x24
100062fc:	687a      	ldr	r2, [r7, #4]
100062fe:	68b9      	ldr	r1, [r7, #8]
10006300:	4618      	mov	r0, r3
10006302:	f000 fc45 	bl	10006b90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
10006306:	6978      	ldr	r0, [r7, #20]
10006308:	f7ff ff26 	bl	10006158 <prvUnlockQueue>
	}
1000630c:	bf00      	nop
1000630e:	3718      	adds	r7, #24
10006310:	46bd      	mov	sp, r7
10006312:	bd80      	pop	{r7, pc}

10006314 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
10006314:	b580      	push	{r7, lr}
10006316:	b08e      	sub	sp, #56	@ 0x38
10006318:	af04      	add	r7, sp, #16
1000631a:	60f8      	str	r0, [r7, #12]
1000631c:	60b9      	str	r1, [r7, #8]
1000631e:	607a      	str	r2, [r7, #4]
10006320:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
10006322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10006324:	2b00      	cmp	r3, #0
10006326:	d10b      	bne.n	10006340 <xTaskCreateStatic+0x2c>
	__asm volatile
10006328:	f04f 0350 	mov.w	r3, #80	@ 0x50
1000632c:	f383 8811 	msr	BASEPRI, r3
10006330:	f3bf 8f6f 	isb	sy
10006334:	f3bf 8f4f 	dsb	sy
10006338:	623b      	str	r3, [r7, #32]
}
1000633a:	bf00      	nop
1000633c:	bf00      	nop
1000633e:	e7fd      	b.n	1000633c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
10006340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10006342:	2b00      	cmp	r3, #0
10006344:	d10b      	bne.n	1000635e <xTaskCreateStatic+0x4a>
	__asm volatile
10006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
1000634a:	f383 8811 	msr	BASEPRI, r3
1000634e:	f3bf 8f6f 	isb	sy
10006352:	f3bf 8f4f 	dsb	sy
10006356:	61fb      	str	r3, [r7, #28]
}
10006358:	bf00      	nop
1000635a:	bf00      	nop
1000635c:	e7fd      	b.n	1000635a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
1000635e:	235c      	movs	r3, #92	@ 0x5c
10006360:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
10006362:	693b      	ldr	r3, [r7, #16]
10006364:	2b5c      	cmp	r3, #92	@ 0x5c
10006366:	d00b      	beq.n	10006380 <xTaskCreateStatic+0x6c>
	__asm volatile
10006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
1000636c:	f383 8811 	msr	BASEPRI, r3
10006370:	f3bf 8f6f 	isb	sy
10006374:	f3bf 8f4f 	dsb	sy
10006378:	61bb      	str	r3, [r7, #24]
}
1000637a:	bf00      	nop
1000637c:	bf00      	nop
1000637e:	e7fd      	b.n	1000637c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
10006380:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
10006382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10006384:	2b00      	cmp	r3, #0
10006386:	d01e      	beq.n	100063c6 <xTaskCreateStatic+0xb2>
10006388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000638a:	2b00      	cmp	r3, #0
1000638c:	d01b      	beq.n	100063c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
1000638e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10006390:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
10006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10006396:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
10006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000639a:	2202      	movs	r2, #2
1000639c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
100063a0:	2300      	movs	r3, #0
100063a2:	9303      	str	r3, [sp, #12]
100063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100063a6:	9302      	str	r3, [sp, #8]
100063a8:	f107 0314 	add.w	r3, r7, #20
100063ac:	9301      	str	r3, [sp, #4]
100063ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100063b0:	9300      	str	r3, [sp, #0]
100063b2:	683b      	ldr	r3, [r7, #0]
100063b4:	687a      	ldr	r2, [r7, #4]
100063b6:	68b9      	ldr	r1, [r7, #8]
100063b8:	68f8      	ldr	r0, [r7, #12]
100063ba:	f000 f850 	bl	1000645e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
100063be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
100063c0:	f000 f8de 	bl	10006580 <prvAddNewTaskToReadyList>
100063c4:	e001      	b.n	100063ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
100063c6:	2300      	movs	r3, #0
100063c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
100063ca:	697b      	ldr	r3, [r7, #20]
	}
100063cc:	4618      	mov	r0, r3
100063ce:	3728      	adds	r7, #40	@ 0x28
100063d0:	46bd      	mov	sp, r7
100063d2:	bd80      	pop	{r7, pc}

100063d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
100063d4:	b580      	push	{r7, lr}
100063d6:	b08c      	sub	sp, #48	@ 0x30
100063d8:	af04      	add	r7, sp, #16
100063da:	60f8      	str	r0, [r7, #12]
100063dc:	60b9      	str	r1, [r7, #8]
100063de:	603b      	str	r3, [r7, #0]
100063e0:	4613      	mov	r3, r2
100063e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
100063e4:	88fb      	ldrh	r3, [r7, #6]
100063e6:	009b      	lsls	r3, r3, #2
100063e8:	4618      	mov	r0, r3
100063ea:	f7fe fc1b 	bl	10004c24 <pvPortMalloc>
100063ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
100063f0:	697b      	ldr	r3, [r7, #20]
100063f2:	2b00      	cmp	r3, #0
100063f4:	d00e      	beq.n	10006414 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
100063f6:	205c      	movs	r0, #92	@ 0x5c
100063f8:	f7fe fc14 	bl	10004c24 <pvPortMalloc>
100063fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
100063fe:	69fb      	ldr	r3, [r7, #28]
10006400:	2b00      	cmp	r3, #0
10006402:	d003      	beq.n	1000640c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
10006404:	69fb      	ldr	r3, [r7, #28]
10006406:	697a      	ldr	r2, [r7, #20]
10006408:	631a      	str	r2, [r3, #48]	@ 0x30
1000640a:	e005      	b.n	10006418 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
1000640c:	6978      	ldr	r0, [r7, #20]
1000640e:	f7fe fcd1 	bl	10004db4 <vPortFree>
10006412:	e001      	b.n	10006418 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
10006414:	2300      	movs	r3, #0
10006416:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
10006418:	69fb      	ldr	r3, [r7, #28]
1000641a:	2b00      	cmp	r3, #0
1000641c:	d017      	beq.n	1000644e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1000641e:	69fb      	ldr	r3, [r7, #28]
10006420:	2200      	movs	r2, #0
10006422:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
10006426:	88fa      	ldrh	r2, [r7, #6]
10006428:	2300      	movs	r3, #0
1000642a:	9303      	str	r3, [sp, #12]
1000642c:	69fb      	ldr	r3, [r7, #28]
1000642e:	9302      	str	r3, [sp, #8]
10006430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006432:	9301      	str	r3, [sp, #4]
10006434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10006436:	9300      	str	r3, [sp, #0]
10006438:	683b      	ldr	r3, [r7, #0]
1000643a:	68b9      	ldr	r1, [r7, #8]
1000643c:	68f8      	ldr	r0, [r7, #12]
1000643e:	f000 f80e 	bl	1000645e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
10006442:	69f8      	ldr	r0, [r7, #28]
10006444:	f000 f89c 	bl	10006580 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
10006448:	2301      	movs	r3, #1
1000644a:	61bb      	str	r3, [r7, #24]
1000644c:	e002      	b.n	10006454 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1000644e:	f04f 33ff 	mov.w	r3, #4294967295
10006452:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
10006454:	69bb      	ldr	r3, [r7, #24]
	}
10006456:	4618      	mov	r0, r3
10006458:	3720      	adds	r7, #32
1000645a:	46bd      	mov	sp, r7
1000645c:	bd80      	pop	{r7, pc}

1000645e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
1000645e:	b580      	push	{r7, lr}
10006460:	b088      	sub	sp, #32
10006462:	af00      	add	r7, sp, #0
10006464:	60f8      	str	r0, [r7, #12]
10006466:	60b9      	str	r1, [r7, #8]
10006468:	607a      	str	r2, [r7, #4]
1000646a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1000646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000646e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
10006470:	687b      	ldr	r3, [r7, #4]
10006472:	009b      	lsls	r3, r3, #2
10006474:	461a      	mov	r2, r3
10006476:	21a5      	movs	r1, #165	@ 0xa5
10006478:	f003 fd57 	bl	10009f2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
1000647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000647e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10006480:	687b      	ldr	r3, [r7, #4]
10006482:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
10006486:	3b01      	subs	r3, #1
10006488:	009b      	lsls	r3, r3, #2
1000648a:	4413      	add	r3, r2
1000648c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
1000648e:	69bb      	ldr	r3, [r7, #24]
10006490:	f023 0307 	bic.w	r3, r3, #7
10006494:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
10006496:	69bb      	ldr	r3, [r7, #24]
10006498:	f003 0307 	and.w	r3, r3, #7
1000649c:	2b00      	cmp	r3, #0
1000649e:	d00b      	beq.n	100064b8 <prvInitialiseNewTask+0x5a>
	__asm volatile
100064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
100064a4:	f383 8811 	msr	BASEPRI, r3
100064a8:	f3bf 8f6f 	isb	sy
100064ac:	f3bf 8f4f 	dsb	sy
100064b0:	617b      	str	r3, [r7, #20]
}
100064b2:	bf00      	nop
100064b4:	bf00      	nop
100064b6:	e7fd      	b.n	100064b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
100064b8:	68bb      	ldr	r3, [r7, #8]
100064ba:	2b00      	cmp	r3, #0
100064bc:	d01f      	beq.n	100064fe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
100064be:	2300      	movs	r3, #0
100064c0:	61fb      	str	r3, [r7, #28]
100064c2:	e012      	b.n	100064ea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
100064c4:	68ba      	ldr	r2, [r7, #8]
100064c6:	69fb      	ldr	r3, [r7, #28]
100064c8:	4413      	add	r3, r2
100064ca:	7819      	ldrb	r1, [r3, #0]
100064cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100064ce:	69fb      	ldr	r3, [r7, #28]
100064d0:	4413      	add	r3, r2
100064d2:	3334      	adds	r3, #52	@ 0x34
100064d4:	460a      	mov	r2, r1
100064d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
100064d8:	68ba      	ldr	r2, [r7, #8]
100064da:	69fb      	ldr	r3, [r7, #28]
100064dc:	4413      	add	r3, r2
100064de:	781b      	ldrb	r3, [r3, #0]
100064e0:	2b00      	cmp	r3, #0
100064e2:	d006      	beq.n	100064f2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
100064e4:	69fb      	ldr	r3, [r7, #28]
100064e6:	3301      	adds	r3, #1
100064e8:	61fb      	str	r3, [r7, #28]
100064ea:	69fb      	ldr	r3, [r7, #28]
100064ec:	2b0f      	cmp	r3, #15
100064ee:	d9e9      	bls.n	100064c4 <prvInitialiseNewTask+0x66>
100064f0:	e000      	b.n	100064f4 <prvInitialiseNewTask+0x96>
			{
				break;
100064f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
100064f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100064f6:	2200      	movs	r2, #0
100064f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
100064fc:	e003      	b.n	10006506 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
100064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006500:	2200      	movs	r2, #0
10006502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
10006506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10006508:	2b37      	cmp	r3, #55	@ 0x37
1000650a:	d901      	bls.n	10006510 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1000650c:	2337      	movs	r3, #55	@ 0x37
1000650e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
10006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10006514:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
10006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006518:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000651a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
1000651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000651e:	2200      	movs	r2, #0
10006520:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
10006522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006524:	3304      	adds	r3, #4
10006526:	4618      	mov	r0, r3
10006528:	f7fe fd7c 	bl	10005024 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1000652c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000652e:	3318      	adds	r3, #24
10006530:	4618      	mov	r0, r3
10006532:	f7fe fd77 	bl	10005024 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
10006536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1000653a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1000653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000653e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
10006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006544:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
10006546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1000654a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
1000654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000654e:	2200      	movs	r2, #0
10006550:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
10006552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006554:	2200      	movs	r2, #0
10006556:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1000655a:	683a      	ldr	r2, [r7, #0]
1000655c:	68f9      	ldr	r1, [r7, #12]
1000655e:	69b8      	ldr	r0, [r7, #24]
10006560:	f7fe fdf4 	bl	1000514c <pxPortInitialiseStack>
10006564:	4602      	mov	r2, r0
10006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006568:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
1000656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000656c:	2b00      	cmp	r3, #0
1000656e:	d002      	beq.n	10006576 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
10006570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10006574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
10006576:	bf00      	nop
10006578:	3720      	adds	r7, #32
1000657a:	46bd      	mov	sp, r7
1000657c:	bd80      	pop	{r7, pc}
	...

10006580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
10006580:	b580      	push	{r7, lr}
10006582:	b082      	sub	sp, #8
10006584:	af00      	add	r7, sp, #0
10006586:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
10006588:	f7fe ff0e 	bl	100053a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
1000658c:	4b2d      	ldr	r3, [pc, #180]	@ (10006644 <prvAddNewTaskToReadyList+0xc4>)
1000658e:	681b      	ldr	r3, [r3, #0]
10006590:	3301      	adds	r3, #1
10006592:	4a2c      	ldr	r2, [pc, #176]	@ (10006644 <prvAddNewTaskToReadyList+0xc4>)
10006594:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
10006596:	4b2c      	ldr	r3, [pc, #176]	@ (10006648 <prvAddNewTaskToReadyList+0xc8>)
10006598:	681b      	ldr	r3, [r3, #0]
1000659a:	2b00      	cmp	r3, #0
1000659c:	d109      	bne.n	100065b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
1000659e:	4a2a      	ldr	r2, [pc, #168]	@ (10006648 <prvAddNewTaskToReadyList+0xc8>)
100065a0:	687b      	ldr	r3, [r7, #4]
100065a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
100065a4:	4b27      	ldr	r3, [pc, #156]	@ (10006644 <prvAddNewTaskToReadyList+0xc4>)
100065a6:	681b      	ldr	r3, [r3, #0]
100065a8:	2b01      	cmp	r3, #1
100065aa:	d110      	bne.n	100065ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
100065ac:	f000 fc1e 	bl	10006dec <prvInitialiseTaskLists>
100065b0:	e00d      	b.n	100065ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
100065b2:	4b26      	ldr	r3, [pc, #152]	@ (1000664c <prvAddNewTaskToReadyList+0xcc>)
100065b4:	681b      	ldr	r3, [r3, #0]
100065b6:	2b00      	cmp	r3, #0
100065b8:	d109      	bne.n	100065ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
100065ba:	4b23      	ldr	r3, [pc, #140]	@ (10006648 <prvAddNewTaskToReadyList+0xc8>)
100065bc:	681b      	ldr	r3, [r3, #0]
100065be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100065c0:	687b      	ldr	r3, [r7, #4]
100065c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100065c4:	429a      	cmp	r2, r3
100065c6:	d802      	bhi.n	100065ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
100065c8:	4a1f      	ldr	r2, [pc, #124]	@ (10006648 <prvAddNewTaskToReadyList+0xc8>)
100065ca:	687b      	ldr	r3, [r7, #4]
100065cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
100065ce:	4b20      	ldr	r3, [pc, #128]	@ (10006650 <prvAddNewTaskToReadyList+0xd0>)
100065d0:	681b      	ldr	r3, [r3, #0]
100065d2:	3301      	adds	r3, #1
100065d4:	4a1e      	ldr	r2, [pc, #120]	@ (10006650 <prvAddNewTaskToReadyList+0xd0>)
100065d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
100065d8:	4b1d      	ldr	r3, [pc, #116]	@ (10006650 <prvAddNewTaskToReadyList+0xd0>)
100065da:	681a      	ldr	r2, [r3, #0]
100065dc:	687b      	ldr	r3, [r7, #4]
100065de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
100065e0:	687b      	ldr	r3, [r7, #4]
100065e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100065e4:	4b1b      	ldr	r3, [pc, #108]	@ (10006654 <prvAddNewTaskToReadyList+0xd4>)
100065e6:	681b      	ldr	r3, [r3, #0]
100065e8:	429a      	cmp	r2, r3
100065ea:	d903      	bls.n	100065f4 <prvAddNewTaskToReadyList+0x74>
100065ec:	687b      	ldr	r3, [r7, #4]
100065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100065f0:	4a18      	ldr	r2, [pc, #96]	@ (10006654 <prvAddNewTaskToReadyList+0xd4>)
100065f2:	6013      	str	r3, [r2, #0]
100065f4:	687b      	ldr	r3, [r7, #4]
100065f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100065f8:	4613      	mov	r3, r2
100065fa:	009b      	lsls	r3, r3, #2
100065fc:	4413      	add	r3, r2
100065fe:	009b      	lsls	r3, r3, #2
10006600:	4a15      	ldr	r2, [pc, #84]	@ (10006658 <prvAddNewTaskToReadyList+0xd8>)
10006602:	441a      	add	r2, r3
10006604:	687b      	ldr	r3, [r7, #4]
10006606:	3304      	adds	r3, #4
10006608:	4619      	mov	r1, r3
1000660a:	4610      	mov	r0, r2
1000660c:	f7fe fd17 	bl	1000503e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
10006610:	f7fe fefc 	bl	1000540c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
10006614:	4b0d      	ldr	r3, [pc, #52]	@ (1000664c <prvAddNewTaskToReadyList+0xcc>)
10006616:	681b      	ldr	r3, [r3, #0]
10006618:	2b00      	cmp	r3, #0
1000661a:	d00e      	beq.n	1000663a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1000661c:	4b0a      	ldr	r3, [pc, #40]	@ (10006648 <prvAddNewTaskToReadyList+0xc8>)
1000661e:	681b      	ldr	r3, [r3, #0]
10006620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10006622:	687b      	ldr	r3, [r7, #4]
10006624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10006626:	429a      	cmp	r2, r3
10006628:	d207      	bcs.n	1000663a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
1000662a:	4b0c      	ldr	r3, [pc, #48]	@ (1000665c <prvAddNewTaskToReadyList+0xdc>)
1000662c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
10006630:	601a      	str	r2, [r3, #0]
10006632:	f3bf 8f4f 	dsb	sy
10006636:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1000663a:	bf00      	nop
1000663c:	3708      	adds	r7, #8
1000663e:	46bd      	mov	sp, r7
10006640:	bd80      	pop	{r7, pc}
10006642:	bf00      	nop
10006644:	10021a08 	.word	0x10021a08
10006648:	10021534 	.word	0x10021534
1000664c:	10021a14 	.word	0x10021a14
10006650:	10021a24 	.word	0x10021a24
10006654:	10021a10 	.word	0x10021a10
10006658:	10021538 	.word	0x10021538
1000665c:	e000ed04 	.word	0xe000ed04

10006660 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
10006660:	b580      	push	{r7, lr}
10006662:	b084      	sub	sp, #16
10006664:	af00      	add	r7, sp, #0
10006666:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
10006668:	2300      	movs	r3, #0
1000666a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
1000666c:	687b      	ldr	r3, [r7, #4]
1000666e:	2b00      	cmp	r3, #0
10006670:	d018      	beq.n	100066a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
10006672:	4b14      	ldr	r3, [pc, #80]	@ (100066c4 <vTaskDelay+0x64>)
10006674:	681b      	ldr	r3, [r3, #0]
10006676:	2b00      	cmp	r3, #0
10006678:	d00b      	beq.n	10006692 <vTaskDelay+0x32>
	__asm volatile
1000667a:	f04f 0350 	mov.w	r3, #80	@ 0x50
1000667e:	f383 8811 	msr	BASEPRI, r3
10006682:	f3bf 8f6f 	isb	sy
10006686:	f3bf 8f4f 	dsb	sy
1000668a:	60bb      	str	r3, [r7, #8]
}
1000668c:	bf00      	nop
1000668e:	bf00      	nop
10006690:	e7fd      	b.n	1000668e <vTaskDelay+0x2e>
			vTaskSuspendAll();
10006692:	f000 f883 	bl	1000679c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
10006696:	2100      	movs	r1, #0
10006698:	6878      	ldr	r0, [r7, #4]
1000669a:	f000 fdf3 	bl	10007284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
1000669e:	f000 f88b 	bl	100067b8 <xTaskResumeAll>
100066a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
100066a4:	68fb      	ldr	r3, [r7, #12]
100066a6:	2b00      	cmp	r3, #0
100066a8:	d107      	bne.n	100066ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
100066aa:	4b07      	ldr	r3, [pc, #28]	@ (100066c8 <vTaskDelay+0x68>)
100066ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
100066b0:	601a      	str	r2, [r3, #0]
100066b2:	f3bf 8f4f 	dsb	sy
100066b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
100066ba:	bf00      	nop
100066bc:	3710      	adds	r7, #16
100066be:	46bd      	mov	sp, r7
100066c0:	bd80      	pop	{r7, pc}
100066c2:	bf00      	nop
100066c4:	10021a30 	.word	0x10021a30
100066c8:	e000ed04 	.word	0xe000ed04

100066cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
100066cc:	b580      	push	{r7, lr}
100066ce:	b08a      	sub	sp, #40	@ 0x28
100066d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
100066d2:	2300      	movs	r3, #0
100066d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
100066d6:	2300      	movs	r3, #0
100066d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
100066da:	463a      	mov	r2, r7
100066dc:	1d39      	adds	r1, r7, #4
100066de:	f107 0308 	add.w	r3, r7, #8
100066e2:	4618      	mov	r0, r3
100066e4:	f7fe fa6a 	bl	10004bbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
100066e8:	6839      	ldr	r1, [r7, #0]
100066ea:	687b      	ldr	r3, [r7, #4]
100066ec:	68ba      	ldr	r2, [r7, #8]
100066ee:	9202      	str	r2, [sp, #8]
100066f0:	9301      	str	r3, [sp, #4]
100066f2:	2300      	movs	r3, #0
100066f4:	9300      	str	r3, [sp, #0]
100066f6:	2300      	movs	r3, #0
100066f8:	460a      	mov	r2, r1
100066fa:	4922      	ldr	r1, [pc, #136]	@ (10006784 <vTaskStartScheduler+0xb8>)
100066fc:	4822      	ldr	r0, [pc, #136]	@ (10006788 <vTaskStartScheduler+0xbc>)
100066fe:	f7ff fe09 	bl	10006314 <xTaskCreateStatic>
10006702:	4603      	mov	r3, r0
10006704:	4a21      	ldr	r2, [pc, #132]	@ (1000678c <vTaskStartScheduler+0xc0>)
10006706:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
10006708:	4b20      	ldr	r3, [pc, #128]	@ (1000678c <vTaskStartScheduler+0xc0>)
1000670a:	681b      	ldr	r3, [r3, #0]
1000670c:	2b00      	cmp	r3, #0
1000670e:	d002      	beq.n	10006716 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
10006710:	2301      	movs	r3, #1
10006712:	617b      	str	r3, [r7, #20]
10006714:	e001      	b.n	1000671a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
10006716:	2300      	movs	r3, #0
10006718:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
1000671a:	697b      	ldr	r3, [r7, #20]
1000671c:	2b01      	cmp	r3, #1
1000671e:	d102      	bne.n	10006726 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
10006720:	f000 fe04 	bl	1000732c <xTimerCreateTimerTask>
10006724:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
10006726:	697b      	ldr	r3, [r7, #20]
10006728:	2b01      	cmp	r3, #1
1000672a:	d116      	bne.n	1000675a <vTaskStartScheduler+0x8e>
	__asm volatile
1000672c:	f04f 0350 	mov.w	r3, #80	@ 0x50
10006730:	f383 8811 	msr	BASEPRI, r3
10006734:	f3bf 8f6f 	isb	sy
10006738:	f3bf 8f4f 	dsb	sy
1000673c:	613b      	str	r3, [r7, #16]
}
1000673e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
10006740:	4b13      	ldr	r3, [pc, #76]	@ (10006790 <vTaskStartScheduler+0xc4>)
10006742:	f04f 32ff 	mov.w	r2, #4294967295
10006746:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
10006748:	4b12      	ldr	r3, [pc, #72]	@ (10006794 <vTaskStartScheduler+0xc8>)
1000674a:	2201      	movs	r2, #1
1000674c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
1000674e:	4b12      	ldr	r3, [pc, #72]	@ (10006798 <vTaskStartScheduler+0xcc>)
10006750:	2200      	movs	r2, #0
10006752:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
10006754:	f7fe fd84 	bl	10005260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
10006758:	e00f      	b.n	1000677a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1000675a:	697b      	ldr	r3, [r7, #20]
1000675c:	f1b3 3fff 	cmp.w	r3, #4294967295
10006760:	d10b      	bne.n	1000677a <vTaskStartScheduler+0xae>
	__asm volatile
10006762:	f04f 0350 	mov.w	r3, #80	@ 0x50
10006766:	f383 8811 	msr	BASEPRI, r3
1000676a:	f3bf 8f6f 	isb	sy
1000676e:	f3bf 8f4f 	dsb	sy
10006772:	60fb      	str	r3, [r7, #12]
}
10006774:	bf00      	nop
10006776:	bf00      	nop
10006778:	e7fd      	b.n	10006776 <vTaskStartScheduler+0xaa>
}
1000677a:	bf00      	nop
1000677c:	3718      	adds	r7, #24
1000677e:	46bd      	mov	sp, r7
10006780:	bd80      	pop	{r7, pc}
10006782:	bf00      	nop
10006784:	1000accc 	.word	0x1000accc
10006788:	10006dbd 	.word	0x10006dbd
1000678c:	10021a2c 	.word	0x10021a2c
10006790:	10021a28 	.word	0x10021a28
10006794:	10021a14 	.word	0x10021a14
10006798:	10021a0c 	.word	0x10021a0c

1000679c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
1000679c:	b480      	push	{r7}
1000679e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
100067a0:	4b04      	ldr	r3, [pc, #16]	@ (100067b4 <vTaskSuspendAll+0x18>)
100067a2:	681b      	ldr	r3, [r3, #0]
100067a4:	3301      	adds	r3, #1
100067a6:	4a03      	ldr	r2, [pc, #12]	@ (100067b4 <vTaskSuspendAll+0x18>)
100067a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
100067aa:	bf00      	nop
100067ac:	46bd      	mov	sp, r7
100067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
100067b2:	4770      	bx	lr
100067b4:	10021a30 	.word	0x10021a30

100067b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
100067b8:	b580      	push	{r7, lr}
100067ba:	b084      	sub	sp, #16
100067bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
100067be:	2300      	movs	r3, #0
100067c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
100067c2:	2300      	movs	r3, #0
100067c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
100067c6:	4b42      	ldr	r3, [pc, #264]	@ (100068d0 <xTaskResumeAll+0x118>)
100067c8:	681b      	ldr	r3, [r3, #0]
100067ca:	2b00      	cmp	r3, #0
100067cc:	d10b      	bne.n	100067e6 <xTaskResumeAll+0x2e>
	__asm volatile
100067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
100067d2:	f383 8811 	msr	BASEPRI, r3
100067d6:	f3bf 8f6f 	isb	sy
100067da:	f3bf 8f4f 	dsb	sy
100067de:	603b      	str	r3, [r7, #0]
}
100067e0:	bf00      	nop
100067e2:	bf00      	nop
100067e4:	e7fd      	b.n	100067e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
100067e6:	f7fe fddf 	bl	100053a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
100067ea:	4b39      	ldr	r3, [pc, #228]	@ (100068d0 <xTaskResumeAll+0x118>)
100067ec:	681b      	ldr	r3, [r3, #0]
100067ee:	3b01      	subs	r3, #1
100067f0:	4a37      	ldr	r2, [pc, #220]	@ (100068d0 <xTaskResumeAll+0x118>)
100067f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
100067f4:	4b36      	ldr	r3, [pc, #216]	@ (100068d0 <xTaskResumeAll+0x118>)
100067f6:	681b      	ldr	r3, [r3, #0]
100067f8:	2b00      	cmp	r3, #0
100067fa:	d162      	bne.n	100068c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
100067fc:	4b35      	ldr	r3, [pc, #212]	@ (100068d4 <xTaskResumeAll+0x11c>)
100067fe:	681b      	ldr	r3, [r3, #0]
10006800:	2b00      	cmp	r3, #0
10006802:	d05e      	beq.n	100068c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
10006804:	e02f      	b.n	10006866 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10006806:	4b34      	ldr	r3, [pc, #208]	@ (100068d8 <xTaskResumeAll+0x120>)
10006808:	68db      	ldr	r3, [r3, #12]
1000680a:	68db      	ldr	r3, [r3, #12]
1000680c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1000680e:	68fb      	ldr	r3, [r7, #12]
10006810:	3318      	adds	r3, #24
10006812:	4618      	mov	r0, r3
10006814:	f7fe fc70 	bl	100050f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
10006818:	68fb      	ldr	r3, [r7, #12]
1000681a:	3304      	adds	r3, #4
1000681c:	4618      	mov	r0, r3
1000681e:	f7fe fc6b 	bl	100050f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
10006822:	68fb      	ldr	r3, [r7, #12]
10006824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10006826:	4b2d      	ldr	r3, [pc, #180]	@ (100068dc <xTaskResumeAll+0x124>)
10006828:	681b      	ldr	r3, [r3, #0]
1000682a:	429a      	cmp	r2, r3
1000682c:	d903      	bls.n	10006836 <xTaskResumeAll+0x7e>
1000682e:	68fb      	ldr	r3, [r7, #12]
10006830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10006832:	4a2a      	ldr	r2, [pc, #168]	@ (100068dc <xTaskResumeAll+0x124>)
10006834:	6013      	str	r3, [r2, #0]
10006836:	68fb      	ldr	r3, [r7, #12]
10006838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1000683a:	4613      	mov	r3, r2
1000683c:	009b      	lsls	r3, r3, #2
1000683e:	4413      	add	r3, r2
10006840:	009b      	lsls	r3, r3, #2
10006842:	4a27      	ldr	r2, [pc, #156]	@ (100068e0 <xTaskResumeAll+0x128>)
10006844:	441a      	add	r2, r3
10006846:	68fb      	ldr	r3, [r7, #12]
10006848:	3304      	adds	r3, #4
1000684a:	4619      	mov	r1, r3
1000684c:	4610      	mov	r0, r2
1000684e:	f7fe fbf6 	bl	1000503e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
10006852:	68fb      	ldr	r3, [r7, #12]
10006854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10006856:	4b23      	ldr	r3, [pc, #140]	@ (100068e4 <xTaskResumeAll+0x12c>)
10006858:	681b      	ldr	r3, [r3, #0]
1000685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000685c:	429a      	cmp	r2, r3
1000685e:	d302      	bcc.n	10006866 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
10006860:	4b21      	ldr	r3, [pc, #132]	@ (100068e8 <xTaskResumeAll+0x130>)
10006862:	2201      	movs	r2, #1
10006864:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
10006866:	4b1c      	ldr	r3, [pc, #112]	@ (100068d8 <xTaskResumeAll+0x120>)
10006868:	681b      	ldr	r3, [r3, #0]
1000686a:	2b00      	cmp	r3, #0
1000686c:	d1cb      	bne.n	10006806 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
1000686e:	68fb      	ldr	r3, [r7, #12]
10006870:	2b00      	cmp	r3, #0
10006872:	d001      	beq.n	10006878 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
10006874:	f000 fb58 	bl	10006f28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
10006878:	4b1c      	ldr	r3, [pc, #112]	@ (100068ec <xTaskResumeAll+0x134>)
1000687a:	681b      	ldr	r3, [r3, #0]
1000687c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
1000687e:	687b      	ldr	r3, [r7, #4]
10006880:	2b00      	cmp	r3, #0
10006882:	d010      	beq.n	100068a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
10006884:	f000 f846 	bl	10006914 <xTaskIncrementTick>
10006888:	4603      	mov	r3, r0
1000688a:	2b00      	cmp	r3, #0
1000688c:	d002      	beq.n	10006894 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
1000688e:	4b16      	ldr	r3, [pc, #88]	@ (100068e8 <xTaskResumeAll+0x130>)
10006890:	2201      	movs	r2, #1
10006892:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
10006894:	687b      	ldr	r3, [r7, #4]
10006896:	3b01      	subs	r3, #1
10006898:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1000689a:	687b      	ldr	r3, [r7, #4]
1000689c:	2b00      	cmp	r3, #0
1000689e:	d1f1      	bne.n	10006884 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
100068a0:	4b12      	ldr	r3, [pc, #72]	@ (100068ec <xTaskResumeAll+0x134>)
100068a2:	2200      	movs	r2, #0
100068a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
100068a6:	4b10      	ldr	r3, [pc, #64]	@ (100068e8 <xTaskResumeAll+0x130>)
100068a8:	681b      	ldr	r3, [r3, #0]
100068aa:	2b00      	cmp	r3, #0
100068ac:	d009      	beq.n	100068c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
100068ae:	2301      	movs	r3, #1
100068b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
100068b2:	4b0f      	ldr	r3, [pc, #60]	@ (100068f0 <xTaskResumeAll+0x138>)
100068b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
100068b8:	601a      	str	r2, [r3, #0]
100068ba:	f3bf 8f4f 	dsb	sy
100068be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
100068c2:	f7fe fda3 	bl	1000540c <vPortExitCritical>

	return xAlreadyYielded;
100068c6:	68bb      	ldr	r3, [r7, #8]
}
100068c8:	4618      	mov	r0, r3
100068ca:	3710      	adds	r7, #16
100068cc:	46bd      	mov	sp, r7
100068ce:	bd80      	pop	{r7, pc}
100068d0:	10021a30 	.word	0x10021a30
100068d4:	10021a08 	.word	0x10021a08
100068d8:	100219c8 	.word	0x100219c8
100068dc:	10021a10 	.word	0x10021a10
100068e0:	10021538 	.word	0x10021538
100068e4:	10021534 	.word	0x10021534
100068e8:	10021a1c 	.word	0x10021a1c
100068ec:	10021a18 	.word	0x10021a18
100068f0:	e000ed04 	.word	0xe000ed04

100068f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
100068f4:	b480      	push	{r7}
100068f6:	b083      	sub	sp, #12
100068f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
100068fa:	4b05      	ldr	r3, [pc, #20]	@ (10006910 <xTaskGetTickCount+0x1c>)
100068fc:	681b      	ldr	r3, [r3, #0]
100068fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
10006900:	687b      	ldr	r3, [r7, #4]
}
10006902:	4618      	mov	r0, r3
10006904:	370c      	adds	r7, #12
10006906:	46bd      	mov	sp, r7
10006908:	f85d 7b04 	ldr.w	r7, [sp], #4
1000690c:	4770      	bx	lr
1000690e:	bf00      	nop
10006910:	10021a0c 	.word	0x10021a0c

10006914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
10006914:	b580      	push	{r7, lr}
10006916:	b086      	sub	sp, #24
10006918:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1000691a:	2300      	movs	r3, #0
1000691c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1000691e:	4b4f      	ldr	r3, [pc, #316]	@ (10006a5c <xTaskIncrementTick+0x148>)
10006920:	681b      	ldr	r3, [r3, #0]
10006922:	2b00      	cmp	r3, #0
10006924:	f040 808a 	bne.w	10006a3c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
10006928:	4b4d      	ldr	r3, [pc, #308]	@ (10006a60 <xTaskIncrementTick+0x14c>)
1000692a:	681b      	ldr	r3, [r3, #0]
1000692c:	3301      	adds	r3, #1
1000692e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
10006930:	4a4b      	ldr	r2, [pc, #300]	@ (10006a60 <xTaskIncrementTick+0x14c>)
10006932:	693b      	ldr	r3, [r7, #16]
10006934:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
10006936:	693b      	ldr	r3, [r7, #16]
10006938:	2b00      	cmp	r3, #0
1000693a:	d121      	bne.n	10006980 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
1000693c:	4b49      	ldr	r3, [pc, #292]	@ (10006a64 <xTaskIncrementTick+0x150>)
1000693e:	681b      	ldr	r3, [r3, #0]
10006940:	681b      	ldr	r3, [r3, #0]
10006942:	2b00      	cmp	r3, #0
10006944:	d00b      	beq.n	1000695e <xTaskIncrementTick+0x4a>
	__asm volatile
10006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
1000694a:	f383 8811 	msr	BASEPRI, r3
1000694e:	f3bf 8f6f 	isb	sy
10006952:	f3bf 8f4f 	dsb	sy
10006956:	603b      	str	r3, [r7, #0]
}
10006958:	bf00      	nop
1000695a:	bf00      	nop
1000695c:	e7fd      	b.n	1000695a <xTaskIncrementTick+0x46>
1000695e:	4b41      	ldr	r3, [pc, #260]	@ (10006a64 <xTaskIncrementTick+0x150>)
10006960:	681b      	ldr	r3, [r3, #0]
10006962:	60fb      	str	r3, [r7, #12]
10006964:	4b40      	ldr	r3, [pc, #256]	@ (10006a68 <xTaskIncrementTick+0x154>)
10006966:	681b      	ldr	r3, [r3, #0]
10006968:	4a3e      	ldr	r2, [pc, #248]	@ (10006a64 <xTaskIncrementTick+0x150>)
1000696a:	6013      	str	r3, [r2, #0]
1000696c:	4a3e      	ldr	r2, [pc, #248]	@ (10006a68 <xTaskIncrementTick+0x154>)
1000696e:	68fb      	ldr	r3, [r7, #12]
10006970:	6013      	str	r3, [r2, #0]
10006972:	4b3e      	ldr	r3, [pc, #248]	@ (10006a6c <xTaskIncrementTick+0x158>)
10006974:	681b      	ldr	r3, [r3, #0]
10006976:	3301      	adds	r3, #1
10006978:	4a3c      	ldr	r2, [pc, #240]	@ (10006a6c <xTaskIncrementTick+0x158>)
1000697a:	6013      	str	r3, [r2, #0]
1000697c:	f000 fad4 	bl	10006f28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
10006980:	4b3b      	ldr	r3, [pc, #236]	@ (10006a70 <xTaskIncrementTick+0x15c>)
10006982:	681b      	ldr	r3, [r3, #0]
10006984:	693a      	ldr	r2, [r7, #16]
10006986:	429a      	cmp	r2, r3
10006988:	d349      	bcc.n	10006a1e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1000698a:	4b36      	ldr	r3, [pc, #216]	@ (10006a64 <xTaskIncrementTick+0x150>)
1000698c:	681b      	ldr	r3, [r3, #0]
1000698e:	681b      	ldr	r3, [r3, #0]
10006990:	2b00      	cmp	r3, #0
10006992:	d104      	bne.n	1000699e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10006994:	4b36      	ldr	r3, [pc, #216]	@ (10006a70 <xTaskIncrementTick+0x15c>)
10006996:	f04f 32ff 	mov.w	r2, #4294967295
1000699a:	601a      	str	r2, [r3, #0]
					break;
1000699c:	e03f      	b.n	10006a1e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1000699e:	4b31      	ldr	r3, [pc, #196]	@ (10006a64 <xTaskIncrementTick+0x150>)
100069a0:	681b      	ldr	r3, [r3, #0]
100069a2:	68db      	ldr	r3, [r3, #12]
100069a4:	68db      	ldr	r3, [r3, #12]
100069a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
100069a8:	68bb      	ldr	r3, [r7, #8]
100069aa:	685b      	ldr	r3, [r3, #4]
100069ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
100069ae:	693a      	ldr	r2, [r7, #16]
100069b0:	687b      	ldr	r3, [r7, #4]
100069b2:	429a      	cmp	r2, r3
100069b4:	d203      	bcs.n	100069be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
100069b6:	4a2e      	ldr	r2, [pc, #184]	@ (10006a70 <xTaskIncrementTick+0x15c>)
100069b8:	687b      	ldr	r3, [r7, #4]
100069ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
100069bc:	e02f      	b.n	10006a1e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
100069be:	68bb      	ldr	r3, [r7, #8]
100069c0:	3304      	adds	r3, #4
100069c2:	4618      	mov	r0, r3
100069c4:	f7fe fb98 	bl	100050f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
100069c8:	68bb      	ldr	r3, [r7, #8]
100069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100069cc:	2b00      	cmp	r3, #0
100069ce:	d004      	beq.n	100069da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
100069d0:	68bb      	ldr	r3, [r7, #8]
100069d2:	3318      	adds	r3, #24
100069d4:	4618      	mov	r0, r3
100069d6:	f7fe fb8f 	bl	100050f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
100069da:	68bb      	ldr	r3, [r7, #8]
100069dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100069de:	4b25      	ldr	r3, [pc, #148]	@ (10006a74 <xTaskIncrementTick+0x160>)
100069e0:	681b      	ldr	r3, [r3, #0]
100069e2:	429a      	cmp	r2, r3
100069e4:	d903      	bls.n	100069ee <xTaskIncrementTick+0xda>
100069e6:	68bb      	ldr	r3, [r7, #8]
100069e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100069ea:	4a22      	ldr	r2, [pc, #136]	@ (10006a74 <xTaskIncrementTick+0x160>)
100069ec:	6013      	str	r3, [r2, #0]
100069ee:	68bb      	ldr	r3, [r7, #8]
100069f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100069f2:	4613      	mov	r3, r2
100069f4:	009b      	lsls	r3, r3, #2
100069f6:	4413      	add	r3, r2
100069f8:	009b      	lsls	r3, r3, #2
100069fa:	4a1f      	ldr	r2, [pc, #124]	@ (10006a78 <xTaskIncrementTick+0x164>)
100069fc:	441a      	add	r2, r3
100069fe:	68bb      	ldr	r3, [r7, #8]
10006a00:	3304      	adds	r3, #4
10006a02:	4619      	mov	r1, r3
10006a04:	4610      	mov	r0, r2
10006a06:	f7fe fb1a 	bl	1000503e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
10006a0a:	68bb      	ldr	r3, [r7, #8]
10006a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10006a0e:	4b1b      	ldr	r3, [pc, #108]	@ (10006a7c <xTaskIncrementTick+0x168>)
10006a10:	681b      	ldr	r3, [r3, #0]
10006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10006a14:	429a      	cmp	r2, r3
10006a16:	d3b8      	bcc.n	1000698a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
10006a18:	2301      	movs	r3, #1
10006a1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
10006a1c:	e7b5      	b.n	1000698a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
10006a1e:	4b17      	ldr	r3, [pc, #92]	@ (10006a7c <xTaskIncrementTick+0x168>)
10006a20:	681b      	ldr	r3, [r3, #0]
10006a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10006a24:	4914      	ldr	r1, [pc, #80]	@ (10006a78 <xTaskIncrementTick+0x164>)
10006a26:	4613      	mov	r3, r2
10006a28:	009b      	lsls	r3, r3, #2
10006a2a:	4413      	add	r3, r2
10006a2c:	009b      	lsls	r3, r3, #2
10006a2e:	440b      	add	r3, r1
10006a30:	681b      	ldr	r3, [r3, #0]
10006a32:	2b01      	cmp	r3, #1
10006a34:	d907      	bls.n	10006a46 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
10006a36:	2301      	movs	r3, #1
10006a38:	617b      	str	r3, [r7, #20]
10006a3a:	e004      	b.n	10006a46 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
10006a3c:	4b10      	ldr	r3, [pc, #64]	@ (10006a80 <xTaskIncrementTick+0x16c>)
10006a3e:	681b      	ldr	r3, [r3, #0]
10006a40:	3301      	adds	r3, #1
10006a42:	4a0f      	ldr	r2, [pc, #60]	@ (10006a80 <xTaskIncrementTick+0x16c>)
10006a44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
10006a46:	4b0f      	ldr	r3, [pc, #60]	@ (10006a84 <xTaskIncrementTick+0x170>)
10006a48:	681b      	ldr	r3, [r3, #0]
10006a4a:	2b00      	cmp	r3, #0
10006a4c:	d001      	beq.n	10006a52 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
10006a4e:	2301      	movs	r3, #1
10006a50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
10006a52:	697b      	ldr	r3, [r7, #20]
}
10006a54:	4618      	mov	r0, r3
10006a56:	3718      	adds	r7, #24
10006a58:	46bd      	mov	sp, r7
10006a5a:	bd80      	pop	{r7, pc}
10006a5c:	10021a30 	.word	0x10021a30
10006a60:	10021a0c 	.word	0x10021a0c
10006a64:	100219c0 	.word	0x100219c0
10006a68:	100219c4 	.word	0x100219c4
10006a6c:	10021a20 	.word	0x10021a20
10006a70:	10021a28 	.word	0x10021a28
10006a74:	10021a10 	.word	0x10021a10
10006a78:	10021538 	.word	0x10021538
10006a7c:	10021534 	.word	0x10021534
10006a80:	10021a18 	.word	0x10021a18
10006a84:	10021a1c 	.word	0x10021a1c

10006a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
10006a88:	b480      	push	{r7}
10006a8a:	b085      	sub	sp, #20
10006a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
10006a8e:	4b28      	ldr	r3, [pc, #160]	@ (10006b30 <vTaskSwitchContext+0xa8>)
10006a90:	681b      	ldr	r3, [r3, #0]
10006a92:	2b00      	cmp	r3, #0
10006a94:	d003      	beq.n	10006a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
10006a96:	4b27      	ldr	r3, [pc, #156]	@ (10006b34 <vTaskSwitchContext+0xac>)
10006a98:	2201      	movs	r2, #1
10006a9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
10006a9c:	e042      	b.n	10006b24 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
10006a9e:	4b25      	ldr	r3, [pc, #148]	@ (10006b34 <vTaskSwitchContext+0xac>)
10006aa0:	2200      	movs	r2, #0
10006aa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10006aa4:	4b24      	ldr	r3, [pc, #144]	@ (10006b38 <vTaskSwitchContext+0xb0>)
10006aa6:	681b      	ldr	r3, [r3, #0]
10006aa8:	60fb      	str	r3, [r7, #12]
10006aaa:	e011      	b.n	10006ad0 <vTaskSwitchContext+0x48>
10006aac:	68fb      	ldr	r3, [r7, #12]
10006aae:	2b00      	cmp	r3, #0
10006ab0:	d10b      	bne.n	10006aca <vTaskSwitchContext+0x42>
	__asm volatile
10006ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
10006ab6:	f383 8811 	msr	BASEPRI, r3
10006aba:	f3bf 8f6f 	isb	sy
10006abe:	f3bf 8f4f 	dsb	sy
10006ac2:	607b      	str	r3, [r7, #4]
}
10006ac4:	bf00      	nop
10006ac6:	bf00      	nop
10006ac8:	e7fd      	b.n	10006ac6 <vTaskSwitchContext+0x3e>
10006aca:	68fb      	ldr	r3, [r7, #12]
10006acc:	3b01      	subs	r3, #1
10006ace:	60fb      	str	r3, [r7, #12]
10006ad0:	491a      	ldr	r1, [pc, #104]	@ (10006b3c <vTaskSwitchContext+0xb4>)
10006ad2:	68fa      	ldr	r2, [r7, #12]
10006ad4:	4613      	mov	r3, r2
10006ad6:	009b      	lsls	r3, r3, #2
10006ad8:	4413      	add	r3, r2
10006ada:	009b      	lsls	r3, r3, #2
10006adc:	440b      	add	r3, r1
10006ade:	681b      	ldr	r3, [r3, #0]
10006ae0:	2b00      	cmp	r3, #0
10006ae2:	d0e3      	beq.n	10006aac <vTaskSwitchContext+0x24>
10006ae4:	68fa      	ldr	r2, [r7, #12]
10006ae6:	4613      	mov	r3, r2
10006ae8:	009b      	lsls	r3, r3, #2
10006aea:	4413      	add	r3, r2
10006aec:	009b      	lsls	r3, r3, #2
10006aee:	4a13      	ldr	r2, [pc, #76]	@ (10006b3c <vTaskSwitchContext+0xb4>)
10006af0:	4413      	add	r3, r2
10006af2:	60bb      	str	r3, [r7, #8]
10006af4:	68bb      	ldr	r3, [r7, #8]
10006af6:	685b      	ldr	r3, [r3, #4]
10006af8:	685a      	ldr	r2, [r3, #4]
10006afa:	68bb      	ldr	r3, [r7, #8]
10006afc:	605a      	str	r2, [r3, #4]
10006afe:	68bb      	ldr	r3, [r7, #8]
10006b00:	685a      	ldr	r2, [r3, #4]
10006b02:	68bb      	ldr	r3, [r7, #8]
10006b04:	3308      	adds	r3, #8
10006b06:	429a      	cmp	r2, r3
10006b08:	d104      	bne.n	10006b14 <vTaskSwitchContext+0x8c>
10006b0a:	68bb      	ldr	r3, [r7, #8]
10006b0c:	685b      	ldr	r3, [r3, #4]
10006b0e:	685a      	ldr	r2, [r3, #4]
10006b10:	68bb      	ldr	r3, [r7, #8]
10006b12:	605a      	str	r2, [r3, #4]
10006b14:	68bb      	ldr	r3, [r7, #8]
10006b16:	685b      	ldr	r3, [r3, #4]
10006b18:	68db      	ldr	r3, [r3, #12]
10006b1a:	4a09      	ldr	r2, [pc, #36]	@ (10006b40 <vTaskSwitchContext+0xb8>)
10006b1c:	6013      	str	r3, [r2, #0]
10006b1e:	4a06      	ldr	r2, [pc, #24]	@ (10006b38 <vTaskSwitchContext+0xb0>)
10006b20:	68fb      	ldr	r3, [r7, #12]
10006b22:	6013      	str	r3, [r2, #0]
}
10006b24:	bf00      	nop
10006b26:	3714      	adds	r7, #20
10006b28:	46bd      	mov	sp, r7
10006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
10006b2e:	4770      	bx	lr
10006b30:	10021a30 	.word	0x10021a30
10006b34:	10021a1c 	.word	0x10021a1c
10006b38:	10021a10 	.word	0x10021a10
10006b3c:	10021538 	.word	0x10021538
10006b40:	10021534 	.word	0x10021534

10006b44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
10006b44:	b580      	push	{r7, lr}
10006b46:	b084      	sub	sp, #16
10006b48:	af00      	add	r7, sp, #0
10006b4a:	6078      	str	r0, [r7, #4]
10006b4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
10006b4e:	687b      	ldr	r3, [r7, #4]
10006b50:	2b00      	cmp	r3, #0
10006b52:	d10b      	bne.n	10006b6c <vTaskPlaceOnEventList+0x28>
	__asm volatile
10006b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
10006b58:	f383 8811 	msr	BASEPRI, r3
10006b5c:	f3bf 8f6f 	isb	sy
10006b60:	f3bf 8f4f 	dsb	sy
10006b64:	60fb      	str	r3, [r7, #12]
}
10006b66:	bf00      	nop
10006b68:	bf00      	nop
10006b6a:	e7fd      	b.n	10006b68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
10006b6c:	4b07      	ldr	r3, [pc, #28]	@ (10006b8c <vTaskPlaceOnEventList+0x48>)
10006b6e:	681b      	ldr	r3, [r3, #0]
10006b70:	3318      	adds	r3, #24
10006b72:	4619      	mov	r1, r3
10006b74:	6878      	ldr	r0, [r7, #4]
10006b76:	f7fe fa86 	bl	10005086 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
10006b7a:	2101      	movs	r1, #1
10006b7c:	6838      	ldr	r0, [r7, #0]
10006b7e:	f000 fb81 	bl	10007284 <prvAddCurrentTaskToDelayedList>
}
10006b82:	bf00      	nop
10006b84:	3710      	adds	r7, #16
10006b86:	46bd      	mov	sp, r7
10006b88:	bd80      	pop	{r7, pc}
10006b8a:	bf00      	nop
10006b8c:	10021534 	.word	0x10021534

10006b90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
10006b90:	b580      	push	{r7, lr}
10006b92:	b086      	sub	sp, #24
10006b94:	af00      	add	r7, sp, #0
10006b96:	60f8      	str	r0, [r7, #12]
10006b98:	60b9      	str	r1, [r7, #8]
10006b9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
10006b9c:	68fb      	ldr	r3, [r7, #12]
10006b9e:	2b00      	cmp	r3, #0
10006ba0:	d10b      	bne.n	10006bba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
10006ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
10006ba6:	f383 8811 	msr	BASEPRI, r3
10006baa:	f3bf 8f6f 	isb	sy
10006bae:	f3bf 8f4f 	dsb	sy
10006bb2:	617b      	str	r3, [r7, #20]
}
10006bb4:	bf00      	nop
10006bb6:	bf00      	nop
10006bb8:	e7fd      	b.n	10006bb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
10006bba:	4b0a      	ldr	r3, [pc, #40]	@ (10006be4 <vTaskPlaceOnEventListRestricted+0x54>)
10006bbc:	681b      	ldr	r3, [r3, #0]
10006bbe:	3318      	adds	r3, #24
10006bc0:	4619      	mov	r1, r3
10006bc2:	68f8      	ldr	r0, [r7, #12]
10006bc4:	f7fe fa3b 	bl	1000503e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
10006bc8:	687b      	ldr	r3, [r7, #4]
10006bca:	2b00      	cmp	r3, #0
10006bcc:	d002      	beq.n	10006bd4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
10006bce:	f04f 33ff 	mov.w	r3, #4294967295
10006bd2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
10006bd4:	6879      	ldr	r1, [r7, #4]
10006bd6:	68b8      	ldr	r0, [r7, #8]
10006bd8:	f000 fb54 	bl	10007284 <prvAddCurrentTaskToDelayedList>
	}
10006bdc:	bf00      	nop
10006bde:	3718      	adds	r7, #24
10006be0:	46bd      	mov	sp, r7
10006be2:	bd80      	pop	{r7, pc}
10006be4:	10021534 	.word	0x10021534

10006be8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
10006be8:	b580      	push	{r7, lr}
10006bea:	b086      	sub	sp, #24
10006bec:	af00      	add	r7, sp, #0
10006bee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10006bf0:	687b      	ldr	r3, [r7, #4]
10006bf2:	68db      	ldr	r3, [r3, #12]
10006bf4:	68db      	ldr	r3, [r3, #12]
10006bf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
10006bf8:	693b      	ldr	r3, [r7, #16]
10006bfa:	2b00      	cmp	r3, #0
10006bfc:	d10b      	bne.n	10006c16 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
10006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
10006c02:	f383 8811 	msr	BASEPRI, r3
10006c06:	f3bf 8f6f 	isb	sy
10006c0a:	f3bf 8f4f 	dsb	sy
10006c0e:	60fb      	str	r3, [r7, #12]
}
10006c10:	bf00      	nop
10006c12:	bf00      	nop
10006c14:	e7fd      	b.n	10006c12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
10006c16:	693b      	ldr	r3, [r7, #16]
10006c18:	3318      	adds	r3, #24
10006c1a:	4618      	mov	r0, r3
10006c1c:	f7fe fa6c 	bl	100050f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
10006c20:	4b1d      	ldr	r3, [pc, #116]	@ (10006c98 <xTaskRemoveFromEventList+0xb0>)
10006c22:	681b      	ldr	r3, [r3, #0]
10006c24:	2b00      	cmp	r3, #0
10006c26:	d11d      	bne.n	10006c64 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
10006c28:	693b      	ldr	r3, [r7, #16]
10006c2a:	3304      	adds	r3, #4
10006c2c:	4618      	mov	r0, r3
10006c2e:	f7fe fa63 	bl	100050f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
10006c32:	693b      	ldr	r3, [r7, #16]
10006c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10006c36:	4b19      	ldr	r3, [pc, #100]	@ (10006c9c <xTaskRemoveFromEventList+0xb4>)
10006c38:	681b      	ldr	r3, [r3, #0]
10006c3a:	429a      	cmp	r2, r3
10006c3c:	d903      	bls.n	10006c46 <xTaskRemoveFromEventList+0x5e>
10006c3e:	693b      	ldr	r3, [r7, #16]
10006c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10006c42:	4a16      	ldr	r2, [pc, #88]	@ (10006c9c <xTaskRemoveFromEventList+0xb4>)
10006c44:	6013      	str	r3, [r2, #0]
10006c46:	693b      	ldr	r3, [r7, #16]
10006c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10006c4a:	4613      	mov	r3, r2
10006c4c:	009b      	lsls	r3, r3, #2
10006c4e:	4413      	add	r3, r2
10006c50:	009b      	lsls	r3, r3, #2
10006c52:	4a13      	ldr	r2, [pc, #76]	@ (10006ca0 <xTaskRemoveFromEventList+0xb8>)
10006c54:	441a      	add	r2, r3
10006c56:	693b      	ldr	r3, [r7, #16]
10006c58:	3304      	adds	r3, #4
10006c5a:	4619      	mov	r1, r3
10006c5c:	4610      	mov	r0, r2
10006c5e:	f7fe f9ee 	bl	1000503e <vListInsertEnd>
10006c62:	e005      	b.n	10006c70 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
10006c64:	693b      	ldr	r3, [r7, #16]
10006c66:	3318      	adds	r3, #24
10006c68:	4619      	mov	r1, r3
10006c6a:	480e      	ldr	r0, [pc, #56]	@ (10006ca4 <xTaskRemoveFromEventList+0xbc>)
10006c6c:	f7fe f9e7 	bl	1000503e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
10006c70:	693b      	ldr	r3, [r7, #16]
10006c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10006c74:	4b0c      	ldr	r3, [pc, #48]	@ (10006ca8 <xTaskRemoveFromEventList+0xc0>)
10006c76:	681b      	ldr	r3, [r3, #0]
10006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10006c7a:	429a      	cmp	r2, r3
10006c7c:	d905      	bls.n	10006c8a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
10006c7e:	2301      	movs	r3, #1
10006c80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
10006c82:	4b0a      	ldr	r3, [pc, #40]	@ (10006cac <xTaskRemoveFromEventList+0xc4>)
10006c84:	2201      	movs	r2, #1
10006c86:	601a      	str	r2, [r3, #0]
10006c88:	e001      	b.n	10006c8e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
10006c8a:	2300      	movs	r3, #0
10006c8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
10006c8e:	697b      	ldr	r3, [r7, #20]
}
10006c90:	4618      	mov	r0, r3
10006c92:	3718      	adds	r7, #24
10006c94:	46bd      	mov	sp, r7
10006c96:	bd80      	pop	{r7, pc}
10006c98:	10021a30 	.word	0x10021a30
10006c9c:	10021a10 	.word	0x10021a10
10006ca0:	10021538 	.word	0x10021538
10006ca4:	100219c8 	.word	0x100219c8
10006ca8:	10021534 	.word	0x10021534
10006cac:	10021a1c 	.word	0x10021a1c

10006cb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
10006cb0:	b480      	push	{r7}
10006cb2:	b083      	sub	sp, #12
10006cb4:	af00      	add	r7, sp, #0
10006cb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
10006cb8:	4b06      	ldr	r3, [pc, #24]	@ (10006cd4 <vTaskInternalSetTimeOutState+0x24>)
10006cba:	681a      	ldr	r2, [r3, #0]
10006cbc:	687b      	ldr	r3, [r7, #4]
10006cbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
10006cc0:	4b05      	ldr	r3, [pc, #20]	@ (10006cd8 <vTaskInternalSetTimeOutState+0x28>)
10006cc2:	681a      	ldr	r2, [r3, #0]
10006cc4:	687b      	ldr	r3, [r7, #4]
10006cc6:	605a      	str	r2, [r3, #4]
}
10006cc8:	bf00      	nop
10006cca:	370c      	adds	r7, #12
10006ccc:	46bd      	mov	sp, r7
10006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
10006cd2:	4770      	bx	lr
10006cd4:	10021a20 	.word	0x10021a20
10006cd8:	10021a0c 	.word	0x10021a0c

10006cdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
10006cdc:	b580      	push	{r7, lr}
10006cde:	b088      	sub	sp, #32
10006ce0:	af00      	add	r7, sp, #0
10006ce2:	6078      	str	r0, [r7, #4]
10006ce4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
10006ce6:	687b      	ldr	r3, [r7, #4]
10006ce8:	2b00      	cmp	r3, #0
10006cea:	d10b      	bne.n	10006d04 <xTaskCheckForTimeOut+0x28>
	__asm volatile
10006cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
10006cf0:	f383 8811 	msr	BASEPRI, r3
10006cf4:	f3bf 8f6f 	isb	sy
10006cf8:	f3bf 8f4f 	dsb	sy
10006cfc:	613b      	str	r3, [r7, #16]
}
10006cfe:	bf00      	nop
10006d00:	bf00      	nop
10006d02:	e7fd      	b.n	10006d00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
10006d04:	683b      	ldr	r3, [r7, #0]
10006d06:	2b00      	cmp	r3, #0
10006d08:	d10b      	bne.n	10006d22 <xTaskCheckForTimeOut+0x46>
	__asm volatile
10006d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
10006d0e:	f383 8811 	msr	BASEPRI, r3
10006d12:	f3bf 8f6f 	isb	sy
10006d16:	f3bf 8f4f 	dsb	sy
10006d1a:	60fb      	str	r3, [r7, #12]
}
10006d1c:	bf00      	nop
10006d1e:	bf00      	nop
10006d20:	e7fd      	b.n	10006d1e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
10006d22:	f7fe fb41 	bl	100053a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
10006d26:	4b1d      	ldr	r3, [pc, #116]	@ (10006d9c <xTaskCheckForTimeOut+0xc0>)
10006d28:	681b      	ldr	r3, [r3, #0]
10006d2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
10006d2c:	687b      	ldr	r3, [r7, #4]
10006d2e:	685b      	ldr	r3, [r3, #4]
10006d30:	69ba      	ldr	r2, [r7, #24]
10006d32:	1ad3      	subs	r3, r2, r3
10006d34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
10006d36:	683b      	ldr	r3, [r7, #0]
10006d38:	681b      	ldr	r3, [r3, #0]
10006d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
10006d3e:	d102      	bne.n	10006d46 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
10006d40:	2300      	movs	r3, #0
10006d42:	61fb      	str	r3, [r7, #28]
10006d44:	e023      	b.n	10006d8e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
10006d46:	687b      	ldr	r3, [r7, #4]
10006d48:	681a      	ldr	r2, [r3, #0]
10006d4a:	4b15      	ldr	r3, [pc, #84]	@ (10006da0 <xTaskCheckForTimeOut+0xc4>)
10006d4c:	681b      	ldr	r3, [r3, #0]
10006d4e:	429a      	cmp	r2, r3
10006d50:	d007      	beq.n	10006d62 <xTaskCheckForTimeOut+0x86>
10006d52:	687b      	ldr	r3, [r7, #4]
10006d54:	685b      	ldr	r3, [r3, #4]
10006d56:	69ba      	ldr	r2, [r7, #24]
10006d58:	429a      	cmp	r2, r3
10006d5a:	d302      	bcc.n	10006d62 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
10006d5c:	2301      	movs	r3, #1
10006d5e:	61fb      	str	r3, [r7, #28]
10006d60:	e015      	b.n	10006d8e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
10006d62:	683b      	ldr	r3, [r7, #0]
10006d64:	681b      	ldr	r3, [r3, #0]
10006d66:	697a      	ldr	r2, [r7, #20]
10006d68:	429a      	cmp	r2, r3
10006d6a:	d20b      	bcs.n	10006d84 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
10006d6c:	683b      	ldr	r3, [r7, #0]
10006d6e:	681a      	ldr	r2, [r3, #0]
10006d70:	697b      	ldr	r3, [r7, #20]
10006d72:	1ad2      	subs	r2, r2, r3
10006d74:	683b      	ldr	r3, [r7, #0]
10006d76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
10006d78:	6878      	ldr	r0, [r7, #4]
10006d7a:	f7ff ff99 	bl	10006cb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
10006d7e:	2300      	movs	r3, #0
10006d80:	61fb      	str	r3, [r7, #28]
10006d82:	e004      	b.n	10006d8e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
10006d84:	683b      	ldr	r3, [r7, #0]
10006d86:	2200      	movs	r2, #0
10006d88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
10006d8a:	2301      	movs	r3, #1
10006d8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
10006d8e:	f7fe fb3d 	bl	1000540c <vPortExitCritical>

	return xReturn;
10006d92:	69fb      	ldr	r3, [r7, #28]
}
10006d94:	4618      	mov	r0, r3
10006d96:	3720      	adds	r7, #32
10006d98:	46bd      	mov	sp, r7
10006d9a:	bd80      	pop	{r7, pc}
10006d9c:	10021a0c 	.word	0x10021a0c
10006da0:	10021a20 	.word	0x10021a20

10006da4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
10006da4:	b480      	push	{r7}
10006da6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
10006da8:	4b03      	ldr	r3, [pc, #12]	@ (10006db8 <vTaskMissedYield+0x14>)
10006daa:	2201      	movs	r2, #1
10006dac:	601a      	str	r2, [r3, #0]
}
10006dae:	bf00      	nop
10006db0:	46bd      	mov	sp, r7
10006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
10006db6:	4770      	bx	lr
10006db8:	10021a1c 	.word	0x10021a1c

10006dbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
10006dbc:	b580      	push	{r7, lr}
10006dbe:	b082      	sub	sp, #8
10006dc0:	af00      	add	r7, sp, #0
10006dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
10006dc4:	f000 f852 	bl	10006e6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
10006dc8:	4b06      	ldr	r3, [pc, #24]	@ (10006de4 <prvIdleTask+0x28>)
10006dca:	681b      	ldr	r3, [r3, #0]
10006dcc:	2b01      	cmp	r3, #1
10006dce:	d9f9      	bls.n	10006dc4 <prvIdleTask+0x8>
			{
				taskYIELD();
10006dd0:	4b05      	ldr	r3, [pc, #20]	@ (10006de8 <prvIdleTask+0x2c>)
10006dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
10006dd6:	601a      	str	r2, [r3, #0]
10006dd8:	f3bf 8f4f 	dsb	sy
10006ddc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
10006de0:	e7f0      	b.n	10006dc4 <prvIdleTask+0x8>
10006de2:	bf00      	nop
10006de4:	10021538 	.word	0x10021538
10006de8:	e000ed04 	.word	0xe000ed04

10006dec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
10006dec:	b580      	push	{r7, lr}
10006dee:	b082      	sub	sp, #8
10006df0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
10006df2:	2300      	movs	r3, #0
10006df4:	607b      	str	r3, [r7, #4]
10006df6:	e00c      	b.n	10006e12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
10006df8:	687a      	ldr	r2, [r7, #4]
10006dfa:	4613      	mov	r3, r2
10006dfc:	009b      	lsls	r3, r3, #2
10006dfe:	4413      	add	r3, r2
10006e00:	009b      	lsls	r3, r3, #2
10006e02:	4a12      	ldr	r2, [pc, #72]	@ (10006e4c <prvInitialiseTaskLists+0x60>)
10006e04:	4413      	add	r3, r2
10006e06:	4618      	mov	r0, r3
10006e08:	f7fe f8ec 	bl	10004fe4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
10006e0c:	687b      	ldr	r3, [r7, #4]
10006e0e:	3301      	adds	r3, #1
10006e10:	607b      	str	r3, [r7, #4]
10006e12:	687b      	ldr	r3, [r7, #4]
10006e14:	2b37      	cmp	r3, #55	@ 0x37
10006e16:	d9ef      	bls.n	10006df8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
10006e18:	480d      	ldr	r0, [pc, #52]	@ (10006e50 <prvInitialiseTaskLists+0x64>)
10006e1a:	f7fe f8e3 	bl	10004fe4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
10006e1e:	480d      	ldr	r0, [pc, #52]	@ (10006e54 <prvInitialiseTaskLists+0x68>)
10006e20:	f7fe f8e0 	bl	10004fe4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
10006e24:	480c      	ldr	r0, [pc, #48]	@ (10006e58 <prvInitialiseTaskLists+0x6c>)
10006e26:	f7fe f8dd 	bl	10004fe4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
10006e2a:	480c      	ldr	r0, [pc, #48]	@ (10006e5c <prvInitialiseTaskLists+0x70>)
10006e2c:	f7fe f8da 	bl	10004fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
10006e30:	480b      	ldr	r0, [pc, #44]	@ (10006e60 <prvInitialiseTaskLists+0x74>)
10006e32:	f7fe f8d7 	bl	10004fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
10006e36:	4b0b      	ldr	r3, [pc, #44]	@ (10006e64 <prvInitialiseTaskLists+0x78>)
10006e38:	4a05      	ldr	r2, [pc, #20]	@ (10006e50 <prvInitialiseTaskLists+0x64>)
10006e3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
10006e3c:	4b0a      	ldr	r3, [pc, #40]	@ (10006e68 <prvInitialiseTaskLists+0x7c>)
10006e3e:	4a05      	ldr	r2, [pc, #20]	@ (10006e54 <prvInitialiseTaskLists+0x68>)
10006e40:	601a      	str	r2, [r3, #0]
}
10006e42:	bf00      	nop
10006e44:	3708      	adds	r7, #8
10006e46:	46bd      	mov	sp, r7
10006e48:	bd80      	pop	{r7, pc}
10006e4a:	bf00      	nop
10006e4c:	10021538 	.word	0x10021538
10006e50:	10021998 	.word	0x10021998
10006e54:	100219ac 	.word	0x100219ac
10006e58:	100219c8 	.word	0x100219c8
10006e5c:	100219dc 	.word	0x100219dc
10006e60:	100219f4 	.word	0x100219f4
10006e64:	100219c0 	.word	0x100219c0
10006e68:	100219c4 	.word	0x100219c4

10006e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
10006e6c:	b580      	push	{r7, lr}
10006e6e:	b082      	sub	sp, #8
10006e70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
10006e72:	e019      	b.n	10006ea8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
10006e74:	f7fe fa98 	bl	100053a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10006e78:	4b10      	ldr	r3, [pc, #64]	@ (10006ebc <prvCheckTasksWaitingTermination+0x50>)
10006e7a:	68db      	ldr	r3, [r3, #12]
10006e7c:	68db      	ldr	r3, [r3, #12]
10006e7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
10006e80:	687b      	ldr	r3, [r7, #4]
10006e82:	3304      	adds	r3, #4
10006e84:	4618      	mov	r0, r3
10006e86:	f7fe f937 	bl	100050f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
10006e8a:	4b0d      	ldr	r3, [pc, #52]	@ (10006ec0 <prvCheckTasksWaitingTermination+0x54>)
10006e8c:	681b      	ldr	r3, [r3, #0]
10006e8e:	3b01      	subs	r3, #1
10006e90:	4a0b      	ldr	r2, [pc, #44]	@ (10006ec0 <prvCheckTasksWaitingTermination+0x54>)
10006e92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
10006e94:	4b0b      	ldr	r3, [pc, #44]	@ (10006ec4 <prvCheckTasksWaitingTermination+0x58>)
10006e96:	681b      	ldr	r3, [r3, #0]
10006e98:	3b01      	subs	r3, #1
10006e9a:	4a0a      	ldr	r2, [pc, #40]	@ (10006ec4 <prvCheckTasksWaitingTermination+0x58>)
10006e9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
10006e9e:	f7fe fab5 	bl	1000540c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
10006ea2:	6878      	ldr	r0, [r7, #4]
10006ea4:	f000 f810 	bl	10006ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
10006ea8:	4b06      	ldr	r3, [pc, #24]	@ (10006ec4 <prvCheckTasksWaitingTermination+0x58>)
10006eaa:	681b      	ldr	r3, [r3, #0]
10006eac:	2b00      	cmp	r3, #0
10006eae:	d1e1      	bne.n	10006e74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
10006eb0:	bf00      	nop
10006eb2:	bf00      	nop
10006eb4:	3708      	adds	r7, #8
10006eb6:	46bd      	mov	sp, r7
10006eb8:	bd80      	pop	{r7, pc}
10006eba:	bf00      	nop
10006ebc:	100219dc 	.word	0x100219dc
10006ec0:	10021a08 	.word	0x10021a08
10006ec4:	100219f0 	.word	0x100219f0

10006ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
10006ec8:	b580      	push	{r7, lr}
10006eca:	b084      	sub	sp, #16
10006ecc:	af00      	add	r7, sp, #0
10006ece:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
10006ed0:	687b      	ldr	r3, [r7, #4]
10006ed2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
10006ed6:	2b00      	cmp	r3, #0
10006ed8:	d108      	bne.n	10006eec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
10006eda:	687b      	ldr	r3, [r7, #4]
10006edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10006ede:	4618      	mov	r0, r3
10006ee0:	f7fd ff68 	bl	10004db4 <vPortFree>
				vPortFree( pxTCB );
10006ee4:	6878      	ldr	r0, [r7, #4]
10006ee6:	f7fd ff65 	bl	10004db4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
10006eea:	e019      	b.n	10006f20 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
10006eec:	687b      	ldr	r3, [r7, #4]
10006eee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
10006ef2:	2b01      	cmp	r3, #1
10006ef4:	d103      	bne.n	10006efe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
10006ef6:	6878      	ldr	r0, [r7, #4]
10006ef8:	f7fd ff5c 	bl	10004db4 <vPortFree>
	}
10006efc:	e010      	b.n	10006f20 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
10006efe:	687b      	ldr	r3, [r7, #4]
10006f00:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
10006f04:	2b02      	cmp	r3, #2
10006f06:	d00b      	beq.n	10006f20 <prvDeleteTCB+0x58>
	__asm volatile
10006f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
10006f0c:	f383 8811 	msr	BASEPRI, r3
10006f10:	f3bf 8f6f 	isb	sy
10006f14:	f3bf 8f4f 	dsb	sy
10006f18:	60fb      	str	r3, [r7, #12]
}
10006f1a:	bf00      	nop
10006f1c:	bf00      	nop
10006f1e:	e7fd      	b.n	10006f1c <prvDeleteTCB+0x54>
	}
10006f20:	bf00      	nop
10006f22:	3710      	adds	r7, #16
10006f24:	46bd      	mov	sp, r7
10006f26:	bd80      	pop	{r7, pc}

10006f28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
10006f28:	b480      	push	{r7}
10006f2a:	b083      	sub	sp, #12
10006f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
10006f2e:	4b0c      	ldr	r3, [pc, #48]	@ (10006f60 <prvResetNextTaskUnblockTime+0x38>)
10006f30:	681b      	ldr	r3, [r3, #0]
10006f32:	681b      	ldr	r3, [r3, #0]
10006f34:	2b00      	cmp	r3, #0
10006f36:	d104      	bne.n	10006f42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
10006f38:	4b0a      	ldr	r3, [pc, #40]	@ (10006f64 <prvResetNextTaskUnblockTime+0x3c>)
10006f3a:	f04f 32ff 	mov.w	r2, #4294967295
10006f3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
10006f40:	e008      	b.n	10006f54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10006f42:	4b07      	ldr	r3, [pc, #28]	@ (10006f60 <prvResetNextTaskUnblockTime+0x38>)
10006f44:	681b      	ldr	r3, [r3, #0]
10006f46:	68db      	ldr	r3, [r3, #12]
10006f48:	68db      	ldr	r3, [r3, #12]
10006f4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
10006f4c:	687b      	ldr	r3, [r7, #4]
10006f4e:	685b      	ldr	r3, [r3, #4]
10006f50:	4a04      	ldr	r2, [pc, #16]	@ (10006f64 <prvResetNextTaskUnblockTime+0x3c>)
10006f52:	6013      	str	r3, [r2, #0]
}
10006f54:	bf00      	nop
10006f56:	370c      	adds	r7, #12
10006f58:	46bd      	mov	sp, r7
10006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
10006f5e:	4770      	bx	lr
10006f60:	100219c0 	.word	0x100219c0
10006f64:	10021a28 	.word	0x10021a28

10006f68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
10006f68:	b480      	push	{r7}
10006f6a:	b083      	sub	sp, #12
10006f6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
10006f6e:	4b0b      	ldr	r3, [pc, #44]	@ (10006f9c <xTaskGetSchedulerState+0x34>)
10006f70:	681b      	ldr	r3, [r3, #0]
10006f72:	2b00      	cmp	r3, #0
10006f74:	d102      	bne.n	10006f7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
10006f76:	2301      	movs	r3, #1
10006f78:	607b      	str	r3, [r7, #4]
10006f7a:	e008      	b.n	10006f8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
10006f7c:	4b08      	ldr	r3, [pc, #32]	@ (10006fa0 <xTaskGetSchedulerState+0x38>)
10006f7e:	681b      	ldr	r3, [r3, #0]
10006f80:	2b00      	cmp	r3, #0
10006f82:	d102      	bne.n	10006f8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
10006f84:	2302      	movs	r3, #2
10006f86:	607b      	str	r3, [r7, #4]
10006f88:	e001      	b.n	10006f8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
10006f8a:	2300      	movs	r3, #0
10006f8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
10006f8e:	687b      	ldr	r3, [r7, #4]
	}
10006f90:	4618      	mov	r0, r3
10006f92:	370c      	adds	r7, #12
10006f94:	46bd      	mov	sp, r7
10006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
10006f9a:	4770      	bx	lr
10006f9c:	10021a14 	.word	0x10021a14
10006fa0:	10021a30 	.word	0x10021a30

10006fa4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
10006fa4:	b580      	push	{r7, lr}
10006fa6:	b084      	sub	sp, #16
10006fa8:	af00      	add	r7, sp, #0
10006faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
10006fac:	687b      	ldr	r3, [r7, #4]
10006fae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
10006fb0:	2300      	movs	r3, #0
10006fb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
10006fb4:	687b      	ldr	r3, [r7, #4]
10006fb6:	2b00      	cmp	r3, #0
10006fb8:	d051      	beq.n	1000705e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
10006fba:	68bb      	ldr	r3, [r7, #8]
10006fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10006fbe:	4b2a      	ldr	r3, [pc, #168]	@ (10007068 <xTaskPriorityInherit+0xc4>)
10006fc0:	681b      	ldr	r3, [r3, #0]
10006fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10006fc4:	429a      	cmp	r2, r3
10006fc6:	d241      	bcs.n	1000704c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
10006fc8:	68bb      	ldr	r3, [r7, #8]
10006fca:	699b      	ldr	r3, [r3, #24]
10006fcc:	2b00      	cmp	r3, #0
10006fce:	db06      	blt.n	10006fde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10006fd0:	4b25      	ldr	r3, [pc, #148]	@ (10007068 <xTaskPriorityInherit+0xc4>)
10006fd2:	681b      	ldr	r3, [r3, #0]
10006fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10006fd6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
10006fda:	68bb      	ldr	r3, [r7, #8]
10006fdc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
10006fde:	68bb      	ldr	r3, [r7, #8]
10006fe0:	6959      	ldr	r1, [r3, #20]
10006fe2:	68bb      	ldr	r3, [r7, #8]
10006fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10006fe6:	4613      	mov	r3, r2
10006fe8:	009b      	lsls	r3, r3, #2
10006fea:	4413      	add	r3, r2
10006fec:	009b      	lsls	r3, r3, #2
10006fee:	4a1f      	ldr	r2, [pc, #124]	@ (1000706c <xTaskPriorityInherit+0xc8>)
10006ff0:	4413      	add	r3, r2
10006ff2:	4299      	cmp	r1, r3
10006ff4:	d122      	bne.n	1000703c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
10006ff6:	68bb      	ldr	r3, [r7, #8]
10006ff8:	3304      	adds	r3, #4
10006ffa:	4618      	mov	r0, r3
10006ffc:	f7fe f87c 	bl	100050f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
10007000:	4b19      	ldr	r3, [pc, #100]	@ (10007068 <xTaskPriorityInherit+0xc4>)
10007002:	681b      	ldr	r3, [r3, #0]
10007004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10007006:	68bb      	ldr	r3, [r7, #8]
10007008:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1000700a:	68bb      	ldr	r3, [r7, #8]
1000700c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1000700e:	4b18      	ldr	r3, [pc, #96]	@ (10007070 <xTaskPriorityInherit+0xcc>)
10007010:	681b      	ldr	r3, [r3, #0]
10007012:	429a      	cmp	r2, r3
10007014:	d903      	bls.n	1000701e <xTaskPriorityInherit+0x7a>
10007016:	68bb      	ldr	r3, [r7, #8]
10007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000701a:	4a15      	ldr	r2, [pc, #84]	@ (10007070 <xTaskPriorityInherit+0xcc>)
1000701c:	6013      	str	r3, [r2, #0]
1000701e:	68bb      	ldr	r3, [r7, #8]
10007020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10007022:	4613      	mov	r3, r2
10007024:	009b      	lsls	r3, r3, #2
10007026:	4413      	add	r3, r2
10007028:	009b      	lsls	r3, r3, #2
1000702a:	4a10      	ldr	r2, [pc, #64]	@ (1000706c <xTaskPriorityInherit+0xc8>)
1000702c:	441a      	add	r2, r3
1000702e:	68bb      	ldr	r3, [r7, #8]
10007030:	3304      	adds	r3, #4
10007032:	4619      	mov	r1, r3
10007034:	4610      	mov	r0, r2
10007036:	f7fe f802 	bl	1000503e <vListInsertEnd>
1000703a:	e004      	b.n	10007046 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1000703c:	4b0a      	ldr	r3, [pc, #40]	@ (10007068 <xTaskPriorityInherit+0xc4>)
1000703e:	681b      	ldr	r3, [r3, #0]
10007040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10007042:	68bb      	ldr	r3, [r7, #8]
10007044:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
10007046:	2301      	movs	r3, #1
10007048:	60fb      	str	r3, [r7, #12]
1000704a:	e008      	b.n	1000705e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1000704c:	68bb      	ldr	r3, [r7, #8]
1000704e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10007050:	4b05      	ldr	r3, [pc, #20]	@ (10007068 <xTaskPriorityInherit+0xc4>)
10007052:	681b      	ldr	r3, [r3, #0]
10007054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10007056:	429a      	cmp	r2, r3
10007058:	d201      	bcs.n	1000705e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
1000705a:	2301      	movs	r3, #1
1000705c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
1000705e:	68fb      	ldr	r3, [r7, #12]
	}
10007060:	4618      	mov	r0, r3
10007062:	3710      	adds	r7, #16
10007064:	46bd      	mov	sp, r7
10007066:	bd80      	pop	{r7, pc}
10007068:	10021534 	.word	0x10021534
1000706c:	10021538 	.word	0x10021538
10007070:	10021a10 	.word	0x10021a10

10007074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
10007074:	b580      	push	{r7, lr}
10007076:	b086      	sub	sp, #24
10007078:	af00      	add	r7, sp, #0
1000707a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
1000707c:	687b      	ldr	r3, [r7, #4]
1000707e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
10007080:	2300      	movs	r3, #0
10007082:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
10007084:	687b      	ldr	r3, [r7, #4]
10007086:	2b00      	cmp	r3, #0
10007088:	d058      	beq.n	1000713c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
1000708a:	4b2f      	ldr	r3, [pc, #188]	@ (10007148 <xTaskPriorityDisinherit+0xd4>)
1000708c:	681b      	ldr	r3, [r3, #0]
1000708e:	693a      	ldr	r2, [r7, #16]
10007090:	429a      	cmp	r2, r3
10007092:	d00b      	beq.n	100070ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
10007094:	f04f 0350 	mov.w	r3, #80	@ 0x50
10007098:	f383 8811 	msr	BASEPRI, r3
1000709c:	f3bf 8f6f 	isb	sy
100070a0:	f3bf 8f4f 	dsb	sy
100070a4:	60fb      	str	r3, [r7, #12]
}
100070a6:	bf00      	nop
100070a8:	bf00      	nop
100070aa:	e7fd      	b.n	100070a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
100070ac:	693b      	ldr	r3, [r7, #16]
100070ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100070b0:	2b00      	cmp	r3, #0
100070b2:	d10b      	bne.n	100070cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
100070b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
100070b8:	f383 8811 	msr	BASEPRI, r3
100070bc:	f3bf 8f6f 	isb	sy
100070c0:	f3bf 8f4f 	dsb	sy
100070c4:	60bb      	str	r3, [r7, #8]
}
100070c6:	bf00      	nop
100070c8:	bf00      	nop
100070ca:	e7fd      	b.n	100070c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
100070cc:	693b      	ldr	r3, [r7, #16]
100070ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100070d0:	1e5a      	subs	r2, r3, #1
100070d2:	693b      	ldr	r3, [r7, #16]
100070d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
100070d6:	693b      	ldr	r3, [r7, #16]
100070d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100070da:	693b      	ldr	r3, [r7, #16]
100070dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100070de:	429a      	cmp	r2, r3
100070e0:	d02c      	beq.n	1000713c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
100070e2:	693b      	ldr	r3, [r7, #16]
100070e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100070e6:	2b00      	cmp	r3, #0
100070e8:	d128      	bne.n	1000713c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
100070ea:	693b      	ldr	r3, [r7, #16]
100070ec:	3304      	adds	r3, #4
100070ee:	4618      	mov	r0, r3
100070f0:	f7fe f802 	bl	100050f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
100070f4:	693b      	ldr	r3, [r7, #16]
100070f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
100070f8:	693b      	ldr	r3, [r7, #16]
100070fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
100070fc:	693b      	ldr	r3, [r7, #16]
100070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10007100:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
10007104:	693b      	ldr	r3, [r7, #16]
10007106:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
10007108:	693b      	ldr	r3, [r7, #16]
1000710a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1000710c:	4b0f      	ldr	r3, [pc, #60]	@ (1000714c <xTaskPriorityDisinherit+0xd8>)
1000710e:	681b      	ldr	r3, [r3, #0]
10007110:	429a      	cmp	r2, r3
10007112:	d903      	bls.n	1000711c <xTaskPriorityDisinherit+0xa8>
10007114:	693b      	ldr	r3, [r7, #16]
10007116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10007118:	4a0c      	ldr	r2, [pc, #48]	@ (1000714c <xTaskPriorityDisinherit+0xd8>)
1000711a:	6013      	str	r3, [r2, #0]
1000711c:	693b      	ldr	r3, [r7, #16]
1000711e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10007120:	4613      	mov	r3, r2
10007122:	009b      	lsls	r3, r3, #2
10007124:	4413      	add	r3, r2
10007126:	009b      	lsls	r3, r3, #2
10007128:	4a09      	ldr	r2, [pc, #36]	@ (10007150 <xTaskPriorityDisinherit+0xdc>)
1000712a:	441a      	add	r2, r3
1000712c:	693b      	ldr	r3, [r7, #16]
1000712e:	3304      	adds	r3, #4
10007130:	4619      	mov	r1, r3
10007132:	4610      	mov	r0, r2
10007134:	f7fd ff83 	bl	1000503e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
10007138:	2301      	movs	r3, #1
1000713a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
1000713c:	697b      	ldr	r3, [r7, #20]
	}
1000713e:	4618      	mov	r0, r3
10007140:	3718      	adds	r7, #24
10007142:	46bd      	mov	sp, r7
10007144:	bd80      	pop	{r7, pc}
10007146:	bf00      	nop
10007148:	10021534 	.word	0x10021534
1000714c:	10021a10 	.word	0x10021a10
10007150:	10021538 	.word	0x10021538

10007154 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
10007154:	b580      	push	{r7, lr}
10007156:	b088      	sub	sp, #32
10007158:	af00      	add	r7, sp, #0
1000715a:	6078      	str	r0, [r7, #4]
1000715c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
1000715e:	687b      	ldr	r3, [r7, #4]
10007160:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
10007162:	2301      	movs	r3, #1
10007164:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
10007166:	687b      	ldr	r3, [r7, #4]
10007168:	2b00      	cmp	r3, #0
1000716a:	d06c      	beq.n	10007246 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
1000716c:	69bb      	ldr	r3, [r7, #24]
1000716e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10007170:	2b00      	cmp	r3, #0
10007172:	d10b      	bne.n	1000718c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
10007174:	f04f 0350 	mov.w	r3, #80	@ 0x50
10007178:	f383 8811 	msr	BASEPRI, r3
1000717c:	f3bf 8f6f 	isb	sy
10007180:	f3bf 8f4f 	dsb	sy
10007184:	60fb      	str	r3, [r7, #12]
}
10007186:	bf00      	nop
10007188:	bf00      	nop
1000718a:	e7fd      	b.n	10007188 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1000718c:	69bb      	ldr	r3, [r7, #24]
1000718e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10007190:	683a      	ldr	r2, [r7, #0]
10007192:	429a      	cmp	r2, r3
10007194:	d902      	bls.n	1000719c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
10007196:	683b      	ldr	r3, [r7, #0]
10007198:	61fb      	str	r3, [r7, #28]
1000719a:	e002      	b.n	100071a2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
1000719c:	69bb      	ldr	r3, [r7, #24]
1000719e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100071a0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
100071a2:	69bb      	ldr	r3, [r7, #24]
100071a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100071a6:	69fa      	ldr	r2, [r7, #28]
100071a8:	429a      	cmp	r2, r3
100071aa:	d04c      	beq.n	10007246 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
100071ac:	69bb      	ldr	r3, [r7, #24]
100071ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100071b0:	697a      	ldr	r2, [r7, #20]
100071b2:	429a      	cmp	r2, r3
100071b4:	d147      	bne.n	10007246 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
100071b6:	4b26      	ldr	r3, [pc, #152]	@ (10007250 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
100071b8:	681b      	ldr	r3, [r3, #0]
100071ba:	69ba      	ldr	r2, [r7, #24]
100071bc:	429a      	cmp	r2, r3
100071be:	d10b      	bne.n	100071d8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
100071c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
100071c4:	f383 8811 	msr	BASEPRI, r3
100071c8:	f3bf 8f6f 	isb	sy
100071cc:	f3bf 8f4f 	dsb	sy
100071d0:	60bb      	str	r3, [r7, #8]
}
100071d2:	bf00      	nop
100071d4:	bf00      	nop
100071d6:	e7fd      	b.n	100071d4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
100071d8:	69bb      	ldr	r3, [r7, #24]
100071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100071dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
100071de:	69bb      	ldr	r3, [r7, #24]
100071e0:	69fa      	ldr	r2, [r7, #28]
100071e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
100071e4:	69bb      	ldr	r3, [r7, #24]
100071e6:	699b      	ldr	r3, [r3, #24]
100071e8:	2b00      	cmp	r3, #0
100071ea:	db04      	blt.n	100071f6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
100071ec:	69fb      	ldr	r3, [r7, #28]
100071ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
100071f2:	69bb      	ldr	r3, [r7, #24]
100071f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
100071f6:	69bb      	ldr	r3, [r7, #24]
100071f8:	6959      	ldr	r1, [r3, #20]
100071fa:	693a      	ldr	r2, [r7, #16]
100071fc:	4613      	mov	r3, r2
100071fe:	009b      	lsls	r3, r3, #2
10007200:	4413      	add	r3, r2
10007202:	009b      	lsls	r3, r3, #2
10007204:	4a13      	ldr	r2, [pc, #76]	@ (10007254 <vTaskPriorityDisinheritAfterTimeout+0x100>)
10007206:	4413      	add	r3, r2
10007208:	4299      	cmp	r1, r3
1000720a:	d11c      	bne.n	10007246 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1000720c:	69bb      	ldr	r3, [r7, #24]
1000720e:	3304      	adds	r3, #4
10007210:	4618      	mov	r0, r3
10007212:	f7fd ff71 	bl	100050f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
10007216:	69bb      	ldr	r3, [r7, #24]
10007218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1000721a:	4b0f      	ldr	r3, [pc, #60]	@ (10007258 <vTaskPriorityDisinheritAfterTimeout+0x104>)
1000721c:	681b      	ldr	r3, [r3, #0]
1000721e:	429a      	cmp	r2, r3
10007220:	d903      	bls.n	1000722a <vTaskPriorityDisinheritAfterTimeout+0xd6>
10007222:	69bb      	ldr	r3, [r7, #24]
10007224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10007226:	4a0c      	ldr	r2, [pc, #48]	@ (10007258 <vTaskPriorityDisinheritAfterTimeout+0x104>)
10007228:	6013      	str	r3, [r2, #0]
1000722a:	69bb      	ldr	r3, [r7, #24]
1000722c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1000722e:	4613      	mov	r3, r2
10007230:	009b      	lsls	r3, r3, #2
10007232:	4413      	add	r3, r2
10007234:	009b      	lsls	r3, r3, #2
10007236:	4a07      	ldr	r2, [pc, #28]	@ (10007254 <vTaskPriorityDisinheritAfterTimeout+0x100>)
10007238:	441a      	add	r2, r3
1000723a:	69bb      	ldr	r3, [r7, #24]
1000723c:	3304      	adds	r3, #4
1000723e:	4619      	mov	r1, r3
10007240:	4610      	mov	r0, r2
10007242:	f7fd fefc 	bl	1000503e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
10007246:	bf00      	nop
10007248:	3720      	adds	r7, #32
1000724a:	46bd      	mov	sp, r7
1000724c:	bd80      	pop	{r7, pc}
1000724e:	bf00      	nop
10007250:	10021534 	.word	0x10021534
10007254:	10021538 	.word	0x10021538
10007258:	10021a10 	.word	0x10021a10

1000725c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
1000725c:	b480      	push	{r7}
1000725e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
10007260:	4b07      	ldr	r3, [pc, #28]	@ (10007280 <pvTaskIncrementMutexHeldCount+0x24>)
10007262:	681b      	ldr	r3, [r3, #0]
10007264:	2b00      	cmp	r3, #0
10007266:	d004      	beq.n	10007272 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
10007268:	4b05      	ldr	r3, [pc, #20]	@ (10007280 <pvTaskIncrementMutexHeldCount+0x24>)
1000726a:	681b      	ldr	r3, [r3, #0]
1000726c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
1000726e:	3201      	adds	r2, #1
10007270:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
10007272:	4b03      	ldr	r3, [pc, #12]	@ (10007280 <pvTaskIncrementMutexHeldCount+0x24>)
10007274:	681b      	ldr	r3, [r3, #0]
	}
10007276:	4618      	mov	r0, r3
10007278:	46bd      	mov	sp, r7
1000727a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000727e:	4770      	bx	lr
10007280:	10021534 	.word	0x10021534

10007284 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
10007284:	b580      	push	{r7, lr}
10007286:	b084      	sub	sp, #16
10007288:	af00      	add	r7, sp, #0
1000728a:	6078      	str	r0, [r7, #4]
1000728c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1000728e:	4b21      	ldr	r3, [pc, #132]	@ (10007314 <prvAddCurrentTaskToDelayedList+0x90>)
10007290:	681b      	ldr	r3, [r3, #0]
10007292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
10007294:	4b20      	ldr	r3, [pc, #128]	@ (10007318 <prvAddCurrentTaskToDelayedList+0x94>)
10007296:	681b      	ldr	r3, [r3, #0]
10007298:	3304      	adds	r3, #4
1000729a:	4618      	mov	r0, r3
1000729c:	f7fd ff2c 	bl	100050f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
100072a0:	687b      	ldr	r3, [r7, #4]
100072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
100072a6:	d10a      	bne.n	100072be <prvAddCurrentTaskToDelayedList+0x3a>
100072a8:	683b      	ldr	r3, [r7, #0]
100072aa:	2b00      	cmp	r3, #0
100072ac:	d007      	beq.n	100072be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
100072ae:	4b1a      	ldr	r3, [pc, #104]	@ (10007318 <prvAddCurrentTaskToDelayedList+0x94>)
100072b0:	681b      	ldr	r3, [r3, #0]
100072b2:	3304      	adds	r3, #4
100072b4:	4619      	mov	r1, r3
100072b6:	4819      	ldr	r0, [pc, #100]	@ (1000731c <prvAddCurrentTaskToDelayedList+0x98>)
100072b8:	f7fd fec1 	bl	1000503e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
100072bc:	e026      	b.n	1000730c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
100072be:	68fa      	ldr	r2, [r7, #12]
100072c0:	687b      	ldr	r3, [r7, #4]
100072c2:	4413      	add	r3, r2
100072c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
100072c6:	4b14      	ldr	r3, [pc, #80]	@ (10007318 <prvAddCurrentTaskToDelayedList+0x94>)
100072c8:	681b      	ldr	r3, [r3, #0]
100072ca:	68ba      	ldr	r2, [r7, #8]
100072cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
100072ce:	68ba      	ldr	r2, [r7, #8]
100072d0:	68fb      	ldr	r3, [r7, #12]
100072d2:	429a      	cmp	r2, r3
100072d4:	d209      	bcs.n	100072ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
100072d6:	4b12      	ldr	r3, [pc, #72]	@ (10007320 <prvAddCurrentTaskToDelayedList+0x9c>)
100072d8:	681a      	ldr	r2, [r3, #0]
100072da:	4b0f      	ldr	r3, [pc, #60]	@ (10007318 <prvAddCurrentTaskToDelayedList+0x94>)
100072dc:	681b      	ldr	r3, [r3, #0]
100072de:	3304      	adds	r3, #4
100072e0:	4619      	mov	r1, r3
100072e2:	4610      	mov	r0, r2
100072e4:	f7fd fecf 	bl	10005086 <vListInsert>
}
100072e8:	e010      	b.n	1000730c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
100072ea:	4b0e      	ldr	r3, [pc, #56]	@ (10007324 <prvAddCurrentTaskToDelayedList+0xa0>)
100072ec:	681a      	ldr	r2, [r3, #0]
100072ee:	4b0a      	ldr	r3, [pc, #40]	@ (10007318 <prvAddCurrentTaskToDelayedList+0x94>)
100072f0:	681b      	ldr	r3, [r3, #0]
100072f2:	3304      	adds	r3, #4
100072f4:	4619      	mov	r1, r3
100072f6:	4610      	mov	r0, r2
100072f8:	f7fd fec5 	bl	10005086 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
100072fc:	4b0a      	ldr	r3, [pc, #40]	@ (10007328 <prvAddCurrentTaskToDelayedList+0xa4>)
100072fe:	681b      	ldr	r3, [r3, #0]
10007300:	68ba      	ldr	r2, [r7, #8]
10007302:	429a      	cmp	r2, r3
10007304:	d202      	bcs.n	1000730c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
10007306:	4a08      	ldr	r2, [pc, #32]	@ (10007328 <prvAddCurrentTaskToDelayedList+0xa4>)
10007308:	68bb      	ldr	r3, [r7, #8]
1000730a:	6013      	str	r3, [r2, #0]
}
1000730c:	bf00      	nop
1000730e:	3710      	adds	r7, #16
10007310:	46bd      	mov	sp, r7
10007312:	bd80      	pop	{r7, pc}
10007314:	10021a0c 	.word	0x10021a0c
10007318:	10021534 	.word	0x10021534
1000731c:	100219f4 	.word	0x100219f4
10007320:	100219c4 	.word	0x100219c4
10007324:	100219c0 	.word	0x100219c0
10007328:	10021a28 	.word	0x10021a28

1000732c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
1000732c:	b580      	push	{r7, lr}
1000732e:	b08a      	sub	sp, #40	@ 0x28
10007330:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
10007332:	2300      	movs	r3, #0
10007334:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
10007336:	f000 fb13 	bl	10007960 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
1000733a:	4b1d      	ldr	r3, [pc, #116]	@ (100073b0 <xTimerCreateTimerTask+0x84>)
1000733c:	681b      	ldr	r3, [r3, #0]
1000733e:	2b00      	cmp	r3, #0
10007340:	d021      	beq.n	10007386 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
10007342:	2300      	movs	r3, #0
10007344:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
10007346:	2300      	movs	r3, #0
10007348:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1000734a:	1d3a      	adds	r2, r7, #4
1000734c:	f107 0108 	add.w	r1, r7, #8
10007350:	f107 030c 	add.w	r3, r7, #12
10007354:	4618      	mov	r0, r3
10007356:	f7fd fc4b 	bl	10004bf0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1000735a:	6879      	ldr	r1, [r7, #4]
1000735c:	68bb      	ldr	r3, [r7, #8]
1000735e:	68fa      	ldr	r2, [r7, #12]
10007360:	9202      	str	r2, [sp, #8]
10007362:	9301      	str	r3, [sp, #4]
10007364:	2302      	movs	r3, #2
10007366:	9300      	str	r3, [sp, #0]
10007368:	2300      	movs	r3, #0
1000736a:	460a      	mov	r2, r1
1000736c:	4911      	ldr	r1, [pc, #68]	@ (100073b4 <xTimerCreateTimerTask+0x88>)
1000736e:	4812      	ldr	r0, [pc, #72]	@ (100073b8 <xTimerCreateTimerTask+0x8c>)
10007370:	f7fe ffd0 	bl	10006314 <xTaskCreateStatic>
10007374:	4603      	mov	r3, r0
10007376:	4a11      	ldr	r2, [pc, #68]	@ (100073bc <xTimerCreateTimerTask+0x90>)
10007378:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
1000737a:	4b10      	ldr	r3, [pc, #64]	@ (100073bc <xTimerCreateTimerTask+0x90>)
1000737c:	681b      	ldr	r3, [r3, #0]
1000737e:	2b00      	cmp	r3, #0
10007380:	d001      	beq.n	10007386 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
10007382:	2301      	movs	r3, #1
10007384:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
10007386:	697b      	ldr	r3, [r7, #20]
10007388:	2b00      	cmp	r3, #0
1000738a:	d10b      	bne.n	100073a4 <xTimerCreateTimerTask+0x78>
	__asm volatile
1000738c:	f04f 0350 	mov.w	r3, #80	@ 0x50
10007390:	f383 8811 	msr	BASEPRI, r3
10007394:	f3bf 8f6f 	isb	sy
10007398:	f3bf 8f4f 	dsb	sy
1000739c:	613b      	str	r3, [r7, #16]
}
1000739e:	bf00      	nop
100073a0:	bf00      	nop
100073a2:	e7fd      	b.n	100073a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
100073a4:	697b      	ldr	r3, [r7, #20]
}
100073a6:	4618      	mov	r0, r3
100073a8:	3718      	adds	r7, #24
100073aa:	46bd      	mov	sp, r7
100073ac:	bd80      	pop	{r7, pc}
100073ae:	bf00      	nop
100073b0:	10021a64 	.word	0x10021a64
100073b4:	1000acd4 	.word	0x1000acd4
100073b8:	100074f9 	.word	0x100074f9
100073bc:	10021a68 	.word	0x10021a68

100073c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
100073c0:	b580      	push	{r7, lr}
100073c2:	b08a      	sub	sp, #40	@ 0x28
100073c4:	af00      	add	r7, sp, #0
100073c6:	60f8      	str	r0, [r7, #12]
100073c8:	60b9      	str	r1, [r7, #8]
100073ca:	607a      	str	r2, [r7, #4]
100073cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
100073ce:	2300      	movs	r3, #0
100073d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
100073d2:	68fb      	ldr	r3, [r7, #12]
100073d4:	2b00      	cmp	r3, #0
100073d6:	d10b      	bne.n	100073f0 <xTimerGenericCommand+0x30>
	__asm volatile
100073d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
100073dc:	f383 8811 	msr	BASEPRI, r3
100073e0:	f3bf 8f6f 	isb	sy
100073e4:	f3bf 8f4f 	dsb	sy
100073e8:	623b      	str	r3, [r7, #32]
}
100073ea:	bf00      	nop
100073ec:	bf00      	nop
100073ee:	e7fd      	b.n	100073ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
100073f0:	4b19      	ldr	r3, [pc, #100]	@ (10007458 <xTimerGenericCommand+0x98>)
100073f2:	681b      	ldr	r3, [r3, #0]
100073f4:	2b00      	cmp	r3, #0
100073f6:	d02a      	beq.n	1000744e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
100073f8:	68bb      	ldr	r3, [r7, #8]
100073fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
100073fc:	687b      	ldr	r3, [r7, #4]
100073fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
10007400:	68fb      	ldr	r3, [r7, #12]
10007402:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
10007404:	68bb      	ldr	r3, [r7, #8]
10007406:	2b05      	cmp	r3, #5
10007408:	dc18      	bgt.n	1000743c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1000740a:	f7ff fdad 	bl	10006f68 <xTaskGetSchedulerState>
1000740e:	4603      	mov	r3, r0
10007410:	2b02      	cmp	r3, #2
10007412:	d109      	bne.n	10007428 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
10007414:	4b10      	ldr	r3, [pc, #64]	@ (10007458 <xTimerGenericCommand+0x98>)
10007416:	6818      	ldr	r0, [r3, #0]
10007418:	f107 0110 	add.w	r1, r7, #16
1000741c:	2300      	movs	r3, #0
1000741e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10007420:	f7fe fa62 	bl	100058e8 <xQueueGenericSend>
10007424:	6278      	str	r0, [r7, #36]	@ 0x24
10007426:	e012      	b.n	1000744e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
10007428:	4b0b      	ldr	r3, [pc, #44]	@ (10007458 <xTimerGenericCommand+0x98>)
1000742a:	6818      	ldr	r0, [r3, #0]
1000742c:	f107 0110 	add.w	r1, r7, #16
10007430:	2300      	movs	r3, #0
10007432:	2200      	movs	r2, #0
10007434:	f7fe fa58 	bl	100058e8 <xQueueGenericSend>
10007438:	6278      	str	r0, [r7, #36]	@ 0x24
1000743a:	e008      	b.n	1000744e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1000743c:	4b06      	ldr	r3, [pc, #24]	@ (10007458 <xTimerGenericCommand+0x98>)
1000743e:	6818      	ldr	r0, [r3, #0]
10007440:	f107 0110 	add.w	r1, r7, #16
10007444:	2300      	movs	r3, #0
10007446:	683a      	ldr	r2, [r7, #0]
10007448:	f7fe fb50 	bl	10005aec <xQueueGenericSendFromISR>
1000744c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
1000744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10007450:	4618      	mov	r0, r3
10007452:	3728      	adds	r7, #40	@ 0x28
10007454:	46bd      	mov	sp, r7
10007456:	bd80      	pop	{r7, pc}
10007458:	10021a64 	.word	0x10021a64

1000745c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
1000745c:	b580      	push	{r7, lr}
1000745e:	b088      	sub	sp, #32
10007460:	af02      	add	r7, sp, #8
10007462:	6078      	str	r0, [r7, #4]
10007464:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10007466:	4b23      	ldr	r3, [pc, #140]	@ (100074f4 <prvProcessExpiredTimer+0x98>)
10007468:	681b      	ldr	r3, [r3, #0]
1000746a:	68db      	ldr	r3, [r3, #12]
1000746c:	68db      	ldr	r3, [r3, #12]
1000746e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
10007470:	697b      	ldr	r3, [r7, #20]
10007472:	3304      	adds	r3, #4
10007474:	4618      	mov	r0, r3
10007476:	f7fd fe3f 	bl	100050f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
1000747a:	697b      	ldr	r3, [r7, #20]
1000747c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
10007480:	f003 0304 	and.w	r3, r3, #4
10007484:	2b00      	cmp	r3, #0
10007486:	d023      	beq.n	100074d0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
10007488:	697b      	ldr	r3, [r7, #20]
1000748a:	699a      	ldr	r2, [r3, #24]
1000748c:	687b      	ldr	r3, [r7, #4]
1000748e:	18d1      	adds	r1, r2, r3
10007490:	687b      	ldr	r3, [r7, #4]
10007492:	683a      	ldr	r2, [r7, #0]
10007494:	6978      	ldr	r0, [r7, #20]
10007496:	f000 f8d5 	bl	10007644 <prvInsertTimerInActiveList>
1000749a:	4603      	mov	r3, r0
1000749c:	2b00      	cmp	r3, #0
1000749e:	d020      	beq.n	100074e2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
100074a0:	2300      	movs	r3, #0
100074a2:	9300      	str	r3, [sp, #0]
100074a4:	2300      	movs	r3, #0
100074a6:	687a      	ldr	r2, [r7, #4]
100074a8:	2100      	movs	r1, #0
100074aa:	6978      	ldr	r0, [r7, #20]
100074ac:	f7ff ff88 	bl	100073c0 <xTimerGenericCommand>
100074b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
100074b2:	693b      	ldr	r3, [r7, #16]
100074b4:	2b00      	cmp	r3, #0
100074b6:	d114      	bne.n	100074e2 <prvProcessExpiredTimer+0x86>
	__asm volatile
100074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
100074bc:	f383 8811 	msr	BASEPRI, r3
100074c0:	f3bf 8f6f 	isb	sy
100074c4:	f3bf 8f4f 	dsb	sy
100074c8:	60fb      	str	r3, [r7, #12]
}
100074ca:	bf00      	nop
100074cc:	bf00      	nop
100074ce:	e7fd      	b.n	100074cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
100074d0:	697b      	ldr	r3, [r7, #20]
100074d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
100074d6:	f023 0301 	bic.w	r3, r3, #1
100074da:	b2da      	uxtb	r2, r3
100074dc:	697b      	ldr	r3, [r7, #20]
100074de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
100074e2:	697b      	ldr	r3, [r7, #20]
100074e4:	6a1b      	ldr	r3, [r3, #32]
100074e6:	6978      	ldr	r0, [r7, #20]
100074e8:	4798      	blx	r3
}
100074ea:	bf00      	nop
100074ec:	3718      	adds	r7, #24
100074ee:	46bd      	mov	sp, r7
100074f0:	bd80      	pop	{r7, pc}
100074f2:	bf00      	nop
100074f4:	10021a5c 	.word	0x10021a5c

100074f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
100074f8:	b580      	push	{r7, lr}
100074fa:	b084      	sub	sp, #16
100074fc:	af00      	add	r7, sp, #0
100074fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
10007500:	f107 0308 	add.w	r3, r7, #8
10007504:	4618      	mov	r0, r3
10007506:	f000 f859 	bl	100075bc <prvGetNextExpireTime>
1000750a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1000750c:	68bb      	ldr	r3, [r7, #8]
1000750e:	4619      	mov	r1, r3
10007510:	68f8      	ldr	r0, [r7, #12]
10007512:	f000 f805 	bl	10007520 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
10007516:	f000 f8d7 	bl	100076c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1000751a:	bf00      	nop
1000751c:	e7f0      	b.n	10007500 <prvTimerTask+0x8>
	...

10007520 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
10007520:	b580      	push	{r7, lr}
10007522:	b084      	sub	sp, #16
10007524:	af00      	add	r7, sp, #0
10007526:	6078      	str	r0, [r7, #4]
10007528:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
1000752a:	f7ff f937 	bl	1000679c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1000752e:	f107 0308 	add.w	r3, r7, #8
10007532:	4618      	mov	r0, r3
10007534:	f000 f866 	bl	10007604 <prvSampleTimeNow>
10007538:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
1000753a:	68bb      	ldr	r3, [r7, #8]
1000753c:	2b00      	cmp	r3, #0
1000753e:	d130      	bne.n	100075a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
10007540:	683b      	ldr	r3, [r7, #0]
10007542:	2b00      	cmp	r3, #0
10007544:	d10a      	bne.n	1000755c <prvProcessTimerOrBlockTask+0x3c>
10007546:	687a      	ldr	r2, [r7, #4]
10007548:	68fb      	ldr	r3, [r7, #12]
1000754a:	429a      	cmp	r2, r3
1000754c:	d806      	bhi.n	1000755c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
1000754e:	f7ff f933 	bl	100067b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
10007552:	68f9      	ldr	r1, [r7, #12]
10007554:	6878      	ldr	r0, [r7, #4]
10007556:	f7ff ff81 	bl	1000745c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
1000755a:	e024      	b.n	100075a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
1000755c:	683b      	ldr	r3, [r7, #0]
1000755e:	2b00      	cmp	r3, #0
10007560:	d008      	beq.n	10007574 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
10007562:	4b13      	ldr	r3, [pc, #76]	@ (100075b0 <prvProcessTimerOrBlockTask+0x90>)
10007564:	681b      	ldr	r3, [r3, #0]
10007566:	681b      	ldr	r3, [r3, #0]
10007568:	2b00      	cmp	r3, #0
1000756a:	d101      	bne.n	10007570 <prvProcessTimerOrBlockTask+0x50>
1000756c:	2301      	movs	r3, #1
1000756e:	e000      	b.n	10007572 <prvProcessTimerOrBlockTask+0x52>
10007570:	2300      	movs	r3, #0
10007572:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
10007574:	4b0f      	ldr	r3, [pc, #60]	@ (100075b4 <prvProcessTimerOrBlockTask+0x94>)
10007576:	6818      	ldr	r0, [r3, #0]
10007578:	687a      	ldr	r2, [r7, #4]
1000757a:	68fb      	ldr	r3, [r7, #12]
1000757c:	1ad3      	subs	r3, r2, r3
1000757e:	683a      	ldr	r2, [r7, #0]
10007580:	4619      	mov	r1, r3
10007582:	f7fe fe93 	bl	100062ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
10007586:	f7ff f917 	bl	100067b8 <xTaskResumeAll>
1000758a:	4603      	mov	r3, r0
1000758c:	2b00      	cmp	r3, #0
1000758e:	d10a      	bne.n	100075a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
10007590:	4b09      	ldr	r3, [pc, #36]	@ (100075b8 <prvProcessTimerOrBlockTask+0x98>)
10007592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
10007596:	601a      	str	r2, [r3, #0]
10007598:	f3bf 8f4f 	dsb	sy
1000759c:	f3bf 8f6f 	isb	sy
}
100075a0:	e001      	b.n	100075a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
100075a2:	f7ff f909 	bl	100067b8 <xTaskResumeAll>
}
100075a6:	bf00      	nop
100075a8:	3710      	adds	r7, #16
100075aa:	46bd      	mov	sp, r7
100075ac:	bd80      	pop	{r7, pc}
100075ae:	bf00      	nop
100075b0:	10021a60 	.word	0x10021a60
100075b4:	10021a64 	.word	0x10021a64
100075b8:	e000ed04 	.word	0xe000ed04

100075bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
100075bc:	b480      	push	{r7}
100075be:	b085      	sub	sp, #20
100075c0:	af00      	add	r7, sp, #0
100075c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
100075c4:	4b0e      	ldr	r3, [pc, #56]	@ (10007600 <prvGetNextExpireTime+0x44>)
100075c6:	681b      	ldr	r3, [r3, #0]
100075c8:	681b      	ldr	r3, [r3, #0]
100075ca:	2b00      	cmp	r3, #0
100075cc:	d101      	bne.n	100075d2 <prvGetNextExpireTime+0x16>
100075ce:	2201      	movs	r2, #1
100075d0:	e000      	b.n	100075d4 <prvGetNextExpireTime+0x18>
100075d2:	2200      	movs	r2, #0
100075d4:	687b      	ldr	r3, [r7, #4]
100075d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
100075d8:	687b      	ldr	r3, [r7, #4]
100075da:	681b      	ldr	r3, [r3, #0]
100075dc:	2b00      	cmp	r3, #0
100075de:	d105      	bne.n	100075ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
100075e0:	4b07      	ldr	r3, [pc, #28]	@ (10007600 <prvGetNextExpireTime+0x44>)
100075e2:	681b      	ldr	r3, [r3, #0]
100075e4:	68db      	ldr	r3, [r3, #12]
100075e6:	681b      	ldr	r3, [r3, #0]
100075e8:	60fb      	str	r3, [r7, #12]
100075ea:	e001      	b.n	100075f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
100075ec:	2300      	movs	r3, #0
100075ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
100075f0:	68fb      	ldr	r3, [r7, #12]
}
100075f2:	4618      	mov	r0, r3
100075f4:	3714      	adds	r7, #20
100075f6:	46bd      	mov	sp, r7
100075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
100075fc:	4770      	bx	lr
100075fe:	bf00      	nop
10007600:	10021a5c 	.word	0x10021a5c

10007604 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
10007604:	b580      	push	{r7, lr}
10007606:	b084      	sub	sp, #16
10007608:	af00      	add	r7, sp, #0
1000760a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
1000760c:	f7ff f972 	bl	100068f4 <xTaskGetTickCount>
10007610:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
10007612:	4b0b      	ldr	r3, [pc, #44]	@ (10007640 <prvSampleTimeNow+0x3c>)
10007614:	681b      	ldr	r3, [r3, #0]
10007616:	68fa      	ldr	r2, [r7, #12]
10007618:	429a      	cmp	r2, r3
1000761a:	d205      	bcs.n	10007628 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
1000761c:	f000 f93a 	bl	10007894 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
10007620:	687b      	ldr	r3, [r7, #4]
10007622:	2201      	movs	r2, #1
10007624:	601a      	str	r2, [r3, #0]
10007626:	e002      	b.n	1000762e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
10007628:	687b      	ldr	r3, [r7, #4]
1000762a:	2200      	movs	r2, #0
1000762c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
1000762e:	4a04      	ldr	r2, [pc, #16]	@ (10007640 <prvSampleTimeNow+0x3c>)
10007630:	68fb      	ldr	r3, [r7, #12]
10007632:	6013      	str	r3, [r2, #0]

	return xTimeNow;
10007634:	68fb      	ldr	r3, [r7, #12]
}
10007636:	4618      	mov	r0, r3
10007638:	3710      	adds	r7, #16
1000763a:	46bd      	mov	sp, r7
1000763c:	bd80      	pop	{r7, pc}
1000763e:	bf00      	nop
10007640:	10021a6c 	.word	0x10021a6c

10007644 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
10007644:	b580      	push	{r7, lr}
10007646:	b086      	sub	sp, #24
10007648:	af00      	add	r7, sp, #0
1000764a:	60f8      	str	r0, [r7, #12]
1000764c:	60b9      	str	r1, [r7, #8]
1000764e:	607a      	str	r2, [r7, #4]
10007650:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
10007652:	2300      	movs	r3, #0
10007654:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
10007656:	68fb      	ldr	r3, [r7, #12]
10007658:	68ba      	ldr	r2, [r7, #8]
1000765a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1000765c:	68fb      	ldr	r3, [r7, #12]
1000765e:	68fa      	ldr	r2, [r7, #12]
10007660:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
10007662:	68ba      	ldr	r2, [r7, #8]
10007664:	687b      	ldr	r3, [r7, #4]
10007666:	429a      	cmp	r2, r3
10007668:	d812      	bhi.n	10007690 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1000766a:	687a      	ldr	r2, [r7, #4]
1000766c:	683b      	ldr	r3, [r7, #0]
1000766e:	1ad2      	subs	r2, r2, r3
10007670:	68fb      	ldr	r3, [r7, #12]
10007672:	699b      	ldr	r3, [r3, #24]
10007674:	429a      	cmp	r2, r3
10007676:	d302      	bcc.n	1000767e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
10007678:	2301      	movs	r3, #1
1000767a:	617b      	str	r3, [r7, #20]
1000767c:	e01b      	b.n	100076b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1000767e:	4b10      	ldr	r3, [pc, #64]	@ (100076c0 <prvInsertTimerInActiveList+0x7c>)
10007680:	681a      	ldr	r2, [r3, #0]
10007682:	68fb      	ldr	r3, [r7, #12]
10007684:	3304      	adds	r3, #4
10007686:	4619      	mov	r1, r3
10007688:	4610      	mov	r0, r2
1000768a:	f7fd fcfc 	bl	10005086 <vListInsert>
1000768e:	e012      	b.n	100076b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
10007690:	687a      	ldr	r2, [r7, #4]
10007692:	683b      	ldr	r3, [r7, #0]
10007694:	429a      	cmp	r2, r3
10007696:	d206      	bcs.n	100076a6 <prvInsertTimerInActiveList+0x62>
10007698:	68ba      	ldr	r2, [r7, #8]
1000769a:	683b      	ldr	r3, [r7, #0]
1000769c:	429a      	cmp	r2, r3
1000769e:	d302      	bcc.n	100076a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
100076a0:	2301      	movs	r3, #1
100076a2:	617b      	str	r3, [r7, #20]
100076a4:	e007      	b.n	100076b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
100076a6:	4b07      	ldr	r3, [pc, #28]	@ (100076c4 <prvInsertTimerInActiveList+0x80>)
100076a8:	681a      	ldr	r2, [r3, #0]
100076aa:	68fb      	ldr	r3, [r7, #12]
100076ac:	3304      	adds	r3, #4
100076ae:	4619      	mov	r1, r3
100076b0:	4610      	mov	r0, r2
100076b2:	f7fd fce8 	bl	10005086 <vListInsert>
		}
	}

	return xProcessTimerNow;
100076b6:	697b      	ldr	r3, [r7, #20]
}
100076b8:	4618      	mov	r0, r3
100076ba:	3718      	adds	r7, #24
100076bc:	46bd      	mov	sp, r7
100076be:	bd80      	pop	{r7, pc}
100076c0:	10021a60 	.word	0x10021a60
100076c4:	10021a5c 	.word	0x10021a5c

100076c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
100076c8:	b580      	push	{r7, lr}
100076ca:	b08e      	sub	sp, #56	@ 0x38
100076cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
100076ce:	e0ce      	b.n	1000786e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
100076d0:	687b      	ldr	r3, [r7, #4]
100076d2:	2b00      	cmp	r3, #0
100076d4:	da19      	bge.n	1000770a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
100076d6:	1d3b      	adds	r3, r7, #4
100076d8:	3304      	adds	r3, #4
100076da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
100076dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100076de:	2b00      	cmp	r3, #0
100076e0:	d10b      	bne.n	100076fa <prvProcessReceivedCommands+0x32>
	__asm volatile
100076e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
100076e6:	f383 8811 	msr	BASEPRI, r3
100076ea:	f3bf 8f6f 	isb	sy
100076ee:	f3bf 8f4f 	dsb	sy
100076f2:	61fb      	str	r3, [r7, #28]
}
100076f4:	bf00      	nop
100076f6:	bf00      	nop
100076f8:	e7fd      	b.n	100076f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
100076fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100076fc:	681b      	ldr	r3, [r3, #0]
100076fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10007700:	6850      	ldr	r0, [r2, #4]
10007702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10007704:	6892      	ldr	r2, [r2, #8]
10007706:	4611      	mov	r1, r2
10007708:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1000770a:	687b      	ldr	r3, [r7, #4]
1000770c:	2b00      	cmp	r3, #0
1000770e:	f2c0 80ae 	blt.w	1000786e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
10007712:	68fb      	ldr	r3, [r7, #12]
10007714:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
10007716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007718:	695b      	ldr	r3, [r3, #20]
1000771a:	2b00      	cmp	r3, #0
1000771c:	d004      	beq.n	10007728 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1000771e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007720:	3304      	adds	r3, #4
10007722:	4618      	mov	r0, r3
10007724:	f7fd fce8 	bl	100050f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
10007728:	463b      	mov	r3, r7
1000772a:	4618      	mov	r0, r3
1000772c:	f7ff ff6a 	bl	10007604 <prvSampleTimeNow>
10007730:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
10007732:	687b      	ldr	r3, [r7, #4]
10007734:	2b09      	cmp	r3, #9
10007736:	f200 8097 	bhi.w	10007868 <prvProcessReceivedCommands+0x1a0>
1000773a:	a201      	add	r2, pc, #4	@ (adr r2, 10007740 <prvProcessReceivedCommands+0x78>)
1000773c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007740:	10007769 	.word	0x10007769
10007744:	10007769 	.word	0x10007769
10007748:	10007769 	.word	0x10007769
1000774c:	100077df 	.word	0x100077df
10007750:	100077f3 	.word	0x100077f3
10007754:	1000783f 	.word	0x1000783f
10007758:	10007769 	.word	0x10007769
1000775c:	10007769 	.word	0x10007769
10007760:	100077df 	.word	0x100077df
10007764:	100077f3 	.word	0x100077f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
10007768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000776a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
1000776e:	f043 0301 	orr.w	r3, r3, #1
10007772:	b2da      	uxtb	r2, r3
10007774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007776:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1000777a:	68ba      	ldr	r2, [r7, #8]
1000777c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000777e:	699b      	ldr	r3, [r3, #24]
10007780:	18d1      	adds	r1, r2, r3
10007782:	68bb      	ldr	r3, [r7, #8]
10007784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10007786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10007788:	f7ff ff5c 	bl	10007644 <prvInsertTimerInActiveList>
1000778c:	4603      	mov	r3, r0
1000778e:	2b00      	cmp	r3, #0
10007790:	d06c      	beq.n	1000786c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
10007792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007794:	6a1b      	ldr	r3, [r3, #32]
10007796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10007798:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
1000779a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000779c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
100077a0:	f003 0304 	and.w	r3, r3, #4
100077a4:	2b00      	cmp	r3, #0
100077a6:	d061      	beq.n	1000786c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
100077a8:	68ba      	ldr	r2, [r7, #8]
100077aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100077ac:	699b      	ldr	r3, [r3, #24]
100077ae:	441a      	add	r2, r3
100077b0:	2300      	movs	r3, #0
100077b2:	9300      	str	r3, [sp, #0]
100077b4:	2300      	movs	r3, #0
100077b6:	2100      	movs	r1, #0
100077b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
100077ba:	f7ff fe01 	bl	100073c0 <xTimerGenericCommand>
100077be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
100077c0:	6a3b      	ldr	r3, [r7, #32]
100077c2:	2b00      	cmp	r3, #0
100077c4:	d152      	bne.n	1000786c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
100077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
100077ca:	f383 8811 	msr	BASEPRI, r3
100077ce:	f3bf 8f6f 	isb	sy
100077d2:	f3bf 8f4f 	dsb	sy
100077d6:	61bb      	str	r3, [r7, #24]
}
100077d8:	bf00      	nop
100077da:	bf00      	nop
100077dc:	e7fd      	b.n	100077da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
100077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100077e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
100077e4:	f023 0301 	bic.w	r3, r3, #1
100077e8:	b2da      	uxtb	r2, r3
100077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100077ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
100077f0:	e03d      	b.n	1000786e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
100077f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100077f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
100077f8:	f043 0301 	orr.w	r3, r3, #1
100077fc:	b2da      	uxtb	r2, r3
100077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007800:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
10007804:	68ba      	ldr	r2, [r7, #8]
10007806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007808:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1000780a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000780c:	699b      	ldr	r3, [r3, #24]
1000780e:	2b00      	cmp	r3, #0
10007810:	d10b      	bne.n	1000782a <prvProcessReceivedCommands+0x162>
	__asm volatile
10007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
10007816:	f383 8811 	msr	BASEPRI, r3
1000781a:	f3bf 8f6f 	isb	sy
1000781e:	f3bf 8f4f 	dsb	sy
10007822:	617b      	str	r3, [r7, #20]
}
10007824:	bf00      	nop
10007826:	bf00      	nop
10007828:	e7fd      	b.n	10007826 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1000782a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000782c:	699a      	ldr	r2, [r3, #24]
1000782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007830:	18d1      	adds	r1, r2, r3
10007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10007836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10007838:	f7ff ff04 	bl	10007644 <prvInsertTimerInActiveList>
					break;
1000783c:	e017      	b.n	1000786e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
1000783e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
10007844:	f003 0302 	and.w	r3, r3, #2
10007848:	2b00      	cmp	r3, #0
1000784a:	d103      	bne.n	10007854 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
1000784c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
1000784e:	f7fd fab1 	bl	10004db4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
10007852:	e00c      	b.n	1000786e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
10007854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007856:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
1000785a:	f023 0301 	bic.w	r3, r3, #1
1000785e:	b2da      	uxtb	r2, r3
10007860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007862:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
10007866:	e002      	b.n	1000786e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
10007868:	bf00      	nop
1000786a:	e000      	b.n	1000786e <prvProcessReceivedCommands+0x1a6>
					break;
1000786c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1000786e:	4b08      	ldr	r3, [pc, #32]	@ (10007890 <prvProcessReceivedCommands+0x1c8>)
10007870:	681b      	ldr	r3, [r3, #0]
10007872:	1d39      	adds	r1, r7, #4
10007874:	2200      	movs	r2, #0
10007876:	4618      	mov	r0, r3
10007878:	f7fe f9d4 	bl	10005c24 <xQueueReceive>
1000787c:	4603      	mov	r3, r0
1000787e:	2b00      	cmp	r3, #0
10007880:	f47f af26 	bne.w	100076d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
10007884:	bf00      	nop
10007886:	bf00      	nop
10007888:	3730      	adds	r7, #48	@ 0x30
1000788a:	46bd      	mov	sp, r7
1000788c:	bd80      	pop	{r7, pc}
1000788e:	bf00      	nop
10007890:	10021a64 	.word	0x10021a64

10007894 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
10007894:	b580      	push	{r7, lr}
10007896:	b088      	sub	sp, #32
10007898:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1000789a:	e049      	b.n	10007930 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1000789c:	4b2e      	ldr	r3, [pc, #184]	@ (10007958 <prvSwitchTimerLists+0xc4>)
1000789e:	681b      	ldr	r3, [r3, #0]
100078a0:	68db      	ldr	r3, [r3, #12]
100078a2:	681b      	ldr	r3, [r3, #0]
100078a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
100078a6:	4b2c      	ldr	r3, [pc, #176]	@ (10007958 <prvSwitchTimerLists+0xc4>)
100078a8:	681b      	ldr	r3, [r3, #0]
100078aa:	68db      	ldr	r3, [r3, #12]
100078ac:	68db      	ldr	r3, [r3, #12]
100078ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
100078b0:	68fb      	ldr	r3, [r7, #12]
100078b2:	3304      	adds	r3, #4
100078b4:	4618      	mov	r0, r3
100078b6:	f7fd fc1f 	bl	100050f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
100078ba:	68fb      	ldr	r3, [r7, #12]
100078bc:	6a1b      	ldr	r3, [r3, #32]
100078be:	68f8      	ldr	r0, [r7, #12]
100078c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
100078c2:	68fb      	ldr	r3, [r7, #12]
100078c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
100078c8:	f003 0304 	and.w	r3, r3, #4
100078cc:	2b00      	cmp	r3, #0
100078ce:	d02f      	beq.n	10007930 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
100078d0:	68fb      	ldr	r3, [r7, #12]
100078d2:	699b      	ldr	r3, [r3, #24]
100078d4:	693a      	ldr	r2, [r7, #16]
100078d6:	4413      	add	r3, r2
100078d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
100078da:	68ba      	ldr	r2, [r7, #8]
100078dc:	693b      	ldr	r3, [r7, #16]
100078de:	429a      	cmp	r2, r3
100078e0:	d90e      	bls.n	10007900 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
100078e2:	68fb      	ldr	r3, [r7, #12]
100078e4:	68ba      	ldr	r2, [r7, #8]
100078e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
100078e8:	68fb      	ldr	r3, [r7, #12]
100078ea:	68fa      	ldr	r2, [r7, #12]
100078ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
100078ee:	4b1a      	ldr	r3, [pc, #104]	@ (10007958 <prvSwitchTimerLists+0xc4>)
100078f0:	681a      	ldr	r2, [r3, #0]
100078f2:	68fb      	ldr	r3, [r7, #12]
100078f4:	3304      	adds	r3, #4
100078f6:	4619      	mov	r1, r3
100078f8:	4610      	mov	r0, r2
100078fa:	f7fd fbc4 	bl	10005086 <vListInsert>
100078fe:	e017      	b.n	10007930 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
10007900:	2300      	movs	r3, #0
10007902:	9300      	str	r3, [sp, #0]
10007904:	2300      	movs	r3, #0
10007906:	693a      	ldr	r2, [r7, #16]
10007908:	2100      	movs	r1, #0
1000790a:	68f8      	ldr	r0, [r7, #12]
1000790c:	f7ff fd58 	bl	100073c0 <xTimerGenericCommand>
10007910:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
10007912:	687b      	ldr	r3, [r7, #4]
10007914:	2b00      	cmp	r3, #0
10007916:	d10b      	bne.n	10007930 <prvSwitchTimerLists+0x9c>
	__asm volatile
10007918:	f04f 0350 	mov.w	r3, #80	@ 0x50
1000791c:	f383 8811 	msr	BASEPRI, r3
10007920:	f3bf 8f6f 	isb	sy
10007924:	f3bf 8f4f 	dsb	sy
10007928:	603b      	str	r3, [r7, #0]
}
1000792a:	bf00      	nop
1000792c:	bf00      	nop
1000792e:	e7fd      	b.n	1000792c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
10007930:	4b09      	ldr	r3, [pc, #36]	@ (10007958 <prvSwitchTimerLists+0xc4>)
10007932:	681b      	ldr	r3, [r3, #0]
10007934:	681b      	ldr	r3, [r3, #0]
10007936:	2b00      	cmp	r3, #0
10007938:	d1b0      	bne.n	1000789c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
1000793a:	4b07      	ldr	r3, [pc, #28]	@ (10007958 <prvSwitchTimerLists+0xc4>)
1000793c:	681b      	ldr	r3, [r3, #0]
1000793e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
10007940:	4b06      	ldr	r3, [pc, #24]	@ (1000795c <prvSwitchTimerLists+0xc8>)
10007942:	681b      	ldr	r3, [r3, #0]
10007944:	4a04      	ldr	r2, [pc, #16]	@ (10007958 <prvSwitchTimerLists+0xc4>)
10007946:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
10007948:	4a04      	ldr	r2, [pc, #16]	@ (1000795c <prvSwitchTimerLists+0xc8>)
1000794a:	697b      	ldr	r3, [r7, #20]
1000794c:	6013      	str	r3, [r2, #0]
}
1000794e:	bf00      	nop
10007950:	3718      	adds	r7, #24
10007952:	46bd      	mov	sp, r7
10007954:	bd80      	pop	{r7, pc}
10007956:	bf00      	nop
10007958:	10021a5c 	.word	0x10021a5c
1000795c:	10021a60 	.word	0x10021a60

10007960 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
10007960:	b580      	push	{r7, lr}
10007962:	b082      	sub	sp, #8
10007964:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
10007966:	f7fd fd1f 	bl	100053a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1000796a:	4b15      	ldr	r3, [pc, #84]	@ (100079c0 <prvCheckForValidListAndQueue+0x60>)
1000796c:	681b      	ldr	r3, [r3, #0]
1000796e:	2b00      	cmp	r3, #0
10007970:	d120      	bne.n	100079b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
10007972:	4814      	ldr	r0, [pc, #80]	@ (100079c4 <prvCheckForValidListAndQueue+0x64>)
10007974:	f7fd fb36 	bl	10004fe4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
10007978:	4813      	ldr	r0, [pc, #76]	@ (100079c8 <prvCheckForValidListAndQueue+0x68>)
1000797a:	f7fd fb33 	bl	10004fe4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1000797e:	4b13      	ldr	r3, [pc, #76]	@ (100079cc <prvCheckForValidListAndQueue+0x6c>)
10007980:	4a10      	ldr	r2, [pc, #64]	@ (100079c4 <prvCheckForValidListAndQueue+0x64>)
10007982:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
10007984:	4b12      	ldr	r3, [pc, #72]	@ (100079d0 <prvCheckForValidListAndQueue+0x70>)
10007986:	4a10      	ldr	r2, [pc, #64]	@ (100079c8 <prvCheckForValidListAndQueue+0x68>)
10007988:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1000798a:	2300      	movs	r3, #0
1000798c:	9300      	str	r3, [sp, #0]
1000798e:	4b11      	ldr	r3, [pc, #68]	@ (100079d4 <prvCheckForValidListAndQueue+0x74>)
10007990:	4a11      	ldr	r2, [pc, #68]	@ (100079d8 <prvCheckForValidListAndQueue+0x78>)
10007992:	2110      	movs	r1, #16
10007994:	200a      	movs	r0, #10
10007996:	f7fd fe93 	bl	100056c0 <xQueueGenericCreateStatic>
1000799a:	4603      	mov	r3, r0
1000799c:	4a08      	ldr	r2, [pc, #32]	@ (100079c0 <prvCheckForValidListAndQueue+0x60>)
1000799e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
100079a0:	4b07      	ldr	r3, [pc, #28]	@ (100079c0 <prvCheckForValidListAndQueue+0x60>)
100079a2:	681b      	ldr	r3, [r3, #0]
100079a4:	2b00      	cmp	r3, #0
100079a6:	d005      	beq.n	100079b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
100079a8:	4b05      	ldr	r3, [pc, #20]	@ (100079c0 <prvCheckForValidListAndQueue+0x60>)
100079aa:	681b      	ldr	r3, [r3, #0]
100079ac:	490b      	ldr	r1, [pc, #44]	@ (100079dc <prvCheckForValidListAndQueue+0x7c>)
100079ae:	4618      	mov	r0, r3
100079b0:	f7fe fc52 	bl	10006258 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
100079b4:	f7fd fd2a 	bl	1000540c <vPortExitCritical>
}
100079b8:	bf00      	nop
100079ba:	46bd      	mov	sp, r7
100079bc:	bd80      	pop	{r7, pc}
100079be:	bf00      	nop
100079c0:	10021a64 	.word	0x10021a64
100079c4:	10021a34 	.word	0x10021a34
100079c8:	10021a48 	.word	0x10021a48
100079cc:	10021a5c 	.word	0x10021a5c
100079d0:	10021a60 	.word	0x10021a60
100079d4:	10021b10 	.word	0x10021b10
100079d8:	10021a70 	.word	0x10021a70
100079dc:	1000acdc 	.word	0x1000acdc

100079e0 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
100079e0:	b480      	push	{r7}
100079e2:	b083      	sub	sp, #12
100079e4:	af00      	add	r7, sp, #0
100079e6:	6078      	str	r0, [r7, #4]
	list->prev = list;
100079e8:	687b      	ldr	r3, [r7, #4]
100079ea:	687a      	ldr	r2, [r7, #4]
100079ec:	605a      	str	r2, [r3, #4]
	list->next = list;
100079ee:	687b      	ldr	r3, [r7, #4]
100079f0:	687a      	ldr	r2, [r7, #4]
100079f2:	601a      	str	r2, [r3, #0]
}
100079f4:	bf00      	nop
100079f6:	370c      	adds	r7, #12
100079f8:	46bd      	mov	sp, r7
100079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100079fe:	4770      	bx	lr

10007a00 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
10007a00:	b480      	push	{r7}
10007a02:	b083      	sub	sp, #12
10007a04:	af00      	add	r7, sp, #0
10007a06:	6078      	str	r0, [r7, #4]
10007a08:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10007a0a:	687b      	ldr	r3, [r7, #4]
10007a0c:	685a      	ldr	r2, [r3, #4]
10007a0e:	683b      	ldr	r3, [r7, #0]
10007a10:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10007a12:	683b      	ldr	r3, [r7, #0]
10007a14:	687a      	ldr	r2, [r7, #4]
10007a16:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10007a18:	683b      	ldr	r3, [r7, #0]
10007a1a:	681b      	ldr	r3, [r3, #0]
10007a1c:	683a      	ldr	r2, [r7, #0]
10007a1e:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10007a20:	683b      	ldr	r3, [r7, #0]
10007a22:	685b      	ldr	r3, [r3, #4]
10007a24:	683a      	ldr	r2, [r7, #0]
10007a26:	601a      	str	r2, [r3, #0]
}
10007a28:	bf00      	nop
10007a2a:	370c      	adds	r7, #12
10007a2c:	46bd      	mov	sp, r7
10007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
10007a32:	4770      	bx	lr

10007a34 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
10007a34:	b580      	push	{r7, lr}
10007a36:	b082      	sub	sp, #8
10007a38:	af00      	add	r7, sp, #0
10007a3a:	6078      	str	r0, [r7, #4]
10007a3c:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10007a3e:	6839      	ldr	r1, [r7, #0]
10007a40:	6878      	ldr	r0, [r7, #4]
10007a42:	f7ff ffdd 	bl	10007a00 <metal_list_add_before>
}
10007a46:	bf00      	nop
10007a48:	3708      	adds	r7, #8
10007a4a:	46bd      	mov	sp, r7
10007a4c:	bd80      	pop	{r7, pc}

10007a4e <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
10007a4e:	b580      	push	{r7, lr}
10007a50:	b082      	sub	sp, #8
10007a52:	af00      	add	r7, sp, #0
10007a54:	6078      	str	r0, [r7, #4]
10007a56:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
10007a58:	6839      	ldr	r1, [r7, #0]
10007a5a:	6878      	ldr	r0, [r7, #4]
10007a5c:	f001 fc50 	bl	10009300 <metal_machine_cache_flush>
}
10007a60:	bf00      	nop
10007a62:	3708      	adds	r7, #8
10007a64:	46bd      	mov	sp, r7
10007a66:	bd80      	pop	{r7, pc}

10007a68 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
10007a68:	b580      	push	{r7, lr}
10007a6a:	b082      	sub	sp, #8
10007a6c:	af00      	add	r7, sp, #0
10007a6e:	6078      	str	r0, [r7, #4]
10007a70:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
10007a72:	6839      	ldr	r1, [r7, #0]
10007a74:	6878      	ldr	r0, [r7, #4]
10007a76:	f001 fc4e 	bl	10009316 <metal_machine_cache_invalidate>
}
10007a7a:	bf00      	nop
10007a7c:	3708      	adds	r7, #8
10007a7e:	46bd      	mov	sp, r7
10007a80:	bd80      	pop	{r7, pc}

10007a82 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
10007a82:	b580      	push	{r7, lr}
10007a84:	b082      	sub	sp, #8
10007a86:	af00      	add	r7, sp, #0
10007a88:	6078      	str	r0, [r7, #4]
10007a8a:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
10007a8c:	6839      	ldr	r1, [r7, #0]
10007a8e:	6878      	ldr	r0, [r7, #4]
10007a90:	f7ff ffdd 	bl	10007a4e <__metal_cache_flush>
}
10007a94:	bf00      	nop
10007a96:	3708      	adds	r7, #8
10007a98:	46bd      	mov	sp, r7
10007a9a:	bd80      	pop	{r7, pc}

10007a9c <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
10007a9c:	b580      	push	{r7, lr}
10007a9e:	b082      	sub	sp, #8
10007aa0:	af00      	add	r7, sp, #0
10007aa2:	6078      	str	r0, [r7, #4]
10007aa4:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
10007aa6:	6839      	ldr	r1, [r7, #0]
10007aa8:	6878      	ldr	r0, [r7, #4]
10007aaa:	f7ff ffdd 	bl	10007a68 <__metal_cache_invalidate>
}
10007aae:	bf00      	nop
10007ab0:	3708      	adds	r7, #8
10007ab2:	46bd      	mov	sp, r7
10007ab4:	bd80      	pop	{r7, pc}
	...

10007ab8 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
10007ab8:	b580      	push	{r7, lr}
10007aba:	b082      	sub	sp, #8
10007abc:	af00      	add	r7, sp, #0
10007abe:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
10007ac0:	687b      	ldr	r3, [r7, #4]
10007ac2:	2b00      	cmp	r3, #0
10007ac4:	d008      	beq.n	10007ad8 <metal_bus_register+0x20>
10007ac6:	687b      	ldr	r3, [r7, #4]
10007ac8:	681b      	ldr	r3, [r3, #0]
10007aca:	2b00      	cmp	r3, #0
10007acc:	d004      	beq.n	10007ad8 <metal_bus_register+0x20>
10007ace:	687b      	ldr	r3, [r7, #4]
10007ad0:	681b      	ldr	r3, [r3, #0]
10007ad2:	781b      	ldrb	r3, [r3, #0]
10007ad4:	2b00      	cmp	r3, #0
10007ad6:	d102      	bne.n	10007ade <metal_bus_register+0x26>
		return -EINVAL;
10007ad8:	f06f 0315 	mvn.w	r3, #21
10007adc:	e026      	b.n	10007b2c <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
10007ade:	687b      	ldr	r3, [r7, #4]
10007ae0:	681b      	ldr	r3, [r3, #0]
10007ae2:	2100      	movs	r1, #0
10007ae4:	4618      	mov	r0, r3
10007ae6:	f000 f82b 	bl	10007b40 <metal_bus_find>
10007aea:	4603      	mov	r3, r0
10007aec:	2b00      	cmp	r3, #0
10007aee:	d102      	bne.n	10007af6 <metal_bus_register+0x3e>
		return -EEXIST;
10007af0:	f06f 0310 	mvn.w	r3, #16
10007af4:	e01a      	b.n	10007b2c <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
10007af6:	687b      	ldr	r3, [r7, #4]
10007af8:	331c      	adds	r3, #28
10007afa:	4618      	mov	r0, r3
10007afc:	f7ff ff70 	bl	100079e0 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
10007b00:	687b      	ldr	r3, [r7, #4]
10007b02:	3324      	adds	r3, #36	@ 0x24
10007b04:	4619      	mov	r1, r3
10007b06:	480b      	ldr	r0, [pc, #44]	@ (10007b34 <metal_bus_register+0x7c>)
10007b08:	f7ff ff94 	bl	10007a34 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
10007b0c:	4b0a      	ldr	r3, [pc, #40]	@ (10007b38 <metal_bus_register+0x80>)
10007b0e:	781b      	ldrb	r3, [r3, #0]
10007b10:	2b06      	cmp	r3, #6
10007b12:	d90a      	bls.n	10007b2a <metal_bus_register+0x72>
10007b14:	4b08      	ldr	r3, [pc, #32]	@ (10007b38 <metal_bus_register+0x80>)
10007b16:	685b      	ldr	r3, [r3, #4]
10007b18:	2b00      	cmp	r3, #0
10007b1a:	d006      	beq.n	10007b2a <metal_bus_register+0x72>
10007b1c:	4b06      	ldr	r3, [pc, #24]	@ (10007b38 <metal_bus_register+0x80>)
10007b1e:	685b      	ldr	r3, [r3, #4]
10007b20:	687a      	ldr	r2, [r7, #4]
10007b22:	6812      	ldr	r2, [r2, #0]
10007b24:	4905      	ldr	r1, [pc, #20]	@ (10007b3c <metal_bus_register+0x84>)
10007b26:	2007      	movs	r0, #7
10007b28:	4798      	blx	r3
	return 0;
10007b2a:	2300      	movs	r3, #0
}
10007b2c:	4618      	mov	r0, r3
10007b2e:	3708      	adds	r7, #8
10007b30:	46bd      	mov	sp, r7
10007b32:	bd80      	pop	{r7, pc}
10007b34:	10021b68 	.word	0x10021b68
10007b38:	10021b60 	.word	0x10021b60
10007b3c:	1000ace4 	.word	0x1000ace4

10007b40 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
10007b40:	b580      	push	{r7, lr}
10007b42:	b084      	sub	sp, #16
10007b44:	af00      	add	r7, sp, #0
10007b46:	6078      	str	r0, [r7, #4]
10007b48:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
10007b4a:	4b12      	ldr	r3, [pc, #72]	@ (10007b94 <metal_bus_find+0x54>)
10007b4c:	689b      	ldr	r3, [r3, #8]
10007b4e:	60fb      	str	r3, [r7, #12]
10007b50:	e016      	b.n	10007b80 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
10007b52:	68fb      	ldr	r3, [r7, #12]
10007b54:	3b24      	subs	r3, #36	@ 0x24
10007b56:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
10007b58:	68bb      	ldr	r3, [r7, #8]
10007b5a:	681b      	ldr	r3, [r3, #0]
10007b5c:	6879      	ldr	r1, [r7, #4]
10007b5e:	4618      	mov	r0, r3
10007b60:	f7f8 fa6e 	bl	10000040 <strcmp>
10007b64:	4603      	mov	r3, r0
10007b66:	2b00      	cmp	r3, #0
10007b68:	d107      	bne.n	10007b7a <metal_bus_find+0x3a>
10007b6a:	683b      	ldr	r3, [r7, #0]
10007b6c:	2b00      	cmp	r3, #0
10007b6e:	d004      	beq.n	10007b7a <metal_bus_find+0x3a>
			*result = bus;
10007b70:	683b      	ldr	r3, [r7, #0]
10007b72:	68ba      	ldr	r2, [r7, #8]
10007b74:	601a      	str	r2, [r3, #0]
			return 0;
10007b76:	2300      	movs	r3, #0
10007b78:	e008      	b.n	10007b8c <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
10007b7a:	68fb      	ldr	r3, [r7, #12]
10007b7c:	681b      	ldr	r3, [r3, #0]
10007b7e:	60fb      	str	r3, [r7, #12]
10007b80:	68fb      	ldr	r3, [r7, #12]
10007b82:	4a05      	ldr	r2, [pc, #20]	@ (10007b98 <metal_bus_find+0x58>)
10007b84:	4293      	cmp	r3, r2
10007b86:	d1e4      	bne.n	10007b52 <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
10007b88:	f06f 0301 	mvn.w	r3, #1
}
10007b8c:	4618      	mov	r0, r3
10007b8e:	3710      	adds	r7, #16
10007b90:	46bd      	mov	sp, r7
10007b92:	bd80      	pop	{r7, pc}
10007b94:	10021b60 	.word	0x10021b60
10007b98:	10021b68 	.word	0x10021b68

10007b9c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
10007b9c:	b580      	push	{r7, lr}
10007b9e:	b086      	sub	sp, #24
10007ba0:	af00      	add	r7, sp, #0
10007ba2:	60f8      	str	r0, [r7, #12]
10007ba4:	60b9      	str	r1, [r7, #8]
10007ba6:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
10007ba8:	68fb      	ldr	r3, [r7, #12]
10007baa:	2b00      	cmp	r3, #0
10007bac:	d00d      	beq.n	10007bca <metal_device_open+0x2e>
10007bae:	68fb      	ldr	r3, [r7, #12]
10007bb0:	781b      	ldrb	r3, [r3, #0]
10007bb2:	2b00      	cmp	r3, #0
10007bb4:	d009      	beq.n	10007bca <metal_device_open+0x2e>
10007bb6:	68bb      	ldr	r3, [r7, #8]
10007bb8:	2b00      	cmp	r3, #0
10007bba:	d006      	beq.n	10007bca <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
10007bbc:	68bb      	ldr	r3, [r7, #8]
10007bbe:	781b      	ldrb	r3, [r3, #0]
10007bc0:	2b00      	cmp	r3, #0
10007bc2:	d002      	beq.n	10007bca <metal_device_open+0x2e>
10007bc4:	687b      	ldr	r3, [r7, #4]
10007bc6:	2b00      	cmp	r3, #0
10007bc8:	d102      	bne.n	10007bd0 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
10007bca:	f06f 0315 	mvn.w	r3, #21
10007bce:	e01f      	b.n	10007c10 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
10007bd0:	f107 0310 	add.w	r3, r7, #16
10007bd4:	4619      	mov	r1, r3
10007bd6:	68f8      	ldr	r0, [r7, #12]
10007bd8:	f7ff ffb2 	bl	10007b40 <metal_bus_find>
10007bdc:	6178      	str	r0, [r7, #20]
	if (error)
10007bde:	697b      	ldr	r3, [r7, #20]
10007be0:	2b00      	cmp	r3, #0
10007be2:	d001      	beq.n	10007be8 <metal_device_open+0x4c>
		return error;
10007be4:	697b      	ldr	r3, [r7, #20]
10007be6:	e013      	b.n	10007c10 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
10007be8:	693b      	ldr	r3, [r7, #16]
10007bea:	689b      	ldr	r3, [r3, #8]
10007bec:	2b00      	cmp	r3, #0
10007bee:	d102      	bne.n	10007bf6 <metal_device_open+0x5a>
		return -ENODEV;
10007bf0:	f06f 0312 	mvn.w	r3, #18
10007bf4:	e00c      	b.n	10007c10 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
10007bf6:	693b      	ldr	r3, [r7, #16]
10007bf8:	689b      	ldr	r3, [r3, #8]
10007bfa:	6938      	ldr	r0, [r7, #16]
10007bfc:	687a      	ldr	r2, [r7, #4]
10007bfe:	68b9      	ldr	r1, [r7, #8]
10007c00:	4798      	blx	r3
10007c02:	6178      	str	r0, [r7, #20]
	if (error)
10007c04:	697b      	ldr	r3, [r7, #20]
10007c06:	2b00      	cmp	r3, #0
10007c08:	d001      	beq.n	10007c0e <metal_device_open+0x72>
		return error;
10007c0a:	697b      	ldr	r3, [r7, #20]
10007c0c:	e000      	b.n	10007c10 <metal_device_open+0x74>

	return 0;
10007c0e:	2300      	movs	r3, #0
}
10007c10:	4618      	mov	r0, r3
10007c12:	3718      	adds	r7, #24
10007c14:	46bd      	mov	sp, r7
10007c16:	bd80      	pop	{r7, pc}

10007c18 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
10007c18:	b580      	push	{r7, lr}
10007c1a:	b082      	sub	sp, #8
10007c1c:	af00      	add	r7, sp, #0
10007c1e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
10007c20:	687b      	ldr	r3, [r7, #4]
10007c22:	681b      	ldr	r3, [r3, #0]
10007c24:	2b00      	cmp	r3, #0
10007c26:	d008      	beq.n	10007c3a <metal_register_generic_device+0x22>
10007c28:	687b      	ldr	r3, [r7, #4]
10007c2a:	681b      	ldr	r3, [r3, #0]
10007c2c:	781b      	ldrb	r3, [r3, #0]
10007c2e:	2b00      	cmp	r3, #0
10007c30:	d003      	beq.n	10007c3a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
10007c32:	687b      	ldr	r3, [r7, #4]
10007c34:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
10007c36:	2b02      	cmp	r3, #2
10007c38:	d902      	bls.n	10007c40 <metal_register_generic_device+0x28>
		return -EINVAL;
10007c3a:	f06f 0315 	mvn.w	r3, #21
10007c3e:	e009      	b.n	10007c54 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
10007c40:	687b      	ldr	r3, [r7, #4]
10007c42:	4a06      	ldr	r2, [pc, #24]	@ (10007c5c <metal_register_generic_device+0x44>)
10007c44:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
10007c46:	687b      	ldr	r3, [r7, #4]
10007c48:	337c      	adds	r3, #124	@ 0x7c
10007c4a:	4619      	mov	r1, r3
10007c4c:	4804      	ldr	r0, [pc, #16]	@ (10007c60 <metal_register_generic_device+0x48>)
10007c4e:	f7ff fef1 	bl	10007a34 <metal_list_add_tail>
			    &device->node);
	return 0;
10007c52:	2300      	movs	r3, #0
}
10007c54:	4618      	mov	r0, r3
10007c56:	3708      	adds	r7, #8
10007c58:	46bd      	mov	sp, r7
10007c5a:	bd80      	pop	{r7, pc}
10007c5c:	10020010 	.word	0x10020010
10007c60:	10021b78 	.word	0x10021b78

10007c64 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
10007c64:	b580      	push	{r7, lr}
10007c66:	b086      	sub	sp, #24
10007c68:	af00      	add	r7, sp, #0
10007c6a:	60f8      	str	r0, [r7, #12]
10007c6c:	60b9      	str	r1, [r7, #8]
10007c6e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
10007c70:	4b12      	ldr	r3, [pc, #72]	@ (10007cbc <metal_generic_dev_open+0x58>)
10007c72:	699b      	ldr	r3, [r3, #24]
10007c74:	617b      	str	r3, [r7, #20]
10007c76:	e016      	b.n	10007ca6 <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
10007c78:	697b      	ldr	r3, [r7, #20]
10007c7a:	3b7c      	subs	r3, #124	@ 0x7c
10007c7c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
10007c7e:	693b      	ldr	r3, [r7, #16]
10007c80:	681b      	ldr	r3, [r3, #0]
10007c82:	68b9      	ldr	r1, [r7, #8]
10007c84:	4618      	mov	r0, r3
10007c86:	f7f8 f9db 	bl	10000040 <strcmp>
10007c8a:	4603      	mov	r3, r0
10007c8c:	2b00      	cmp	r3, #0
10007c8e:	d107      	bne.n	10007ca0 <metal_generic_dev_open+0x3c>
			*device = dev;
10007c90:	687b      	ldr	r3, [r7, #4]
10007c92:	693a      	ldr	r2, [r7, #16]
10007c94:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
10007c96:	6938      	ldr	r0, [r7, #16]
10007c98:	f000 f890 	bl	10007dbc <metal_generic_dev_sys_open>
10007c9c:	4603      	mov	r3, r0
10007c9e:	e008      	b.n	10007cb2 <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
10007ca0:	697b      	ldr	r3, [r7, #20]
10007ca2:	681b      	ldr	r3, [r3, #0]
10007ca4:	617b      	str	r3, [r7, #20]
10007ca6:	697b      	ldr	r3, [r7, #20]
10007ca8:	4a05      	ldr	r2, [pc, #20]	@ (10007cc0 <metal_generic_dev_open+0x5c>)
10007caa:	4293      	cmp	r3, r2
10007cac:	d1e4      	bne.n	10007c78 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
10007cae:	f06f 0312 	mvn.w	r3, #18
}
10007cb2:	4618      	mov	r0, r3
10007cb4:	3718      	adds	r7, #24
10007cb6:	46bd      	mov	sp, r7
10007cb8:	bd80      	pop	{r7, pc}
10007cba:	bf00      	nop
10007cbc:	10021b60 	.word	0x10021b60
10007cc0:	10021b78 	.word	0x10021b78

10007cc4 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
10007cc4:	b580      	push	{r7, lr}
10007cc6:	b086      	sub	sp, #24
10007cc8:	af00      	add	r7, sp, #0
10007cca:	60f8      	str	r0, [r7, #12]
10007ccc:	60b9      	str	r1, [r7, #8]
10007cce:	607a      	str	r2, [r7, #4]
10007cd0:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
10007cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10007cd4:	683b      	ldr	r3, [r7, #0]
10007cd6:	429a      	cmp	r2, r3
10007cd8:	d009      	beq.n	10007cee <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
10007cda:	6a3a      	ldr	r2, [r7, #32]
10007cdc:	4613      	mov	r3, r2
10007cde:	005b      	lsls	r3, r3, #1
10007ce0:	4413      	add	r3, r2
10007ce2:	009b      	lsls	r3, r3, #2
10007ce4:	461a      	mov	r2, r3
10007ce6:	6839      	ldr	r1, [r7, #0]
10007ce8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10007cea:	f002 f9be 	bl	1000a06a <memcpy>
	for (i = 0; i < nents_in; i++) {
10007cee:	2300      	movs	r3, #0
10007cf0:	617b      	str	r3, [r7, #20]
10007cf2:	e02f      	b.n	10007d54 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
10007cf4:	687b      	ldr	r3, [r7, #4]
10007cf6:	2b02      	cmp	r3, #2
10007cf8:	d114      	bne.n	10007d24 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
10007cfa:	697a      	ldr	r2, [r7, #20]
10007cfc:	4613      	mov	r3, r2
10007cfe:	005b      	lsls	r3, r3, #1
10007d00:	4413      	add	r3, r2
10007d02:	009b      	lsls	r3, r3, #2
10007d04:	461a      	mov	r2, r3
10007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007d08:	4413      	add	r3, r2
10007d0a:	6818      	ldr	r0, [r3, #0]
10007d0c:	697a      	ldr	r2, [r7, #20]
10007d0e:	4613      	mov	r3, r2
10007d10:	005b      	lsls	r3, r3, #1
10007d12:	4413      	add	r3, r2
10007d14:	009b      	lsls	r3, r3, #2
10007d16:	461a      	mov	r2, r3
10007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007d1a:	4413      	add	r3, r2
10007d1c:	689b      	ldr	r3, [r3, #8]
10007d1e:	4619      	mov	r1, r3
10007d20:	f7ff feaf 	bl	10007a82 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
10007d24:	697a      	ldr	r2, [r7, #20]
10007d26:	4613      	mov	r3, r2
10007d28:	005b      	lsls	r3, r3, #1
10007d2a:	4413      	add	r3, r2
10007d2c:	009b      	lsls	r3, r3, #2
10007d2e:	461a      	mov	r2, r3
10007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007d32:	4413      	add	r3, r2
10007d34:	6818      	ldr	r0, [r3, #0]
10007d36:	697a      	ldr	r2, [r7, #20]
10007d38:	4613      	mov	r3, r2
10007d3a:	005b      	lsls	r3, r3, #1
10007d3c:	4413      	add	r3, r2
10007d3e:	009b      	lsls	r3, r3, #2
10007d40:	461a      	mov	r2, r3
10007d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007d44:	4413      	add	r3, r2
10007d46:	689b      	ldr	r3, [r3, #8]
10007d48:	4619      	mov	r1, r3
10007d4a:	f7ff fea7 	bl	10007a9c <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
10007d4e:	697b      	ldr	r3, [r7, #20]
10007d50:	3301      	adds	r3, #1
10007d52:	617b      	str	r3, [r7, #20]
10007d54:	697a      	ldr	r2, [r7, #20]
10007d56:	6a3b      	ldr	r3, [r7, #32]
10007d58:	429a      	cmp	r2, r3
10007d5a:	dbcb      	blt.n	10007cf4 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
10007d5c:	6a3b      	ldr	r3, [r7, #32]
}
10007d5e:	4618      	mov	r0, r3
10007d60:	3718      	adds	r7, #24
10007d62:	46bd      	mov	sp, r7
10007d64:	bd80      	pop	{r7, pc}

10007d66 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
10007d66:	b580      	push	{r7, lr}
10007d68:	b086      	sub	sp, #24
10007d6a:	af00      	add	r7, sp, #0
10007d6c:	60f8      	str	r0, [r7, #12]
10007d6e:	60b9      	str	r1, [r7, #8]
10007d70:	607a      	str	r2, [r7, #4]
10007d72:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
10007d74:	2300      	movs	r3, #0
10007d76:	617b      	str	r3, [r7, #20]
10007d78:	e017      	b.n	10007daa <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
10007d7a:	697a      	ldr	r2, [r7, #20]
10007d7c:	4613      	mov	r3, r2
10007d7e:	005b      	lsls	r3, r3, #1
10007d80:	4413      	add	r3, r2
10007d82:	009b      	lsls	r3, r3, #2
10007d84:	461a      	mov	r2, r3
10007d86:	683b      	ldr	r3, [r7, #0]
10007d88:	4413      	add	r3, r2
10007d8a:	6818      	ldr	r0, [r3, #0]
10007d8c:	697a      	ldr	r2, [r7, #20]
10007d8e:	4613      	mov	r3, r2
10007d90:	005b      	lsls	r3, r3, #1
10007d92:	4413      	add	r3, r2
10007d94:	009b      	lsls	r3, r3, #2
10007d96:	461a      	mov	r2, r3
10007d98:	683b      	ldr	r3, [r7, #0]
10007d9a:	4413      	add	r3, r2
10007d9c:	689b      	ldr	r3, [r3, #8]
10007d9e:	4619      	mov	r1, r3
10007da0:	f7ff fe7c 	bl	10007a9c <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
10007da4:	697b      	ldr	r3, [r7, #20]
10007da6:	3301      	adds	r3, #1
10007da8:	617b      	str	r3, [r7, #20]
10007daa:	697a      	ldr	r2, [r7, #20]
10007dac:	6a3b      	ldr	r3, [r7, #32]
10007dae:	429a      	cmp	r2, r3
10007db0:	dbe3      	blt.n	10007d7a <metal_generic_dev_dma_unmap+0x14>
	}
}
10007db2:	bf00      	nop
10007db4:	bf00      	nop
10007db6:	3718      	adds	r7, #24
10007db8:	46bd      	mov	sp, r7
10007dba:	bd80      	pop	{r7, pc}

10007dbc <metal_generic_dev_sys_open>:
#include <metal/device.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
10007dbc:	b580      	push	{r7, lr}
10007dbe:	b084      	sub	sp, #16
10007dc0:	af00      	add	r7, sp, #0
10007dc2:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
10007dc4:	2300      	movs	r3, #0
10007dc6:	60fb      	str	r3, [r7, #12]
10007dc8:	e013      	b.n	10007df2 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
10007dca:	68fa      	ldr	r2, [r7, #12]
10007dcc:	4613      	mov	r3, r2
10007dce:	00db      	lsls	r3, r3, #3
10007dd0:	1a9b      	subs	r3, r3, r2
10007dd2:	00db      	lsls	r3, r3, #3
10007dd4:	3308      	adds	r3, #8
10007dd6:	687a      	ldr	r2, [r7, #4]
10007dd8:	4413      	add	r3, r2
10007dda:	3304      	adds	r3, #4
10007ddc:	60bb      	str	r3, [r7, #8]
		if (!io->size)
10007dde:	68bb      	ldr	r3, [r7, #8]
10007de0:	689b      	ldr	r3, [r3, #8]
10007de2:	2b00      	cmp	r3, #0
10007de4:	d00b      	beq.n	10007dfe <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
10007de6:	68b8      	ldr	r0, [r7, #8]
10007de8:	f000 f81e 	bl	10007e28 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
10007dec:	68fb      	ldr	r3, [r7, #12]
10007dee:	3301      	adds	r3, #1
10007df0:	60fb      	str	r3, [r7, #12]
10007df2:	687b      	ldr	r3, [r7, #4]
10007df4:	689b      	ldr	r3, [r3, #8]
10007df6:	68fa      	ldr	r2, [r7, #12]
10007df8:	429a      	cmp	r2, r3
10007dfa:	d3e6      	bcc.n	10007dca <metal_generic_dev_sys_open+0xe>
10007dfc:	e000      	b.n	10007e00 <metal_generic_dev_sys_open+0x44>
			break;
10007dfe:	bf00      	nop
	}

	return 0;
10007e00:	2300      	movs	r3, #0
}
10007e02:	4618      	mov	r0, r3
10007e04:	3710      	adds	r7, #16
10007e06:	46bd      	mov	sp, r7
10007e08:	bd80      	pop	{r7, pc}
	...

10007e0c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
10007e0c:	b580      	push	{r7, lr}
10007e0e:	b082      	sub	sp, #8
10007e10:	af00      	add	r7, sp, #0
10007e12:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
10007e14:	4803      	ldr	r0, [pc, #12]	@ (10007e24 <metal_sys_init+0x18>)
10007e16:	f7ff fe4f 	bl	10007ab8 <metal_bus_register>
	return 0;
10007e1a:	2300      	movs	r3, #0
}
10007e1c:	4618      	mov	r0, r3
10007e1e:	3708      	adds	r7, #8
10007e20:	46bd      	mov	sp, r7
10007e22:	bd80      	pop	{r7, pc}
10007e24:	10020010 	.word	0x10020010

10007e28 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
10007e28:	b580      	push	{r7, lr}
10007e2a:	b086      	sub	sp, #24
10007e2c:	af00      	add	r7, sp, #0
10007e2e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
10007e30:	687b      	ldr	r3, [r7, #4]
10007e32:	681b      	ldr	r3, [r3, #0]
10007e34:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
10007e36:	687b      	ldr	r3, [r7, #4]
10007e38:	689b      	ldr	r3, [r3, #8]
10007e3a:	613b      	str	r3, [r7, #16]
	if (psize) {
10007e3c:	693b      	ldr	r3, [r7, #16]
10007e3e:	2b00      	cmp	r3, #0
10007e40:	d02c      	beq.n	10007e9c <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
10007e42:	687b      	ldr	r3, [r7, #4]
10007e44:	68db      	ldr	r3, [r3, #12]
10007e46:	693a      	ldr	r2, [r7, #16]
10007e48:	fa22 f303 	lsr.w	r3, r2, r3
10007e4c:	2b00      	cmp	r3, #0
10007e4e:	d005      	beq.n	10007e5c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
10007e50:	687b      	ldr	r3, [r7, #4]
10007e52:	68db      	ldr	r3, [r3, #12]
10007e54:	2201      	movs	r2, #1
10007e56:	fa02 f303 	lsl.w	r3, r2, r3
10007e5a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10007e5c:	2300      	movs	r3, #0
10007e5e:	617b      	str	r3, [r7, #20]
10007e60:	e013      	b.n	10007e8a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
10007e62:	687b      	ldr	r3, [r7, #4]
10007e64:	685a      	ldr	r2, [r3, #4]
10007e66:	697b      	ldr	r3, [r7, #20]
10007e68:	009b      	lsls	r3, r3, #2
10007e6a:	4413      	add	r3, r2
10007e6c:	6819      	ldr	r1, [r3, #0]
10007e6e:	687b      	ldr	r3, [r7, #4]
10007e70:	695b      	ldr	r3, [r3, #20]
10007e72:	693a      	ldr	r2, [r7, #16]
10007e74:	68f8      	ldr	r0, [r7, #12]
10007e76:	f001 fa59 	bl	1000932c <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
10007e7a:	693b      	ldr	r3, [r7, #16]
10007e7c:	009b      	lsls	r3, r3, #2
10007e7e:	68fa      	ldr	r2, [r7, #12]
10007e80:	4413      	add	r3, r2
10007e82:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10007e84:	697b      	ldr	r3, [r7, #20]
10007e86:	3301      	adds	r3, #1
10007e88:	617b      	str	r3, [r7, #20]
10007e8a:	687b      	ldr	r3, [r7, #4]
10007e8c:	689a      	ldr	r2, [r3, #8]
10007e8e:	687b      	ldr	r3, [r7, #4]
10007e90:	68db      	ldr	r3, [r3, #12]
10007e92:	fa22 f303 	lsr.w	r3, r2, r3
10007e96:	697a      	ldr	r2, [r7, #20]
10007e98:	429a      	cmp	r2, r3
10007e9a:	d9e2      	bls.n	10007e62 <metal_sys_io_mem_map+0x3a>
		}
	}
}
10007e9c:	bf00      	nop
10007e9e:	3718      	adds	r7, #24
10007ea0:	46bd      	mov	sp, r7
10007ea2:	bd80      	pop	{r7, pc}

10007ea4 <metal_list_init>:
{
10007ea4:	b480      	push	{r7}
10007ea6:	b083      	sub	sp, #12
10007ea8:	af00      	add	r7, sp, #0
10007eaa:	6078      	str	r0, [r7, #4]
	list->prev = list;
10007eac:	687b      	ldr	r3, [r7, #4]
10007eae:	687a      	ldr	r2, [r7, #4]
10007eb0:	605a      	str	r2, [r3, #4]
	list->next = list;
10007eb2:	687b      	ldr	r3, [r7, #4]
10007eb4:	687a      	ldr	r2, [r7, #4]
10007eb6:	601a      	str	r2, [r3, #0]
}
10007eb8:	bf00      	nop
10007eba:	370c      	adds	r7, #12
10007ebc:	46bd      	mov	sp, r7
10007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
10007ec2:	4770      	bx	lr

10007ec4 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
10007ec4:	b580      	push	{r7, lr}
10007ec6:	b084      	sub	sp, #16
10007ec8:	af00      	add	r7, sp, #0
10007eca:	6078      	str	r0, [r7, #4]
	int error = 0;
10007ecc:	2300      	movs	r3, #0
10007ece:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
10007ed0:	2220      	movs	r2, #32
10007ed2:	2100      	movs	r1, #0
10007ed4:	4810      	ldr	r0, [pc, #64]	@ (10007f18 <metal_init+0x54>)
10007ed6:	f002 f828 	bl	10009f2a <memset>

	_metal.common.log_handler   = params->log_handler;
10007eda:	687b      	ldr	r3, [r7, #4]
10007edc:	681b      	ldr	r3, [r3, #0]
10007ede:	4a0e      	ldr	r2, [pc, #56]	@ (10007f18 <metal_init+0x54>)
10007ee0:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
10007ee2:	687b      	ldr	r3, [r7, #4]
10007ee4:	791a      	ldrb	r2, [r3, #4]
10007ee6:	4b0c      	ldr	r3, [pc, #48]	@ (10007f18 <metal_init+0x54>)
10007ee8:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
10007eea:	480c      	ldr	r0, [pc, #48]	@ (10007f1c <metal_init+0x58>)
10007eec:	f7ff ffda 	bl	10007ea4 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
10007ef0:	480b      	ldr	r0, [pc, #44]	@ (10007f20 <metal_init+0x5c>)
10007ef2:	f7ff ffd7 	bl	10007ea4 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
10007ef6:	480b      	ldr	r0, [pc, #44]	@ (10007f24 <metal_init+0x60>)
10007ef8:	f7ff ffd4 	bl	10007ea4 <metal_list_init>

	error = metal_sys_init(params);
10007efc:	6878      	ldr	r0, [r7, #4]
10007efe:	f7ff ff85 	bl	10007e0c <metal_sys_init>
10007f02:	60f8      	str	r0, [r7, #12]
	if (error)
10007f04:	68fb      	ldr	r3, [r7, #12]
10007f06:	2b00      	cmp	r3, #0
10007f08:	d001      	beq.n	10007f0e <metal_init+0x4a>
		return error;
10007f0a:	68fb      	ldr	r3, [r7, #12]
10007f0c:	e000      	b.n	10007f10 <metal_init+0x4c>

	return error;
10007f0e:	68fb      	ldr	r3, [r7, #12]
}
10007f10:	4618      	mov	r0, r3
10007f12:	3710      	adds	r7, #16
10007f14:	46bd      	mov	sp, r7
10007f16:	bd80      	pop	{r7, pc}
10007f18:	10021b60 	.word	0x10021b60
10007f1c:	10021b68 	.word	0x10021b68
10007f20:	10021b70 	.word	0x10021b70
10007f24:	10021b78 	.word	0x10021b78

10007f28 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
10007f28:	b480      	push	{r7}
10007f2a:	b083      	sub	sp, #12
10007f2c:	af00      	add	r7, sp, #0
10007f2e:	6078      	str	r0, [r7, #4]
10007f30:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10007f32:	687b      	ldr	r3, [r7, #4]
10007f34:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
10007f36:	f1b3 3fff 	cmp.w	r3, #4294967295
10007f3a:	d00a      	beq.n	10007f52 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10007f3c:	687b      	ldr	r3, [r7, #4]
10007f3e:	689b      	ldr	r3, [r3, #8]
10007f40:	683a      	ldr	r2, [r7, #0]
10007f42:	429a      	cmp	r2, r3
10007f44:	d205      	bcs.n	10007f52 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10007f46:	687b      	ldr	r3, [r7, #4]
10007f48:	681b      	ldr	r3, [r3, #0]
10007f4a:	461a      	mov	r2, r3
10007f4c:	683b      	ldr	r3, [r7, #0]
10007f4e:	4413      	add	r3, r2
		: NULL);
10007f50:	e000      	b.n	10007f54 <metal_io_virt+0x2c>
10007f52:	2300      	movs	r3, #0
}
10007f54:	4618      	mov	r0, r3
10007f56:	370c      	adds	r7, #12
10007f58:	46bd      	mov	sp, r7
10007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
10007f5e:	4770      	bx	lr

10007f60 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
10007f60:	b5b0      	push	{r4, r5, r7, lr}
10007f62:	b08c      	sub	sp, #48	@ 0x30
10007f64:	af00      	add	r7, sp, #0
10007f66:	60f8      	str	r0, [r7, #12]
10007f68:	60b9      	str	r1, [r7, #8]
10007f6a:	607a      	str	r2, [r7, #4]
10007f6c:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
10007f6e:	f107 0310 	add.w	r3, r7, #16
10007f72:	2220      	movs	r2, #32
10007f74:	2100      	movs	r1, #0
10007f76:	4618      	mov	r0, r3
10007f78:	f001 ffd7 	bl	10009f2a <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
10007f7c:	68fb      	ldr	r3, [r7, #12]
10007f7e:	68ba      	ldr	r2, [r7, #8]
10007f80:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
10007f82:	68fb      	ldr	r3, [r7, #12]
10007f84:	687a      	ldr	r2, [r7, #4]
10007f86:	605a      	str	r2, [r3, #4]
	io->size = size;
10007f88:	68fb      	ldr	r3, [r7, #12]
10007f8a:	683a      	ldr	r2, [r7, #0]
10007f8c:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
10007f8e:	68fb      	ldr	r3, [r7, #12]
10007f90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10007f92:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
10007f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10007f96:	2b1f      	cmp	r3, #31
10007f98:	d904      	bls.n	10007fa4 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
10007f9a:	68fb      	ldr	r3, [r7, #12]
10007f9c:	f04f 32ff 	mov.w	r2, #4294967295
10007fa0:	611a      	str	r2, [r3, #16]
10007fa2:	e006      	b.n	10007fb2 <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
10007fa4:	2201      	movs	r2, #1
10007fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10007fa8:	fa02 f303 	lsl.w	r3, r2, r3
10007fac:	1e5a      	subs	r2, r3, #1
10007fae:	68fb      	ldr	r3, [r7, #12]
10007fb0:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
10007fb2:	68fb      	ldr	r3, [r7, #12]
10007fb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10007fb6:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
10007fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10007fba:	2b00      	cmp	r3, #0
10007fbc:	d00b      	beq.n	10007fd6 <metal_io_init+0x76>
10007fbe:	68fb      	ldr	r3, [r7, #12]
10007fc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10007fc2:	f103 0418 	add.w	r4, r3, #24
10007fc6:	4615      	mov	r5, r2
10007fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10007fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10007fcc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10007fd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
10007fd4:	e00a      	b.n	10007fec <metal_io_init+0x8c>
10007fd6:	68fb      	ldr	r3, [r7, #12]
10007fd8:	f103 0418 	add.w	r4, r3, #24
10007fdc:	f107 0510 	add.w	r5, r7, #16
10007fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10007fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10007fe4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10007fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
10007fec:	68f8      	ldr	r0, [r7, #12]
10007fee:	f7ff ff1b 	bl	10007e28 <metal_sys_io_mem_map>
}
10007ff2:	bf00      	nop
10007ff4:	3730      	adds	r7, #48	@ 0x30
10007ff6:	46bd      	mov	sp, r7
10007ff8:	bdb0      	pop	{r4, r5, r7, pc}

10007ffa <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
10007ffa:	b590      	push	{r4, r7, lr}
10007ffc:	b08b      	sub	sp, #44	@ 0x2c
10007ffe:	af02      	add	r7, sp, #8
10008000:	60f8      	str	r0, [r7, #12]
10008002:	60b9      	str	r1, [r7, #8]
10008004:	607a      	str	r2, [r7, #4]
10008006:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
10008008:	68b9      	ldr	r1, [r7, #8]
1000800a:	68f8      	ldr	r0, [r7, #12]
1000800c:	f7ff ff8c 	bl	10007f28 <metal_io_virt>
10008010:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
10008012:	687b      	ldr	r3, [r7, #4]
10008014:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10008016:	69fb      	ldr	r3, [r7, #28]
10008018:	2b00      	cmp	r3, #0
1000801a:	d102      	bne.n	10008022 <metal_io_block_read+0x28>
		return -ERANGE;
1000801c:	f06f 0321 	mvn.w	r3, #33	@ 0x21
10008020:	e05c      	b.n	100080dc <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
10008022:	683a      	ldr	r2, [r7, #0]
10008024:	68bb      	ldr	r3, [r7, #8]
10008026:	441a      	add	r2, r3
10008028:	68fb      	ldr	r3, [r7, #12]
1000802a:	689b      	ldr	r3, [r3, #8]
1000802c:	429a      	cmp	r2, r3
1000802e:	d904      	bls.n	1000803a <metal_io_block_read+0x40>
		len = io->size - offset;
10008030:	68fb      	ldr	r3, [r7, #12]
10008032:	689a      	ldr	r2, [r3, #8]
10008034:	68bb      	ldr	r3, [r7, #8]
10008036:	1ad3      	subs	r3, r2, r3
10008038:	603b      	str	r3, [r7, #0]
	retlen = len;
1000803a:	683b      	ldr	r3, [r7, #0]
1000803c:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
1000803e:	68fb      	ldr	r3, [r7, #12]
10008040:	6a1b      	ldr	r3, [r3, #32]
10008042:	2b00      	cmp	r3, #0
10008044:	d00a      	beq.n	1000805c <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
10008046:	68fb      	ldr	r3, [r7, #12]
10008048:	6a1c      	ldr	r4, [r3, #32]
1000804a:	683b      	ldr	r3, [r7, #0]
1000804c:	9300      	str	r3, [sp, #0]
1000804e:	2305      	movs	r3, #5
10008050:	687a      	ldr	r2, [r7, #4]
10008052:	68b9      	ldr	r1, [r7, #8]
10008054:	68f8      	ldr	r0, [r7, #12]
10008056:	47a0      	blx	r4
10008058:	6178      	str	r0, [r7, #20]
1000805a:	e03e      	b.n	100080da <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
1000805c:	f3bf 8f5b 	dmb	ish
		while ( len && (
10008060:	e00c      	b.n	1000807c <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
10008062:	69fb      	ldr	r3, [r7, #28]
10008064:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
10008066:	69bb      	ldr	r3, [r7, #24]
10008068:	701a      	strb	r2, [r3, #0]
			dest++;
1000806a:	69bb      	ldr	r3, [r7, #24]
1000806c:	3301      	adds	r3, #1
1000806e:	61bb      	str	r3, [r7, #24]
			ptr++;
10008070:	69fb      	ldr	r3, [r7, #28]
10008072:	3301      	adds	r3, #1
10008074:	61fb      	str	r3, [r7, #28]
			len--;
10008076:	683b      	ldr	r3, [r7, #0]
10008078:	3b01      	subs	r3, #1
1000807a:	603b      	str	r3, [r7, #0]
		while ( len && (
1000807c:	683b      	ldr	r3, [r7, #0]
1000807e:	2b00      	cmp	r3, #0
10008080:	d017      	beq.n	100080b2 <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
10008082:	69bb      	ldr	r3, [r7, #24]
10008084:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10008088:	2b00      	cmp	r3, #0
1000808a:	d1ea      	bne.n	10008062 <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
1000808c:	69fb      	ldr	r3, [r7, #28]
1000808e:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
10008092:	2b00      	cmp	r3, #0
10008094:	d1e5      	bne.n	10008062 <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
10008096:	e00c      	b.n	100080b2 <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
10008098:	69fb      	ldr	r3, [r7, #28]
1000809a:	681a      	ldr	r2, [r3, #0]
1000809c:	69bb      	ldr	r3, [r7, #24]
1000809e:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
100080a0:	69bb      	ldr	r3, [r7, #24]
100080a2:	3304      	adds	r3, #4
100080a4:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
100080a6:	69fb      	ldr	r3, [r7, #28]
100080a8:	3304      	adds	r3, #4
100080aa:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
100080ac:	683b      	ldr	r3, [r7, #0]
100080ae:	3b04      	subs	r3, #4
100080b0:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
100080b2:	683b      	ldr	r3, [r7, #0]
100080b4:	2b03      	cmp	r3, #3
100080b6:	dcef      	bgt.n	10008098 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
100080b8:	e00c      	b.n	100080d4 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
100080ba:	69fb      	ldr	r3, [r7, #28]
100080bc:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
100080be:	69bb      	ldr	r3, [r7, #24]
100080c0:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
100080c2:	69bb      	ldr	r3, [r7, #24]
100080c4:	3301      	adds	r3, #1
100080c6:	61bb      	str	r3, [r7, #24]
100080c8:	69fb      	ldr	r3, [r7, #28]
100080ca:	3301      	adds	r3, #1
100080cc:	61fb      	str	r3, [r7, #28]
100080ce:	683b      	ldr	r3, [r7, #0]
100080d0:	3b01      	subs	r3, #1
100080d2:	603b      	str	r3, [r7, #0]
100080d4:	683b      	ldr	r3, [r7, #0]
100080d6:	2b00      	cmp	r3, #0
100080d8:	d1ef      	bne.n	100080ba <metal_io_block_read+0xc0>
	}
	return retlen;
100080da:	697b      	ldr	r3, [r7, #20]
}
100080dc:	4618      	mov	r0, r3
100080de:	3724      	adds	r7, #36	@ 0x24
100080e0:	46bd      	mov	sp, r7
100080e2:	bd90      	pop	{r4, r7, pc}

100080e4 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
100080e4:	b590      	push	{r4, r7, lr}
100080e6:	b08b      	sub	sp, #44	@ 0x2c
100080e8:	af02      	add	r7, sp, #8
100080ea:	60f8      	str	r0, [r7, #12]
100080ec:	60b9      	str	r1, [r7, #8]
100080ee:	607a      	str	r2, [r7, #4]
100080f0:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
100080f2:	68b9      	ldr	r1, [r7, #8]
100080f4:	68f8      	ldr	r0, [r7, #12]
100080f6:	f7ff ff17 	bl	10007f28 <metal_io_virt>
100080fa:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
100080fc:	687b      	ldr	r3, [r7, #4]
100080fe:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10008100:	69fb      	ldr	r3, [r7, #28]
10008102:	2b00      	cmp	r3, #0
10008104:	d102      	bne.n	1000810c <metal_io_block_write+0x28>
		return -ERANGE;
10008106:	f06f 0321 	mvn.w	r3, #33	@ 0x21
1000810a:	e05b      	b.n	100081c4 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
1000810c:	683a      	ldr	r2, [r7, #0]
1000810e:	68bb      	ldr	r3, [r7, #8]
10008110:	441a      	add	r2, r3
10008112:	68fb      	ldr	r3, [r7, #12]
10008114:	689b      	ldr	r3, [r3, #8]
10008116:	429a      	cmp	r2, r3
10008118:	d904      	bls.n	10008124 <metal_io_block_write+0x40>
		len = io->size - offset;
1000811a:	68fb      	ldr	r3, [r7, #12]
1000811c:	689a      	ldr	r2, [r3, #8]
1000811e:	68bb      	ldr	r3, [r7, #8]
10008120:	1ad3      	subs	r3, r2, r3
10008122:	603b      	str	r3, [r7, #0]
	retlen = len;
10008124:	683b      	ldr	r3, [r7, #0]
10008126:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
10008128:	68fb      	ldr	r3, [r7, #12]
1000812a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000812c:	2b00      	cmp	r3, #0
1000812e:	d017      	beq.n	10008160 <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
10008130:	68fb      	ldr	r3, [r7, #12]
10008132:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
10008134:	683b      	ldr	r3, [r7, #0]
10008136:	9300      	str	r3, [sp, #0]
10008138:	2305      	movs	r3, #5
1000813a:	687a      	ldr	r2, [r7, #4]
1000813c:	68b9      	ldr	r1, [r7, #8]
1000813e:	68f8      	ldr	r0, [r7, #12]
10008140:	47a0      	blx	r4
10008142:	6178      	str	r0, [r7, #20]
10008144:	e03d      	b.n	100081c2 <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
10008146:	69bb      	ldr	r3, [r7, #24]
10008148:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000814a:	69fb      	ldr	r3, [r7, #28]
1000814c:	701a      	strb	r2, [r3, #0]
			ptr++;
1000814e:	69fb      	ldr	r3, [r7, #28]
10008150:	3301      	adds	r3, #1
10008152:	61fb      	str	r3, [r7, #28]
			source++;
10008154:	69bb      	ldr	r3, [r7, #24]
10008156:	3301      	adds	r3, #1
10008158:	61bb      	str	r3, [r7, #24]
			len--;
1000815a:	683b      	ldr	r3, [r7, #0]
1000815c:	3b01      	subs	r3, #1
1000815e:	603b      	str	r3, [r7, #0]
		while ( len && (
10008160:	683b      	ldr	r3, [r7, #0]
10008162:	2b00      	cmp	r3, #0
10008164:	d017      	beq.n	10008196 <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
10008166:	69fb      	ldr	r3, [r7, #28]
10008168:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000816c:	2b00      	cmp	r3, #0
1000816e:	d1ea      	bne.n	10008146 <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
10008170:	69bb      	ldr	r3, [r7, #24]
10008172:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
10008176:	2b00      	cmp	r3, #0
10008178:	d1e5      	bne.n	10008146 <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000817a:	e00c      	b.n	10008196 <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
1000817c:	69bb      	ldr	r3, [r7, #24]
1000817e:	681a      	ldr	r2, [r3, #0]
10008180:	69fb      	ldr	r3, [r7, #28]
10008182:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10008184:	69fb      	ldr	r3, [r7, #28]
10008186:	3304      	adds	r3, #4
10008188:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
1000818a:	69bb      	ldr	r3, [r7, #24]
1000818c:	3304      	adds	r3, #4
1000818e:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
10008190:	683b      	ldr	r3, [r7, #0]
10008192:	3b04      	subs	r3, #4
10008194:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10008196:	683b      	ldr	r3, [r7, #0]
10008198:	2b03      	cmp	r3, #3
1000819a:	dcef      	bgt.n	1000817c <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
1000819c:	e00c      	b.n	100081b8 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000819e:	69bb      	ldr	r3, [r7, #24]
100081a0:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
100081a2:	69fb      	ldr	r3, [r7, #28]
100081a4:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
100081a6:	69fb      	ldr	r3, [r7, #28]
100081a8:	3301      	adds	r3, #1
100081aa:	61fb      	str	r3, [r7, #28]
100081ac:	69bb      	ldr	r3, [r7, #24]
100081ae:	3301      	adds	r3, #1
100081b0:	61bb      	str	r3, [r7, #24]
100081b2:	683b      	ldr	r3, [r7, #0]
100081b4:	3b01      	subs	r3, #1
100081b6:	603b      	str	r3, [r7, #0]
100081b8:	683b      	ldr	r3, [r7, #0]
100081ba:	2b00      	cmp	r3, #0
100081bc:	d1ef      	bne.n	1000819e <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
100081be:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
100081c2:	697b      	ldr	r3, [r7, #20]
}
100081c4:	4618      	mov	r0, r3
100081c6:	3724      	adds	r7, #36	@ 0x24
100081c8:	46bd      	mov	sp, r7
100081ca:	bd90      	pop	{r4, r7, pc}

100081cc <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
100081cc:	b40e      	push	{r1, r2, r3}
100081ce:	b480      	push	{r7}
100081d0:	b082      	sub	sp, #8
100081d2:	af00      	add	r7, sp, #0
100081d4:	4603      	mov	r3, r0
100081d6:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
100081d8:	bf00      	nop
100081da:	3708      	adds	r7, #8
100081dc:	46bd      	mov	sp, r7
100081de:	f85d 7b04 	ldr.w	r7, [sp], #4
100081e2:	b003      	add	sp, #12
100081e4:	4770      	bx	lr

100081e6 <metal_io_virt>:
{
100081e6:	b480      	push	{r7}
100081e8:	b083      	sub	sp, #12
100081ea:	af00      	add	r7, sp, #0
100081ec:	6078      	str	r0, [r7, #4]
100081ee:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
100081f0:	687b      	ldr	r3, [r7, #4]
100081f2:	681b      	ldr	r3, [r3, #0]
		: NULL);
100081f4:	f1b3 3fff 	cmp.w	r3, #4294967295
100081f8:	d00a      	beq.n	10008210 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
100081fa:	687b      	ldr	r3, [r7, #4]
100081fc:	689b      	ldr	r3, [r3, #8]
100081fe:	683a      	ldr	r2, [r7, #0]
10008200:	429a      	cmp	r2, r3
10008202:	d205      	bcs.n	10008210 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10008204:	687b      	ldr	r3, [r7, #4]
10008206:	681b      	ldr	r3, [r3, #0]
10008208:	461a      	mov	r2, r3
1000820a:	683b      	ldr	r3, [r7, #0]
1000820c:	4413      	add	r3, r2
		: NULL);
1000820e:	e000      	b.n	10008212 <metal_io_virt+0x2c>
10008210:	2300      	movs	r3, #0
}
10008212:	4618      	mov	r0, r3
10008214:	370c      	adds	r7, #12
10008216:	46bd      	mov	sp, r7
10008218:	f85d 7b04 	ldr.w	r7, [sp], #4
1000821c:	4770      	bx	lr

1000821e <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
1000821e:	b480      	push	{r7}
10008220:	b085      	sub	sp, #20
10008222:	af00      	add	r7, sp, #0
10008224:	6078      	str	r0, [r7, #4]
10008226:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10008228:	683b      	ldr	r3, [r7, #0]
1000822a:	687a      	ldr	r2, [r7, #4]
1000822c:	6812      	ldr	r2, [r2, #0]
1000822e:	1a9b      	subs	r3, r3, r2
10008230:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10008232:	687b      	ldr	r3, [r7, #4]
10008234:	689b      	ldr	r3, [r3, #8]
10008236:	68fa      	ldr	r2, [r7, #12]
10008238:	429a      	cmp	r2, r3
1000823a:	d201      	bcs.n	10008240 <metal_io_virt_to_offset+0x22>
1000823c:	68fb      	ldr	r3, [r7, #12]
1000823e:	e001      	b.n	10008244 <metal_io_virt_to_offset+0x26>
10008240:	f04f 33ff 	mov.w	r3, #4294967295
}
10008244:	4618      	mov	r0, r3
10008246:	3714      	adds	r7, #20
10008248:	46bd      	mov	sp, r7
1000824a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000824e:	4770      	bx	lr

10008250 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
10008250:	b5b0      	push	{r4, r5, r7, lr}
10008252:	b08c      	sub	sp, #48	@ 0x30
10008254:	af00      	add	r7, sp, #0
10008256:	60f8      	str	r0, [r7, #12]
10008258:	60b9      	str	r1, [r7, #8]
1000825a:	603b      	str	r3, [r7, #0]
1000825c:	4613      	mov	r3, r2
1000825e:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
10008260:	68b9      	ldr	r1, [r7, #8]
10008262:	68f8      	ldr	r0, [r7, #12]
10008264:	f7ff ffbf 	bl	100081e6 <metal_io_virt>
10008268:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
1000826a:	68fb      	ldr	r3, [r7, #12]
1000826c:	699b      	ldr	r3, [r3, #24]
1000826e:	2b00      	cmp	r3, #0
10008270:	d009      	beq.n	10008286 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
10008272:	68fb      	ldr	r3, [r7, #12]
10008274:	699c      	ldr	r4, [r3, #24]
10008276:	79fa      	ldrb	r2, [r7, #7]
10008278:	683b      	ldr	r3, [r7, #0]
1000827a:	68b9      	ldr	r1, [r7, #8]
1000827c:	68f8      	ldr	r0, [r7, #12]
1000827e:	47a0      	blx	r4
10008280:	4604      	mov	r4, r0
10008282:	460d      	mov	r5, r1
10008284:	e059      	b.n	1000833a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
10008286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008288:	2b00      	cmp	r3, #0
1000828a:	d012      	beq.n	100082b2 <metal_io_read+0x62>
1000828c:	683b      	ldr	r3, [r7, #0]
1000828e:	2b01      	cmp	r3, #1
10008290:	d10f      	bne.n	100082b2 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
10008292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008294:	62bb      	str	r3, [r7, #40]	@ 0x28
10008296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008298:	f3bf 8f5b 	dmb	ish
1000829c:	781b      	ldrb	r3, [r3, #0]
1000829e:	f3bf 8f5b 	dmb	ish
100082a2:	b2db      	uxtb	r3, r3
100082a4:	76fb      	strb	r3, [r7, #27]
100082a6:	7efb      	ldrb	r3, [r7, #27]
100082a8:	b2db      	uxtb	r3, r3
100082aa:	2200      	movs	r2, #0
100082ac:	461c      	mov	r4, r3
100082ae:	4615      	mov	r5, r2
100082b0:	e043      	b.n	1000833a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
100082b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100082b4:	2b00      	cmp	r3, #0
100082b6:	d012      	beq.n	100082de <metal_io_read+0x8e>
100082b8:	683b      	ldr	r3, [r7, #0]
100082ba:	2b02      	cmp	r3, #2
100082bc:	d10f      	bne.n	100082de <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
100082be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100082c0:	627b      	str	r3, [r7, #36]	@ 0x24
100082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100082c4:	f3bf 8f5b 	dmb	ish
100082c8:	881b      	ldrh	r3, [r3, #0]
100082ca:	f3bf 8f5b 	dmb	ish
100082ce:	b29b      	uxth	r3, r3
100082d0:	833b      	strh	r3, [r7, #24]
100082d2:	8b3b      	ldrh	r3, [r7, #24]
100082d4:	b29b      	uxth	r3, r3
100082d6:	2200      	movs	r2, #0
100082d8:	461c      	mov	r4, r3
100082da:	4615      	mov	r5, r2
100082dc:	e02d      	b.n	1000833a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
100082de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100082e0:	2b00      	cmp	r3, #0
100082e2:	d010      	beq.n	10008306 <metal_io_read+0xb6>
100082e4:	683b      	ldr	r3, [r7, #0]
100082e6:	2b04      	cmp	r3, #4
100082e8:	d10d      	bne.n	10008306 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
100082ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100082ec:	623b      	str	r3, [r7, #32]
100082ee:	6a3b      	ldr	r3, [r7, #32]
100082f0:	f3bf 8f5b 	dmb	ish
100082f4:	681b      	ldr	r3, [r3, #0]
100082f6:	f3bf 8f5b 	dmb	ish
100082fa:	617b      	str	r3, [r7, #20]
100082fc:	697b      	ldr	r3, [r7, #20]
100082fe:	2200      	movs	r2, #0
10008300:	461c      	mov	r4, r3
10008302:	4615      	mov	r5, r2
10008304:	e019      	b.n	1000833a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
10008306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008308:	2b00      	cmp	r3, #0
1000830a:	d010      	beq.n	1000832e <metal_io_read+0xde>
1000830c:	683b      	ldr	r3, [r7, #0]
1000830e:	2b04      	cmp	r3, #4
10008310:	d10d      	bne.n	1000832e <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
10008312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008314:	61fb      	str	r3, [r7, #28]
10008316:	69fb      	ldr	r3, [r7, #28]
10008318:	f3bf 8f5b 	dmb	ish
1000831c:	681b      	ldr	r3, [r3, #0]
1000831e:	f3bf 8f5b 	dmb	ish
10008322:	613b      	str	r3, [r7, #16]
10008324:	693b      	ldr	r3, [r7, #16]
10008326:	2200      	movs	r2, #0
10008328:	461c      	mov	r4, r3
1000832a:	4615      	mov	r5, r2
1000832c:	e005      	b.n	1000833a <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
1000832e:	4b06      	ldr	r3, [pc, #24]	@ (10008348 <metal_io_read+0xf8>)
10008330:	4a06      	ldr	r2, [pc, #24]	@ (1000834c <metal_io_read+0xfc>)
10008332:	21fe      	movs	r1, #254	@ 0xfe
10008334:	4806      	ldr	r0, [pc, #24]	@ (10008350 <metal_io_read+0x100>)
10008336:	f001 fcc3 	bl	10009cc0 <__assert_func>
	return 0; /* quiet compiler */
}
1000833a:	4622      	mov	r2, r4
1000833c:	462b      	mov	r3, r5
1000833e:	4610      	mov	r0, r2
10008340:	4619      	mov	r1, r3
10008342:	3730      	adds	r7, #48	@ 0x30
10008344:	46bd      	mov	sp, r7
10008346:	bdb0      	pop	{r4, r5, r7, pc}
10008348:	1000ad9c 	.word	0x1000ad9c
1000834c:	1000b0a4 	.word	0x1000b0a4
10008350:	1000ada0 	.word	0x1000ada0

10008354 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
10008354:	b580      	push	{r7, lr}
10008356:	b082      	sub	sp, #8
10008358:	af00      	add	r7, sp, #0
1000835a:	6078      	str	r0, [r7, #4]
	return pvPortMalloc(size);
1000835c:	6878      	ldr	r0, [r7, #4]
1000835e:	f7fc fc61 	bl	10004c24 <pvPortMalloc>
10008362:	4603      	mov	r3, r0
}
10008364:	4618      	mov	r0, r3
10008366:	3708      	adds	r7, #8
10008368:	46bd      	mov	sp, r7
1000836a:	bd80      	pop	{r7, pc}

1000836c <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
1000836c:	b580      	push	{r7, lr}
1000836e:	b082      	sub	sp, #8
10008370:	af00      	add	r7, sp, #0
10008372:	6078      	str	r0, [r7, #4]
	vPortFree(ptr);
10008374:	6878      	ldr	r0, [r7, #4]
10008376:	f7fc fd1d 	bl	10004db4 <vPortFree>
}
1000837a:	bf00      	nop
1000837c:	3708      	adds	r7, #8
1000837e:	46bd      	mov	sp, r7
10008380:	bd80      	pop	{r7, pc}

10008382 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
10008382:	b580      	push	{r7, lr}
10008384:	b084      	sub	sp, #16
10008386:	af00      	add	r7, sp, #0
10008388:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
1000838a:	687b      	ldr	r3, [r7, #4]
1000838c:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
1000838e:	3334      	adds	r3, #52	@ 0x34
10008390:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
10008392:	68f8      	ldr	r0, [r7, #12]
10008394:	f7ff ffde 	bl	10008354 <metal_allocate_memory>
10008398:	60b8      	str	r0, [r7, #8]
	if (vqs) {
1000839a:	68bb      	ldr	r3, [r7, #8]
1000839c:	2b00      	cmp	r3, #0
1000839e:	d004      	beq.n	100083aa <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
100083a0:	68fa      	ldr	r2, [r7, #12]
100083a2:	2100      	movs	r1, #0
100083a4:	68b8      	ldr	r0, [r7, #8]
100083a6:	f001 fdc0 	bl	10009f2a <memset>
	}

	return vqs;
100083aa:	68bb      	ldr	r3, [r7, #8]
}
100083ac:	4618      	mov	r0, r3
100083ae:	3710      	adds	r7, #16
100083b0:	46bd      	mov	sp, r7
100083b2:	bd80      	pop	{r7, pc}

100083b4 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
100083b4:	b580      	push	{r7, lr}
100083b6:	b086      	sub	sp, #24
100083b8:	af00      	add	r7, sp, #0
100083ba:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
100083bc:	687b      	ldr	r3, [r7, #4]
100083be:	891b      	ldrh	r3, [r3, #8]
100083c0:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
100083c2:	687b      	ldr	r3, [r7, #4]
100083c4:	681b      	ldr	r3, [r3, #0]
100083c6:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100083c8:	693b      	ldr	r3, [r7, #16]
100083ca:	3b10      	subs	r3, #16
100083cc:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
100083ce:	693b      	ldr	r3, [r7, #16]
100083d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100083d2:	697a      	ldr	r2, [r7, #20]
100083d4:	429a      	cmp	r2, r3
100083d6:	d305      	bcc.n	100083e4 <rproc_virtio_virtqueue_notify+0x30>
100083d8:	4b0d      	ldr	r3, [pc, #52]	@ (10008410 <rproc_virtio_virtqueue_notify+0x5c>)
100083da:	4a0e      	ldr	r2, [pc, #56]	@ (10008414 <rproc_virtio_virtqueue_notify+0x60>)
100083dc:	211c      	movs	r1, #28
100083de:	480e      	ldr	r0, [pc, #56]	@ (10008418 <rproc_virtio_virtqueue_notify+0x64>)
100083e0:	f001 fc6e 	bl	10009cc0 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
100083e4:	693b      	ldr	r3, [r7, #16]
100083e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100083e8:	697a      	ldr	r2, [r7, #20]
100083ea:	4613      	mov	r3, r2
100083ec:	005b      	lsls	r3, r3, #1
100083ee:	4413      	add	r3, r2
100083f0:	00db      	lsls	r3, r3, #3
100083f2:	440b      	add	r3, r1
100083f4:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
100083f6:	68fb      	ldr	r3, [r7, #12]
100083f8:	68db      	ldr	r3, [r3, #12]
100083fa:	68fa      	ldr	r2, [r7, #12]
100083fc:	6810      	ldr	r0, [r2, #0]
100083fe:	68ba      	ldr	r2, [r7, #8]
10008400:	6912      	ldr	r2, [r2, #16]
10008402:	4611      	mov	r1, r2
10008404:	4798      	blx	r3
}
10008406:	bf00      	nop
10008408:	3718      	adds	r7, #24
1000840a:	46bd      	mov	sp, r7
1000840c:	bd80      	pop	{r7, pc}
1000840e:	bf00      	nop
10008410:	1000ade8 	.word	0x1000ade8
10008414:	1000b084 	.word	0x1000b084
10008418:	1000ae04 	.word	0x1000ae04

1000841c <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
1000841c:	b580      	push	{r7, lr}
1000841e:	b086      	sub	sp, #24
10008420:	af00      	add	r7, sp, #0
10008422:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10008424:	687b      	ldr	r3, [r7, #4]
10008426:	3b10      	subs	r3, #16
10008428:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000842a:	697b      	ldr	r3, [r7, #20]
1000842c:	685b      	ldr	r3, [r3, #4]
1000842e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10008430:	697b      	ldr	r3, [r7, #20]
10008432:	689b      	ldr	r3, [r3, #8]
10008434:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
10008436:	693b      	ldr	r3, [r7, #16]
10008438:	3318      	adds	r3, #24
1000843a:	4619      	mov	r1, r3
1000843c:	68f8      	ldr	r0, [r7, #12]
1000843e:	f7ff feee 	bl	1000821e <metal_io_virt_to_offset>
10008442:	4601      	mov	r1, r0
10008444:	2301      	movs	r3, #1
10008446:	2205      	movs	r2, #5
10008448:	68f8      	ldr	r0, [r7, #12]
1000844a:	f7ff ff01 	bl	10008250 <metal_io_read>
1000844e:	4602      	mov	r2, r0
10008450:	460b      	mov	r3, r1
10008452:	4613      	mov	r3, r2
10008454:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
10008456:	7afb      	ldrb	r3, [r7, #11]
}
10008458:	4618      	mov	r0, r3
1000845a:	3718      	adds	r7, #24
1000845c:	46bd      	mov	sp, r7
1000845e:	bd80      	pop	{r7, pc}

10008460 <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
10008460:	b580      	push	{r7, lr}
10008462:	b086      	sub	sp, #24
10008464:	af00      	add	r7, sp, #0
10008466:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10008468:	687b      	ldr	r3, [r7, #4]
1000846a:	3b10      	subs	r3, #16
1000846c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000846e:	697b      	ldr	r3, [r7, #20]
10008470:	685b      	ldr	r3, [r3, #4]
10008472:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10008474:	697b      	ldr	r3, [r7, #20]
10008476:	689b      	ldr	r3, [r3, #8]
10008478:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
1000847a:	693b      	ldr	r3, [r7, #16]
1000847c:	330c      	adds	r3, #12
1000847e:	4619      	mov	r1, r3
10008480:	68f8      	ldr	r0, [r7, #12]
10008482:	f7ff fecc 	bl	1000821e <metal_io_virt_to_offset>
10008486:	4601      	mov	r1, r0
10008488:	2304      	movs	r3, #4
1000848a:	2205      	movs	r2, #5
1000848c:	68f8      	ldr	r0, [r7, #12]
1000848e:	f7ff fedf 	bl	10008250 <metal_io_read>
10008492:	4602      	mov	r2, r0
10008494:	460b      	mov	r3, r1
10008496:	4613      	mov	r3, r2
10008498:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
1000849a:	68bb      	ldr	r3, [r7, #8]
}
1000849c:	4618      	mov	r0, r3
1000849e:	3718      	adds	r7, #24
100084a0:	46bd      	mov	sp, r7
100084a2:	bd80      	pop	{r7, pc}

100084a4 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
100084a4:	b580      	push	{r7, lr}
100084a6:	b088      	sub	sp, #32
100084a8:	af00      	add	r7, sp, #0
100084aa:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100084ac:	687b      	ldr	r3, [r7, #4]
100084ae:	3b10      	subs	r3, #16
100084b0:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
100084b2:	69fb      	ldr	r3, [r7, #28]
100084b4:	685b      	ldr	r3, [r3, #4]
100084b6:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
100084b8:	69fb      	ldr	r3, [r7, #28]
100084ba:	689b      	ldr	r3, [r3, #8]
100084bc:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
100084be:	69bb      	ldr	r3, [r7, #24]
100084c0:	3310      	adds	r3, #16
100084c2:	4619      	mov	r1, r3
100084c4:	6978      	ldr	r0, [r7, #20]
100084c6:	f7ff feaa 	bl	1000821e <metal_io_virt_to_offset>
100084ca:	4601      	mov	r1, r0
100084cc:	2304      	movs	r3, #4
100084ce:	2205      	movs	r2, #5
100084d0:	6978      	ldr	r0, [r7, #20]
100084d2:	f7ff febd 	bl	10008250 <metal_io_read>
100084d6:	4602      	mov	r2, r0
100084d8:	460b      	mov	r3, r1
100084da:	4613      	mov	r3, r2
100084dc:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
100084de:	6878      	ldr	r0, [r7, #4]
100084e0:	f7ff ffbe 	bl	10008460 <rproc_virtio_get_dfeatures>
100084e4:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
100084e6:	68fa      	ldr	r2, [r7, #12]
100084e8:	693b      	ldr	r3, [r7, #16]
100084ea:	4013      	ands	r3, r2
}
100084ec:	4618      	mov	r0, r3
100084ee:	3720      	adds	r7, #32
100084f0:	46bd      	mov	sp, r7
100084f2:	bd80      	pop	{r7, pc}

100084f4 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
100084f4:	b580      	push	{r7, lr}
100084f6:	b088      	sub	sp, #32
100084f8:	af00      	add	r7, sp, #0
100084fa:	60f8      	str	r0, [r7, #12]
100084fc:	60b9      	str	r1, [r7, #8]
100084fe:	607a      	str	r2, [r7, #4]
10008500:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10008502:	68fb      	ldr	r3, [r7, #12]
10008504:	3b10      	subs	r3, #16
10008506:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
10008508:	69fb      	ldr	r3, [r7, #28]
1000850a:	685b      	ldr	r3, [r3, #4]
1000850c:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
1000850e:	68fb      	ldr	r3, [r7, #12]
10008510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10008512:	4613      	mov	r3, r2
10008514:	009b      	lsls	r3, r3, #2
10008516:	4413      	add	r3, r2
10008518:	009b      	lsls	r3, r3, #2
1000851a:	3318      	adds	r3, #24
1000851c:	69ba      	ldr	r2, [r7, #24]
1000851e:	4413      	add	r3, r2
10008520:	3304      	adds	r3, #4
10008522:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
10008524:	69fb      	ldr	r3, [r7, #28]
10008526:	689b      	ldr	r3, [r3, #8]
10008528:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
1000852a:	683a      	ldr	r2, [r7, #0]
1000852c:	68bb      	ldr	r3, [r7, #8]
1000852e:	441a      	add	r2, r3
10008530:	69bb      	ldr	r3, [r7, #24]
10008532:	695b      	ldr	r3, [r3, #20]
10008534:	429a      	cmp	r2, r3
10008536:	d80c      	bhi.n	10008552 <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
10008538:	697a      	ldr	r2, [r7, #20]
1000853a:	68bb      	ldr	r3, [r7, #8]
1000853c:	4413      	add	r3, r2
		metal_io_block_read(io,
1000853e:	4619      	mov	r1, r3
10008540:	6938      	ldr	r0, [r7, #16]
10008542:	f7ff fe6c 	bl	1000821e <metal_io_virt_to_offset>
10008546:	4601      	mov	r1, r0
10008548:	683b      	ldr	r3, [r7, #0]
1000854a:	687a      	ldr	r2, [r7, #4]
1000854c:	6938      	ldr	r0, [r7, #16]
1000854e:	f7ff fd54 	bl	10007ffa <metal_io_block_read>
				dst, length);
}
10008552:	bf00      	nop
10008554:	3720      	adds	r7, #32
10008556:	46bd      	mov	sp, r7
10008558:	bd80      	pop	{r7, pc}
	...

1000855c <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
1000855c:	b580      	push	{r7, lr}
1000855e:	b08e      	sub	sp, #56	@ 0x38
10008560:	af00      	add	r7, sp, #0
10008562:	60f8      	str	r0, [r7, #12]
10008564:	60b9      	str	r1, [r7, #8]
10008566:	607a      	str	r2, [r7, #4]
10008568:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
1000856a:	687b      	ldr	r3, [r7, #4]
1000856c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
1000856e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008570:	7e5b      	ldrb	r3, [r3, #25]
10008572:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
10008574:	2048      	movs	r0, #72	@ 0x48
10008576:	f7ff feed 	bl	10008354 <metal_allocate_memory>
1000857a:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
1000857c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000857e:	2b00      	cmp	r3, #0
10008580:	d101      	bne.n	10008586 <rproc_virtio_create_vdev+0x2a>
		return NULL;
10008582:	2300      	movs	r3, #0
10008584:	e092      	b.n	100086ac <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
10008586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10008588:	4613      	mov	r3, r2
1000858a:	005b      	lsls	r3, r3, #1
1000858c:	4413      	add	r3, r2
1000858e:	00db      	lsls	r3, r3, #3
10008590:	4618      	mov	r0, r3
10008592:	f7ff fedf 	bl	10008354 <metal_allocate_memory>
10008596:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
10008598:	6a3b      	ldr	r3, [r7, #32]
1000859a:	2b00      	cmp	r3, #0
1000859c:	f000 8081 	beq.w	100086a2 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
100085a0:	2248      	movs	r2, #72	@ 0x48
100085a2:	2100      	movs	r1, #0
100085a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
100085a6:	f001 fcc0 	bl	10009f2a <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
100085aa:	2218      	movs	r2, #24
100085ac:	2100      	movs	r1, #0
100085ae:	6a38      	ldr	r0, [r7, #32]
100085b0:	f001 fcbb 	bl	10009f2a <memset>
	vdev = &rpvdev->vdev;
100085b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100085b6:	3310      	adds	r3, #16
100085b8:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
100085ba:	2300      	movs	r3, #0
100085bc:	637b      	str	r3, [r7, #52]	@ 0x34
100085be:	e025      	b.n	1000860c <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
100085c0:	2300      	movs	r3, #0
100085c2:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
100085c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100085c6:	4613      	mov	r3, r2
100085c8:	009b      	lsls	r3, r3, #2
100085ca:	4413      	add	r3, r2
100085cc:	009b      	lsls	r3, r3, #2
100085ce:	3318      	adds	r3, #24
100085d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100085d2:	4413      	add	r3, r2
100085d4:	3304      	adds	r3, #4
100085d6:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
100085d8:	68fb      	ldr	r3, [r7, #12]
100085da:	2b00      	cmp	r3, #0
100085dc:	d102      	bne.n	100085e4 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
100085de:	69bb      	ldr	r3, [r7, #24]
100085e0:	689b      	ldr	r3, [r3, #8]
100085e2:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
100085e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
100085e6:	f7ff fecc 	bl	10008382 <virtqueue_allocate>
100085ea:	6178      	str	r0, [r7, #20]
		if (!vq)
100085ec:	697b      	ldr	r3, [r7, #20]
100085ee:	2b00      	cmp	r3, #0
100085f0:	d031      	beq.n	10008656 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
100085f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100085f4:	4613      	mov	r3, r2
100085f6:	005b      	lsls	r3, r3, #1
100085f8:	4413      	add	r3, r2
100085fa:	00db      	lsls	r3, r3, #3
100085fc:	461a      	mov	r2, r3
100085fe:	6a3b      	ldr	r3, [r7, #32]
10008600:	4413      	add	r3, r2
10008602:	697a      	ldr	r2, [r7, #20]
10008604:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
10008606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008608:	3301      	adds	r3, #1
1000860a:	637b      	str	r3, [r7, #52]	@ 0x34
1000860c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000860e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008610:	429a      	cmp	r2, r3
10008612:	d3d5      	bcc.n	100085c0 <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
10008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10008618:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
1000861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000861c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1000861e:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
10008620:	69fb      	ldr	r3, [r7, #28]
10008622:	6a3a      	ldr	r2, [r7, #32]
10008624:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
10008626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1000862a:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
1000862c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000862e:	683a      	ldr	r2, [r7, #0]
10008630:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
10008632:	69fb      	ldr	r3, [r7, #28]
10008634:	68ba      	ldr	r2, [r7, #8]
10008636:	601a      	str	r2, [r3, #0]
	vdev->role = role;
10008638:	69fb      	ldr	r3, [r7, #28]
1000863a:	68fa      	ldr	r2, [r7, #12]
1000863c:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
1000863e:	69fb      	ldr	r3, [r7, #28]
10008640:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10008642:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
10008644:	69fb      	ldr	r3, [r7, #28]
10008646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10008648:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
1000864a:	69fb      	ldr	r3, [r7, #28]
1000864c:	4a19      	ldr	r2, [pc, #100]	@ (100086b4 <rproc_virtio_create_vdev+0x158>)
1000864e:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
10008650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008652:	3310      	adds	r3, #16
10008654:	e02a      	b.n	100086ac <rproc_virtio_create_vdev+0x150>
			goto err1;
10008656:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
10008658:	2300      	movs	r3, #0
1000865a:	637b      	str	r3, [r7, #52]	@ 0x34
1000865c:	e019      	b.n	10008692 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
1000865e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008660:	4613      	mov	r3, r2
10008662:	005b      	lsls	r3, r3, #1
10008664:	4413      	add	r3, r2
10008666:	00db      	lsls	r3, r3, #3
10008668:	461a      	mov	r2, r3
1000866a:	6a3b      	ldr	r3, [r7, #32]
1000866c:	4413      	add	r3, r2
1000866e:	681b      	ldr	r3, [r3, #0]
10008670:	2b00      	cmp	r3, #0
10008672:	d00b      	beq.n	1000868c <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
10008674:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008676:	4613      	mov	r3, r2
10008678:	005b      	lsls	r3, r3, #1
1000867a:	4413      	add	r3, r2
1000867c:	00db      	lsls	r3, r3, #3
1000867e:	461a      	mov	r2, r3
10008680:	6a3b      	ldr	r3, [r7, #32]
10008682:	4413      	add	r3, r2
10008684:	681b      	ldr	r3, [r3, #0]
10008686:	4618      	mov	r0, r3
10008688:	f7ff fe70 	bl	1000836c <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
1000868c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000868e:	3301      	adds	r3, #1
10008690:	637b      	str	r3, [r7, #52]	@ 0x34
10008692:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008696:	429a      	cmp	r2, r3
10008698:	d3e1      	bcc.n	1000865e <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
1000869a:	6a38      	ldr	r0, [r7, #32]
1000869c:	f7ff fe66 	bl	1000836c <metal_free_memory>
100086a0:	e000      	b.n	100086a4 <rproc_virtio_create_vdev+0x148>
		goto err0;
100086a2:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
100086a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
100086a6:	f7ff fe61 	bl	1000836c <metal_free_memory>
	return NULL;
100086aa:	2300      	movs	r3, #0
}
100086ac:	4618      	mov	r0, r3
100086ae:	3738      	adds	r7, #56	@ 0x38
100086b0:	46bd      	mov	sp, r7
100086b2:	bd80      	pop	{r7, pc}
100086b4:	1000b060 	.word	0x1000b060

100086b8 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
100086b8:	b480      	push	{r7}
100086ba:	b087      	sub	sp, #28
100086bc:	af00      	add	r7, sp, #0
100086be:	60f8      	str	r0, [r7, #12]
100086c0:	60b9      	str	r1, [r7, #8]
100086c2:	607a      	str	r2, [r7, #4]
100086c4:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
100086c6:	68fb      	ldr	r3, [r7, #12]
100086c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100086ca:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
100086cc:	68ba      	ldr	r2, [r7, #8]
100086ce:	697b      	ldr	r3, [r7, #20]
100086d0:	429a      	cmp	r2, r3
100086d2:	d302      	bcc.n	100086da <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
100086d4:	f06f 0301 	mvn.w	r3, #1
100086d8:	e019      	b.n	1000870e <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
100086da:	68fb      	ldr	r3, [r7, #12]
100086dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100086de:	68ba      	ldr	r2, [r7, #8]
100086e0:	4613      	mov	r3, r2
100086e2:	005b      	lsls	r3, r3, #1
100086e4:	4413      	add	r3, r2
100086e6:	00db      	lsls	r3, r3, #3
100086e8:	440b      	add	r3, r1
100086ea:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
100086ec:	693b      	ldr	r3, [r7, #16]
100086ee:	6a3a      	ldr	r2, [r7, #32]
100086f0:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
100086f2:	693b      	ldr	r3, [r7, #16]
100086f4:	687a      	ldr	r2, [r7, #4]
100086f6:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
100086f8:	693b      	ldr	r3, [r7, #16]
100086fa:	683a      	ldr	r2, [r7, #0]
100086fc:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
100086fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008700:	b29a      	uxth	r2, r3
10008702:	693b      	ldr	r3, [r7, #16]
10008704:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
10008706:	693b      	ldr	r3, [r7, #16]
10008708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000870a:	609a      	str	r2, [r3, #8]

	return 0;
1000870c:	2300      	movs	r3, #0
}
1000870e:	4618      	mov	r0, r3
10008710:	371c      	adds	r7, #28
10008712:	46bd      	mov	sp, r7
10008714:	f85d 7b04 	ldr.w	r7, [sp], #4
10008718:	4770      	bx	lr

1000871a <rproc_virtio_wait_remote_ready>:
	}
	return 0;
}

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
1000871a:	b580      	push	{r7, lr}
1000871c:	b084      	sub	sp, #16
1000871e:	af00      	add	r7, sp, #0
10008720:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
10008722:	687b      	ldr	r3, [r7, #4]
10008724:	699b      	ldr	r3, [r3, #24]
10008726:	2b00      	cmp	r3, #0
10008728:	d00a      	beq.n	10008740 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
1000872a:	6878      	ldr	r0, [r7, #4]
1000872c:	f7ff fe76 	bl	1000841c <rproc_virtio_get_status>
10008730:	4603      	mov	r3, r0
10008732:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
10008734:	7bfb      	ldrb	r3, [r7, #15]
10008736:	f003 0304 	and.w	r3, r3, #4
1000873a:	2b00      	cmp	r3, #0
1000873c:	d102      	bne.n	10008744 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
1000873e:	e7f4      	b.n	1000872a <rproc_virtio_wait_remote_ready+0x10>
		return;
10008740:	bf00      	nop
10008742:	e000      	b.n	10008746 <rproc_virtio_wait_remote_ready+0x2c>
			return;
10008744:	bf00      	nop
		metal_cpu_yield();
	}
}
10008746:	3710      	adds	r7, #16
10008748:	46bd      	mov	sp, r7
1000874a:	bd80      	pop	{r7, pc}

1000874c <metal_list_add_before>:
{
1000874c:	b480      	push	{r7}
1000874e:	b083      	sub	sp, #12
10008750:	af00      	add	r7, sp, #0
10008752:	6078      	str	r0, [r7, #4]
10008754:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10008756:	687b      	ldr	r3, [r7, #4]
10008758:	685a      	ldr	r2, [r3, #4]
1000875a:	683b      	ldr	r3, [r7, #0]
1000875c:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000875e:	683b      	ldr	r3, [r7, #0]
10008760:	687a      	ldr	r2, [r7, #4]
10008762:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10008764:	683b      	ldr	r3, [r7, #0]
10008766:	681b      	ldr	r3, [r3, #0]
10008768:	683a      	ldr	r2, [r7, #0]
1000876a:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000876c:	683b      	ldr	r3, [r7, #0]
1000876e:	685b      	ldr	r3, [r3, #4]
10008770:	683a      	ldr	r2, [r7, #0]
10008772:	601a      	str	r2, [r3, #0]
}
10008774:	bf00      	nop
10008776:	370c      	adds	r7, #12
10008778:	46bd      	mov	sp, r7
1000877a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000877e:	4770      	bx	lr

10008780 <metal_list_add_tail>:
{
10008780:	b580      	push	{r7, lr}
10008782:	b082      	sub	sp, #8
10008784:	af00      	add	r7, sp, #0
10008786:	6078      	str	r0, [r7, #4]
10008788:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000878a:	6839      	ldr	r1, [r7, #0]
1000878c:	6878      	ldr	r0, [r7, #4]
1000878e:	f7ff ffdd 	bl	1000874c <metal_list_add_before>
}
10008792:	bf00      	nop
10008794:	3708      	adds	r7, #8
10008796:	46bd      	mov	sp, r7
10008798:	bd80      	pop	{r7, pc}

1000879a <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
1000879a:	b580      	push	{r7, lr}
1000879c:	b088      	sub	sp, #32
1000879e:	af00      	add	r7, sp, #0
100087a0:	60f8      	str	r0, [r7, #12]
100087a2:	60b9      	str	r1, [r7, #8]
100087a4:	607a      	str	r2, [r7, #4]
100087a6:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
100087a8:	68fb      	ldr	r3, [r7, #12]
100087aa:	681b      	ldr	r3, [r3, #0]
100087ac:	61fb      	str	r3, [r7, #28]
100087ae:	e04b      	b.n	10008848 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
100087b0:	2300      	movs	r3, #0
100087b2:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
100087b4:	69fb      	ldr	r3, [r7, #28]
100087b6:	3b34      	subs	r3, #52	@ 0x34
100087b8:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
100087ba:	687b      	ldr	r3, [r7, #4]
100087bc:	f1b3 3fff 	cmp.w	r3, #4294967295
100087c0:	d006      	beq.n	100087d0 <rpmsg_get_endpoint+0x36>
100087c2:	697b      	ldr	r3, [r7, #20]
100087c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100087c6:	687a      	ldr	r2, [r7, #4]
100087c8:	429a      	cmp	r2, r3
100087ca:	d101      	bne.n	100087d0 <rpmsg_get_endpoint+0x36>
			return ept;
100087cc:	697b      	ldr	r3, [r7, #20]
100087ce:	e040      	b.n	10008852 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
100087d0:	697b      	ldr	r3, [r7, #20]
100087d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100087d4:	687a      	ldr	r2, [r7, #4]
100087d6:	429a      	cmp	r2, r3
100087d8:	d106      	bne.n	100087e8 <rpmsg_get_endpoint+0x4e>
100087da:	697b      	ldr	r3, [r7, #20]
100087dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100087de:	683a      	ldr	r2, [r7, #0]
100087e0:	429a      	cmp	r2, r3
100087e2:	d101      	bne.n	100087e8 <rpmsg_get_endpoint+0x4e>
			return ept;
100087e4:	697b      	ldr	r3, [r7, #20]
100087e6:	e034      	b.n	10008852 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
100087e8:	68bb      	ldr	r3, [r7, #8]
100087ea:	2b00      	cmp	r3, #0
100087ec:	d00c      	beq.n	10008808 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
100087ee:	697b      	ldr	r3, [r7, #20]
100087f0:	2220      	movs	r2, #32
100087f2:	68b9      	ldr	r1, [r7, #8]
100087f4:	4618      	mov	r0, r3
100087f6:	f001 fba0 	bl	10009f3a <strncmp>
100087fa:	4603      	mov	r3, r0
100087fc:	2b00      	cmp	r3, #0
100087fe:	bf0c      	ite	eq
10008800:	2301      	moveq	r3, #1
10008802:	2300      	movne	r3, #0
10008804:	b2db      	uxtb	r3, r3
10008806:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
10008808:	68bb      	ldr	r3, [r7, #8]
1000880a:	2b00      	cmp	r3, #0
1000880c:	d018      	beq.n	10008840 <rpmsg_get_endpoint+0xa6>
1000880e:	69bb      	ldr	r3, [r7, #24]
10008810:	2b00      	cmp	r3, #0
10008812:	d015      	beq.n	10008840 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
10008814:	683b      	ldr	r3, [r7, #0]
10008816:	f1b3 3fff 	cmp.w	r3, #4294967295
1000881a:	d006      	beq.n	1000882a <rpmsg_get_endpoint+0x90>
1000881c:	697b      	ldr	r3, [r7, #20]
1000881e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008820:	683a      	ldr	r2, [r7, #0]
10008822:	429a      	cmp	r2, r3
10008824:	d101      	bne.n	1000882a <rpmsg_get_endpoint+0x90>
			return ept;
10008826:	697b      	ldr	r3, [r7, #20]
10008828:	e013      	b.n	10008852 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
1000882a:	687b      	ldr	r3, [r7, #4]
1000882c:	f1b3 3fff 	cmp.w	r3, #4294967295
10008830:	d107      	bne.n	10008842 <rpmsg_get_endpoint+0xa8>
10008832:	697b      	ldr	r3, [r7, #20]
10008834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008836:	f1b3 3fff 	cmp.w	r3, #4294967295
1000883a:	d102      	bne.n	10008842 <rpmsg_get_endpoint+0xa8>
			return ept;
1000883c:	697b      	ldr	r3, [r7, #20]
1000883e:	e008      	b.n	10008852 <rpmsg_get_endpoint+0xb8>
			continue;
10008840:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
10008842:	69fb      	ldr	r3, [r7, #28]
10008844:	681b      	ldr	r3, [r3, #0]
10008846:	61fb      	str	r3, [r7, #28]
10008848:	68fb      	ldr	r3, [r7, #12]
1000884a:	69fa      	ldr	r2, [r7, #28]
1000884c:	429a      	cmp	r2, r3
1000884e:	d1af      	bne.n	100087b0 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
10008850:	2300      	movs	r3, #0
}
10008852:	4618      	mov	r0, r3
10008854:	3720      	adds	r7, #32
10008856:	46bd      	mov	sp, r7
10008858:	bd80      	pop	{r7, pc}

1000885a <rpmsg_register_endpoint>:
	metal_mutex_release(&rdev->lock);
}

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
1000885a:	b580      	push	{r7, lr}
1000885c:	b082      	sub	sp, #8
1000885e:	af00      	add	r7, sp, #0
10008860:	6078      	str	r0, [r7, #4]
10008862:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
10008864:	683b      	ldr	r3, [r7, #0]
10008866:	687a      	ldr	r2, [r7, #4]
10008868:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
1000886a:	687a      	ldr	r2, [r7, #4]
1000886c:	683b      	ldr	r3, [r7, #0]
1000886e:	3334      	adds	r3, #52	@ 0x34
10008870:	4619      	mov	r1, r3
10008872:	4610      	mov	r0, r2
10008874:	f7ff ff84 	bl	10008780 <metal_list_add_tail>
}
10008878:	bf00      	nop
1000887a:	3708      	adds	r7, #8
1000887c:	46bd      	mov	sp, r7
1000887e:	bd80      	pop	{r7, pc}

10008880 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
10008880:	b580      	push	{r7, lr}
10008882:	b084      	sub	sp, #16
10008884:	af00      	add	r7, sp, #0
10008886:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay = pdMS_TO_TICKS(usec/1000);
10008888:	687b      	ldr	r3, [r7, #4]
1000888a:	4a0d      	ldr	r2, [pc, #52]	@ (100088c0 <__metal_sleep_usec+0x40>)
1000888c:	fba2 2303 	umull	r2, r3, r2, r3
10008890:	099b      	lsrs	r3, r3, #6
10008892:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
10008896:	fb02 f303 	mul.w	r3, r2, r3
1000889a:	4a09      	ldr	r2, [pc, #36]	@ (100088c0 <__metal_sleep_usec+0x40>)
1000889c:	fba2 2303 	umull	r2, r3, r2, r3
100088a0:	099b      	lsrs	r3, r3, #6
100088a2:	60fb      	str	r3, [r7, #12]

	vTaskDelay(xDelay ? xDelay : 1);
100088a4:	68fb      	ldr	r3, [r7, #12]
100088a6:	2b00      	cmp	r3, #0
100088a8:	d001      	beq.n	100088ae <__metal_sleep_usec+0x2e>
100088aa:	68fb      	ldr	r3, [r7, #12]
100088ac:	e000      	b.n	100088b0 <__metal_sleep_usec+0x30>
100088ae:	2301      	movs	r3, #1
100088b0:	4618      	mov	r0, r3
100088b2:	f7fd fed5 	bl	10006660 <vTaskDelay>
	return 0;
100088b6:	2300      	movs	r3, #0
}
100088b8:	4618      	mov	r0, r3
100088ba:	3710      	adds	r7, #16
100088bc:	46bd      	mov	sp, r7
100088be:	bd80      	pop	{r7, pc}
100088c0:	10624dd3 	.word	0x10624dd3

100088c4 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
100088c4:	b580      	push	{r7, lr}
100088c6:	b082      	sub	sp, #8
100088c8:	af00      	add	r7, sp, #0
100088ca:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
100088cc:	6878      	ldr	r0, [r7, #4]
100088ce:	f7ff ffd7 	bl	10008880 <__metal_sleep_usec>
100088d2:	4603      	mov	r3, r0
}
100088d4:	4618      	mov	r0, r3
100088d6:	3708      	adds	r7, #8
100088d8:	46bd      	mov	sp, r7
100088da:	bd80      	pop	{r7, pc}

100088dc <metal_list_init>:
{
100088dc:	b480      	push	{r7}
100088de:	b083      	sub	sp, #12
100088e0:	af00      	add	r7, sp, #0
100088e2:	6078      	str	r0, [r7, #4]
	list->prev = list;
100088e4:	687b      	ldr	r3, [r7, #4]
100088e6:	687a      	ldr	r2, [r7, #4]
100088e8:	605a      	str	r2, [r3, #4]
	list->next = list;
100088ea:	687b      	ldr	r3, [r7, #4]
100088ec:	687a      	ldr	r2, [r7, #4]
100088ee:	601a      	str	r2, [r3, #0]
}
100088f0:	bf00      	nop
100088f2:	370c      	adds	r7, #12
100088f4:	46bd      	mov	sp, r7
100088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
100088fa:	4770      	bx	lr

100088fc <metal_io_virt_to_offset>:
{
100088fc:	b480      	push	{r7}
100088fe:	b085      	sub	sp, #20
10008900:	af00      	add	r7, sp, #0
10008902:	6078      	str	r0, [r7, #4]
10008904:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10008906:	683b      	ldr	r3, [r7, #0]
10008908:	687a      	ldr	r2, [r7, #4]
1000890a:	6812      	ldr	r2, [r2, #0]
1000890c:	1a9b      	subs	r3, r3, r2
1000890e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10008910:	687b      	ldr	r3, [r7, #4]
10008912:	689b      	ldr	r3, [r3, #8]
10008914:	68fa      	ldr	r2, [r7, #12]
10008916:	429a      	cmp	r2, r3
10008918:	d201      	bcs.n	1000891e <metal_io_virt_to_offset+0x22>
1000891a:	68fb      	ldr	r3, [r7, #12]
1000891c:	e001      	b.n	10008922 <metal_io_virt_to_offset+0x26>
1000891e:	f04f 33ff 	mov.w	r3, #4294967295
}
10008922:	4618      	mov	r0, r3
10008924:	3714      	adds	r7, #20
10008926:	46bd      	mov	sp, r7
10008928:	f85d 7b04 	ldr.w	r7, [sp], #4
1000892c:	4770      	bx	lr
	...

10008930 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
10008930:	b580      	push	{r7, lr}
10008932:	b082      	sub	sp, #8
10008934:	af00      	add	r7, sp, #0
10008936:	6078      	str	r0, [r7, #4]
	metal_assert(mutex);
10008938:	687b      	ldr	r3, [r7, #4]
1000893a:	2b00      	cmp	r3, #0
1000893c:	d105      	bne.n	1000894a <__metal_mutex_init+0x1a>
1000893e:	4b0d      	ldr	r3, [pc, #52]	@ (10008974 <__metal_mutex_init+0x44>)
10008940:	4a0d      	ldr	r2, [pc, #52]	@ (10008978 <__metal_mutex_init+0x48>)
10008942:	2137      	movs	r1, #55	@ 0x37
10008944:	480d      	ldr	r0, [pc, #52]	@ (1000897c <__metal_mutex_init+0x4c>)
10008946:	f001 f9bb 	bl	10009cc0 <__assert_func>
	mutex->m = xSemaphoreCreateMutex();
1000894a:	2001      	movs	r0, #1
1000894c:	f7fc ffb3 	bl	100058b6 <xQueueCreateMutex>
10008950:	4602      	mov	r2, r0
10008952:	687b      	ldr	r3, [r7, #4]
10008954:	601a      	str	r2, [r3, #0]
	metal_assert(mutex->m != NULL);
10008956:	687b      	ldr	r3, [r7, #4]
10008958:	681b      	ldr	r3, [r3, #0]
1000895a:	2b00      	cmp	r3, #0
1000895c:	d105      	bne.n	1000896a <__metal_mutex_init+0x3a>
1000895e:	4b08      	ldr	r3, [pc, #32]	@ (10008980 <__metal_mutex_init+0x50>)
10008960:	4a05      	ldr	r2, [pc, #20]	@ (10008978 <__metal_mutex_init+0x48>)
10008962:	2139      	movs	r1, #57	@ 0x39
10008964:	4805      	ldr	r0, [pc, #20]	@ (1000897c <__metal_mutex_init+0x4c>)
10008966:	f001 f9ab 	bl	10009cc0 <__assert_func>
}
1000896a:	bf00      	nop
1000896c:	3708      	adds	r7, #8
1000896e:	46bd      	mov	sp, r7
10008970:	bd80      	pop	{r7, pc}
10008972:	bf00      	nop
10008974:	1000ae88 	.word	0x1000ae88
10008978:	1000b148 	.word	0x1000b148
1000897c:	1000ae90 	.word	0x1000ae90
10008980:	1000aeec 	.word	0x1000aeec

10008984 <__metal_mutex_acquire>:
	metal_assert(mutex && mutex->m != NULL);
	return xSemaphoreTake(mutex->m, ( TickType_t ) 0 );
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
10008984:	b580      	push	{r7, lr}
10008986:	b082      	sub	sp, #8
10008988:	af00      	add	r7, sp, #0
1000898a:	6078      	str	r0, [r7, #4]
	metal_assert(mutex && mutex->m != NULL);
1000898c:	687b      	ldr	r3, [r7, #4]
1000898e:	2b00      	cmp	r3, #0
10008990:	d003      	beq.n	1000899a <__metal_mutex_acquire+0x16>
10008992:	687b      	ldr	r3, [r7, #4]
10008994:	681b      	ldr	r3, [r3, #0]
10008996:	2b00      	cmp	r3, #0
10008998:	d105      	bne.n	100089a6 <__metal_mutex_acquire+0x22>
1000899a:	4b08      	ldr	r3, [pc, #32]	@ (100089bc <__metal_mutex_acquire+0x38>)
1000899c:	4a08      	ldr	r2, [pc, #32]	@ (100089c0 <__metal_mutex_acquire+0x3c>)
1000899e:	214b      	movs	r1, #75	@ 0x4b
100089a0:	4808      	ldr	r0, [pc, #32]	@ (100089c4 <__metal_mutex_acquire+0x40>)
100089a2:	f001 f98d 	bl	10009cc0 <__assert_func>
	xSemaphoreTake(mutex->m, portMAX_DELAY);
100089a6:	687b      	ldr	r3, [r7, #4]
100089a8:	681b      	ldr	r3, [r3, #0]
100089aa:	f04f 31ff 	mov.w	r1, #4294967295
100089ae:	4618      	mov	r0, r3
100089b0:	f7fd fa1a 	bl	10005de8 <xQueueSemaphoreTake>
}
100089b4:	bf00      	nop
100089b6:	3708      	adds	r7, #8
100089b8:	46bd      	mov	sp, r7
100089ba:	bd80      	pop	{r7, pc}
100089bc:	1000af04 	.word	0x1000af04
100089c0:	1000b0b4 	.word	0x1000b0b4
100089c4:	1000ae90 	.word	0x1000ae90

100089c8 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
100089c8:	b580      	push	{r7, lr}
100089ca:	b082      	sub	sp, #8
100089cc:	af00      	add	r7, sp, #0
100089ce:	6078      	str	r0, [r7, #4]
	metal_assert(mutex && mutex->m != NULL);
100089d0:	687b      	ldr	r3, [r7, #4]
100089d2:	2b00      	cmp	r3, #0
100089d4:	d003      	beq.n	100089de <__metal_mutex_release+0x16>
100089d6:	687b      	ldr	r3, [r7, #4]
100089d8:	681b      	ldr	r3, [r3, #0]
100089da:	2b00      	cmp	r3, #0
100089dc:	d105      	bne.n	100089ea <__metal_mutex_release+0x22>
100089de:	4b08      	ldr	r3, [pc, #32]	@ (10008a00 <__metal_mutex_release+0x38>)
100089e0:	4a08      	ldr	r2, [pc, #32]	@ (10008a04 <__metal_mutex_release+0x3c>)
100089e2:	2151      	movs	r1, #81	@ 0x51
100089e4:	4808      	ldr	r0, [pc, #32]	@ (10008a08 <__metal_mutex_release+0x40>)
100089e6:	f001 f96b 	bl	10009cc0 <__assert_func>
	xSemaphoreGive(mutex->m);
100089ea:	687b      	ldr	r3, [r7, #4]
100089ec:	6818      	ldr	r0, [r3, #0]
100089ee:	2300      	movs	r3, #0
100089f0:	2200      	movs	r2, #0
100089f2:	2100      	movs	r1, #0
100089f4:	f7fc ff78 	bl	100058e8 <xQueueGenericSend>
}
100089f8:	bf00      	nop
100089fa:	3708      	adds	r7, #8
100089fc:	46bd      	mov	sp, r7
100089fe:	bd80      	pop	{r7, pc}
10008a00:	1000af04 	.word	0x1000af04
10008a04:	1000b0cc 	.word	0x1000b0cc
10008a08:	1000ae90 	.word	0x1000ae90

10008a0c <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
10008a0c:	b580      	push	{r7, lr}
10008a0e:	b082      	sub	sp, #8
10008a10:	af00      	add	r7, sp, #0
10008a12:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
10008a14:	6878      	ldr	r0, [r7, #4]
10008a16:	f7ff ff8b 	bl	10008930 <__metal_mutex_init>
}
10008a1a:	bf00      	nop
10008a1c:	3708      	adds	r7, #8
10008a1e:	46bd      	mov	sp, r7
10008a20:	bd80      	pop	{r7, pc}

10008a22 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
10008a22:	b580      	push	{r7, lr}
10008a24:	b082      	sub	sp, #8
10008a26:	af00      	add	r7, sp, #0
10008a28:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
10008a2a:	6878      	ldr	r0, [r7, #4]
10008a2c:	f7ff ffaa 	bl	10008984 <__metal_mutex_acquire>
}
10008a30:	bf00      	nop
10008a32:	3708      	adds	r7, #8
10008a34:	46bd      	mov	sp, r7
10008a36:	bd80      	pop	{r7, pc}

10008a38 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
10008a38:	b580      	push	{r7, lr}
10008a3a:	b082      	sub	sp, #8
10008a3c:	af00      	add	r7, sp, #0
10008a3e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
10008a40:	6878      	ldr	r0, [r7, #4]
10008a42:	f7ff ffc1 	bl	100089c8 <__metal_mutex_release>
}
10008a46:	bf00      	nop
10008a48:	3708      	adds	r7, #8
10008a4a:	46bd      	mov	sp, r7
10008a4c:	bd80      	pop	{r7, pc}

10008a4e <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
10008a4e:	b480      	push	{r7}
10008a50:	b083      	sub	sp, #12
10008a52:	af00      	add	r7, sp, #0
10008a54:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
10008a56:	687b      	ldr	r3, [r7, #4]
10008a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10008a5a:	699b      	ldr	r3, [r3, #24]
}
10008a5c:	4618      	mov	r0, r3
10008a5e:	370c      	adds	r7, #12
10008a60:	46bd      	mov	sp, r7
10008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
10008a66:	4770      	bx	lr

10008a68 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
10008a68:	b580      	push	{r7, lr}
10008a6a:	b082      	sub	sp, #8
10008a6c:	af00      	add	r7, sp, #0
10008a6e:	6078      	str	r0, [r7, #4]
10008a70:	460b      	mov	r3, r1
10008a72:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
10008a74:	687b      	ldr	r3, [r7, #4]
10008a76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10008a78:	6a1b      	ldr	r3, [r3, #32]
10008a7a:	685b      	ldr	r3, [r3, #4]
10008a7c:	687a      	ldr	r2, [r7, #4]
10008a7e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
10008a80:	78f9      	ldrb	r1, [r7, #3]
10008a82:	4610      	mov	r0, r2
10008a84:	4798      	blx	r3
}
10008a86:	bf00      	nop
10008a88:	3708      	adds	r7, #8
10008a8a:	46bd      	mov	sp, r7
10008a8c:	bd80      	pop	{r7, pc}

10008a8e <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
10008a8e:	b580      	push	{r7, lr}
10008a90:	b082      	sub	sp, #8
10008a92:	af00      	add	r7, sp, #0
10008a94:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
10008a96:	687b      	ldr	r3, [r7, #4]
10008a98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10008a9a:	6a1b      	ldr	r3, [r3, #32]
10008a9c:	681b      	ldr	r3, [r3, #0]
10008a9e:	687a      	ldr	r2, [r7, #4]
10008aa0:	6f92      	ldr	r2, [r2, #120]	@ 0x78
10008aa2:	4610      	mov	r0, r2
10008aa4:	4798      	blx	r3
10008aa6:	4603      	mov	r3, r0
}
10008aa8:	4618      	mov	r0, r3
10008aaa:	3708      	adds	r7, #8
10008aac:	46bd      	mov	sp, r7
10008aae:	bd80      	pop	{r7, pc}

10008ab0 <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
10008ab0:	b580      	push	{r7, lr}
10008ab2:	b082      	sub	sp, #8
10008ab4:	af00      	add	r7, sp, #0
10008ab6:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
10008ab8:	687b      	ldr	r3, [r7, #4]
10008aba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10008abc:	6a1b      	ldr	r3, [r3, #32]
10008abe:	689b      	ldr	r3, [r3, #8]
10008ac0:	687a      	ldr	r2, [r7, #4]
10008ac2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
10008ac4:	4610      	mov	r0, r2
10008ac6:	4798      	blx	r3
10008ac8:	4603      	mov	r3, r0
}
10008aca:	4618      	mov	r0, r3
10008acc:	3708      	adds	r7, #8
10008ace:	46bd      	mov	sp, r7
10008ad0:	bd80      	pop	{r7, pc}

10008ad2 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
10008ad2:	b580      	push	{r7, lr}
10008ad4:	b086      	sub	sp, #24
10008ad6:	af02      	add	r7, sp, #8
10008ad8:	60f8      	str	r0, [r7, #12]
10008ada:	60b9      	str	r1, [r7, #8]
10008adc:	607a      	str	r2, [r7, #4]
10008ade:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
10008ae0:	68fb      	ldr	r3, [r7, #12]
10008ae2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
10008ae4:	68b9      	ldr	r1, [r7, #8]
10008ae6:	69bb      	ldr	r3, [r7, #24]
10008ae8:	9300      	str	r3, [sp, #0]
10008aea:	683b      	ldr	r3, [r7, #0]
10008aec:	687a      	ldr	r2, [r7, #4]
10008aee:	f000 fc2b 	bl	10009348 <virtio_create_virtqueues>
10008af2:	4603      	mov	r3, r0
					callbacks);
}
10008af4:	4618      	mov	r0, r3
10008af6:	3710      	adds	r7, #16
10008af8:	46bd      	mov	sp, r7
10008afa:	bd80      	pop	{r7, pc}

10008afc <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
10008afc:	b580      	push	{r7, lr}
10008afe:	b084      	sub	sp, #16
10008b00:	af00      	add	r7, sp, #0
10008b02:	60f8      	str	r0, [r7, #12]
10008b04:	60b9      	str	r1, [r7, #8]
10008b06:	607a      	str	r2, [r7, #4]
10008b08:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10008b0a:	68f8      	ldr	r0, [r7, #12]
10008b0c:	68bb      	ldr	r3, [r7, #8]
10008b0e:	2b00      	cmp	r3, #0
10008b10:	d001      	beq.n	10008b16 <rpmsg_initialize_ept+0x1a>
10008b12:	68bb      	ldr	r3, [r7, #8]
10008b14:	e000      	b.n	10008b18 <rpmsg_initialize_ept+0x1c>
10008b16:	4b0a      	ldr	r3, [pc, #40]	@ (10008b40 <rpmsg_initialize_ept+0x44>)
10008b18:	2220      	movs	r2, #32
10008b1a:	4619      	mov	r1, r3
10008b1c:	f001 fa1f 	bl	10009f5e <strncpy>
	ept->addr = src;
10008b20:	68fb      	ldr	r3, [r7, #12]
10008b22:	687a      	ldr	r2, [r7, #4]
10008b24:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
10008b26:	68fb      	ldr	r3, [r7, #12]
10008b28:	683a      	ldr	r2, [r7, #0]
10008b2a:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
10008b2c:	68fb      	ldr	r3, [r7, #12]
10008b2e:	69ba      	ldr	r2, [r7, #24]
10008b30:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
10008b32:	68fb      	ldr	r3, [r7, #12]
10008b34:	69fa      	ldr	r2, [r7, #28]
10008b36:	631a      	str	r2, [r3, #48]	@ 0x30
}
10008b38:	bf00      	nop
10008b3a:	3710      	adds	r7, #16
10008b3c:	46bd      	mov	sp, r7
10008b3e:	bd80      	pop	{r7, pc}
10008b40:	1000af28 	.word	0x1000af28

10008b44 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
10008b44:	b580      	push	{r7, lr}
10008b46:	b082      	sub	sp, #8
10008b48:	af00      	add	r7, sp, #0
10008b4a:	6078      	str	r0, [r7, #4]
10008b4c:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
10008b4e:	f04f 33ff 	mov.w	r3, #4294967295
10008b52:	683a      	ldr	r2, [r7, #0]
10008b54:	2100      	movs	r1, #0
10008b56:	6878      	ldr	r0, [r7, #4]
10008b58:	f7ff fe1f 	bl	1000879a <rpmsg_get_endpoint>
10008b5c:	4603      	mov	r3, r0
}
10008b5e:	4618      	mov	r0, r3
10008b60:	3708      	adds	r7, #8
10008b62:	46bd      	mov	sp, r7
10008b64:	bd80      	pop	{r7, pc}

10008b66 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
10008b66:	b480      	push	{r7}
10008b68:	b085      	sub	sp, #20
10008b6a:	af00      	add	r7, sp, #0
10008b6c:	60f8      	str	r0, [r7, #12]
10008b6e:	60b9      	str	r1, [r7, #8]
10008b70:	607a      	str	r2, [r7, #4]
	if (!shpool)
10008b72:	68fb      	ldr	r3, [r7, #12]
10008b74:	2b00      	cmp	r3, #0
10008b76:	d009      	beq.n	10008b8c <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
10008b78:	68fb      	ldr	r3, [r7, #12]
10008b7a:	68ba      	ldr	r2, [r7, #8]
10008b7c:	601a      	str	r2, [r3, #0]
	shpool->size = size;
10008b7e:	68fb      	ldr	r3, [r7, #12]
10008b80:	687a      	ldr	r2, [r7, #4]
10008b82:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
10008b84:	68fb      	ldr	r3, [r7, #12]
10008b86:	687a      	ldr	r2, [r7, #4]
10008b88:	605a      	str	r2, [r3, #4]
10008b8a:	e000      	b.n	10008b8e <rpmsg_virtio_init_shm_pool+0x28>
		return;
10008b8c:	bf00      	nop
}
10008b8e:	3714      	adds	r7, #20
10008b90:	46bd      	mov	sp, r7
10008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
10008b96:	4770      	bx	lr

10008b98 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
10008b98:	b580      	push	{r7, lr}
10008b9a:	b086      	sub	sp, #24
10008b9c:	af00      	add	r7, sp, #0
10008b9e:	60f8      	str	r0, [r7, #12]
10008ba0:	60b9      	str	r1, [r7, #8]
10008ba2:	607a      	str	r2, [r7, #4]
10008ba4:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10008ba6:	68f8      	ldr	r0, [r7, #12]
10008ba8:	f7ff ff51 	bl	10008a4e <rpmsg_virtio_get_role>
10008bac:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10008bae:	697b      	ldr	r3, [r7, #20]
10008bb0:	2b01      	cmp	r3, #1
10008bb2:	d106      	bne.n	10008bc2 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
10008bb4:	68fb      	ldr	r3, [r7, #12]
10008bb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10008bb8:	8879      	ldrh	r1, [r7, #2]
10008bba:	687a      	ldr	r2, [r7, #4]
10008bbc:	4618      	mov	r0, r3
10008bbe:	f000 fd95 	bl	100096ec <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
10008bc2:	bf00      	nop
10008bc4:	3718      	adds	r7, #24
10008bc6:	46bd      	mov	sp, r7
10008bc8:	bd80      	pop	{r7, pc}

10008bca <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
10008bca:	b580      	push	{r7, lr}
10008bcc:	b086      	sub	sp, #24
10008bce:	af00      	add	r7, sp, #0
10008bd0:	60f8      	str	r0, [r7, #12]
10008bd2:	60b9      	str	r1, [r7, #8]
10008bd4:	607a      	str	r2, [r7, #4]
10008bd6:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10008bd8:	68f8      	ldr	r0, [r7, #12]
10008bda:	f7ff ff38 	bl	10008a4e <rpmsg_virtio_get_role>
10008bde:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10008be0:	697b      	ldr	r3, [r7, #20]
10008be2:	2b01      	cmp	r3, #1
10008be4:	d109      	bne.n	10008bfa <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
10008be6:	68fb      	ldr	r3, [r7, #12]
10008be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10008bec:	8879      	ldrh	r1, [r7, #2]
10008bee:	687a      	ldr	r2, [r7, #4]
10008bf0:	4618      	mov	r0, r3
10008bf2:	f000 fd7b 	bl	100096ec <virtqueue_add_consumed_buffer>
10008bf6:	4603      	mov	r3, r0
10008bf8:	e000      	b.n	10008bfc <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
10008bfa:	2300      	movs	r3, #0
}
10008bfc:	4618      	mov	r0, r3
10008bfe:	3718      	adds	r7, #24
10008c00:	46bd      	mov	sp, r7
10008c02:	bd80      	pop	{r7, pc}

10008c04 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10008c04:	b580      	push	{r7, lr}
10008c06:	b086      	sub	sp, #24
10008c08:	af00      	add	r7, sp, #0
10008c0a:	60f8      	str	r0, [r7, #12]
10008c0c:	60b9      	str	r1, [r7, #8]
10008c0e:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10008c10:	68f8      	ldr	r0, [r7, #12]
10008c12:	f7ff ff1c 	bl	10008a4e <rpmsg_virtio_get_role>
10008c16:	6138      	str	r0, [r7, #16]
	void *data = NULL;
10008c18:	2300      	movs	r3, #0
10008c1a:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10008c1c:	693b      	ldr	r3, [r7, #16]
10008c1e:	2b01      	cmp	r3, #1
10008c20:	d108      	bne.n	10008c34 <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
10008c22:	68fb      	ldr	r3, [r7, #12]
10008c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10008c28:	68ba      	ldr	r2, [r7, #8]
10008c2a:	6879      	ldr	r1, [r7, #4]
10008c2c:	4618      	mov	r0, r3
10008c2e:	f000 fd15 	bl	1000965c <virtqueue_get_available_buffer>
10008c32:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
10008c34:	697b      	ldr	r3, [r7, #20]
}
10008c36:	4618      	mov	r0, r3
10008c38:	3718      	adds	r7, #24
10008c3a:	46bd      	mov	sp, r7
10008c3c:	bd80      	pop	{r7, pc}

10008c3e <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10008c3e:	b580      	push	{r7, lr}
10008c40:	b086      	sub	sp, #24
10008c42:	af00      	add	r7, sp, #0
10008c44:	60f8      	str	r0, [r7, #12]
10008c46:	60b9      	str	r1, [r7, #8]
10008c48:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10008c4a:	68f8      	ldr	r0, [r7, #12]
10008c4c:	f7ff feff 	bl	10008a4e <rpmsg_virtio_get_role>
10008c50:	6138      	str	r0, [r7, #16]
	void *data = NULL;
10008c52:	2300      	movs	r3, #0
10008c54:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10008c56:	693b      	ldr	r3, [r7, #16]
10008c58:	2b01      	cmp	r3, #1
10008c5a:	d107      	bne.n	10008c6c <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
10008c5c:	68fb      	ldr	r3, [r7, #12]
10008c5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10008c60:	68ba      	ldr	r2, [r7, #8]
10008c62:	6879      	ldr	r1, [r7, #4]
10008c64:	4618      	mov	r0, r3
10008c66:	f000 fcf9 	bl	1000965c <virtqueue_get_available_buffer>
10008c6a:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
10008c6c:	697b      	ldr	r3, [r7, #20]
}
10008c6e:	4618      	mov	r0, r3
10008c70:	3718      	adds	r7, #24
10008c72:	46bd      	mov	sp, r7
10008c74:	bd80      	pop	{r7, pc}

10008c76 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
10008c76:	b580      	push	{r7, lr}
10008c78:	b084      	sub	sp, #16
10008c7a:	af00      	add	r7, sp, #0
10008c7c:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
10008c7e:	6878      	ldr	r0, [r7, #4]
10008c80:	f7ff ff05 	bl	10008a8e <rpmsg_virtio_get_status>
10008c84:	4603      	mov	r3, r0
10008c86:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
10008c88:	7bfb      	ldrb	r3, [r7, #15]
10008c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10008c8e:	2b00      	cmp	r3, #0
10008c90:	d004      	beq.n	10008c9c <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
10008c92:	2100      	movs	r1, #0
10008c94:	6878      	ldr	r0, [r7, #4]
10008c96:	f7ff fee7 	bl	10008a68 <rpmsg_virtio_set_status>
10008c9a:	e7f0      	b.n	10008c7e <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
10008c9c:	7bfb      	ldrb	r3, [r7, #15]
10008c9e:	f003 0304 	and.w	r3, r3, #4
10008ca2:	2b00      	cmp	r3, #0
10008ca4:	d0eb      	beq.n	10008c7e <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
10008ca6:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
10008ca8:	4618      	mov	r0, r3
10008caa:	3710      	adds	r7, #16
10008cac:	46bd      	mov	sp, r7
10008cae:	bd80      	pop	{r7, pc}

10008cb0 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
10008cb0:	b480      	push	{r7}
10008cb2:	b085      	sub	sp, #20
10008cb4:	af00      	add	r7, sp, #0
10008cb6:	6078      	str	r0, [r7, #4]
10008cb8:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
10008cba:	683b      	ldr	r3, [r7, #0]
10008cbc:	3b10      	subs	r3, #16
10008cbe:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
10008cc0:	68fb      	ldr	r3, [r7, #12]
10008cc2:	689b      	ldr	r3, [r3, #8]
10008cc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
10008cc8:	68fb      	ldr	r3, [r7, #12]
10008cca:	609a      	str	r2, [r3, #8]
}
10008ccc:	bf00      	nop
10008cce:	3714      	adds	r7, #20
10008cd0:	46bd      	mov	sp, r7
10008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
10008cd6:	4770      	bx	lr

10008cd8 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
10008cd8:	b580      	push	{r7, lr}
10008cda:	b086      	sub	sp, #24
10008cdc:	af00      	add	r7, sp, #0
10008cde:	6078      	str	r0, [r7, #4]
10008ce0:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10008ce2:	687b      	ldr	r3, [r7, #4]
10008ce4:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
10008ce6:	683b      	ldr	r3, [r7, #0]
10008ce8:	3b10      	subs	r3, #16
10008cea:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
10008cec:	693b      	ldr	r3, [r7, #16]
10008cee:	689b      	ldr	r3, [r3, #8]
10008cf0:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
10008cf2:	687b      	ldr	r3, [r7, #4]
10008cf4:	3358      	adds	r3, #88	@ 0x58
10008cf6:	4618      	mov	r0, r3
10008cf8:	f7ff fe93 	bl	10008a22 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
10008cfc:	697b      	ldr	r3, [r7, #20]
10008cfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10008d00:	89fa      	ldrh	r2, [r7, #14]
10008d02:	4611      	mov	r1, r2
10008d04:	4618      	mov	r0, r3
10008d06:	f000 fc97 	bl	10009638 <virtqueue_get_buffer_length>
10008d0a:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10008d0c:	89fb      	ldrh	r3, [r7, #14]
10008d0e:	68ba      	ldr	r2, [r7, #8]
10008d10:	6939      	ldr	r1, [r7, #16]
10008d12:	6978      	ldr	r0, [r7, #20]
10008d14:	f7ff ff40 	bl	10008b98 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
10008d18:	687b      	ldr	r3, [r7, #4]
10008d1a:	3358      	adds	r3, #88	@ 0x58
10008d1c:	4618      	mov	r0, r3
10008d1e:	f7ff fe8b 	bl	10008a38 <metal_mutex_release>
}
10008d22:	bf00      	nop
10008d24:	3718      	adds	r7, #24
10008d26:	46bd      	mov	sp, r7
10008d28:	bd80      	pop	{r7, pc}

10008d2a <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
10008d2a:	b580      	push	{r7, lr}
10008d2c:	b08a      	sub	sp, #40	@ 0x28
10008d2e:	af00      	add	r7, sp, #0
10008d30:	60f8      	str	r0, [r7, #12]
10008d32:	60b9      	str	r1, [r7, #8]
10008d34:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10008d36:	68fb      	ldr	r3, [r7, #12]
10008d38:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
10008d3a:	6a38      	ldr	r0, [r7, #32]
10008d3c:	f7ff fea7 	bl	10008a8e <rpmsg_virtio_get_status>
10008d40:	4603      	mov	r3, r0
10008d42:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
10008d44:	69fb      	ldr	r3, [r7, #28]
10008d46:	f003 0304 	and.w	r3, r3, #4
10008d4a:	2b00      	cmp	r3, #0
10008d4c:	d101      	bne.n	10008d52 <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
10008d4e:	2300      	movs	r3, #0
10008d50:	e039      	b.n	10008dc6 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
10008d52:	687b      	ldr	r3, [r7, #4]
10008d54:	2b00      	cmp	r3, #0
10008d56:	d003      	beq.n	10008d60 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
10008d58:	f643 2398 	movw	r3, #15000	@ 0x3a98
10008d5c:	627b      	str	r3, [r7, #36]	@ 0x24
10008d5e:	e001      	b.n	10008d64 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
10008d60:	2300      	movs	r3, #0
10008d62:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
10008d64:	68fb      	ldr	r3, [r7, #12]
10008d66:	3358      	adds	r3, #88	@ 0x58
10008d68:	4618      	mov	r0, r3
10008d6a:	f7ff fe5a 	bl	10008a22 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
10008d6e:	f107 0316 	add.w	r3, r7, #22
10008d72:	461a      	mov	r2, r3
10008d74:	68b9      	ldr	r1, [r7, #8]
10008d76:	6a38      	ldr	r0, [r7, #32]
10008d78:	f7ff ff44 	bl	10008c04 <rpmsg_virtio_get_tx_buffer>
10008d7c:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
10008d7e:	68fb      	ldr	r3, [r7, #12]
10008d80:	3358      	adds	r3, #88	@ 0x58
10008d82:	4618      	mov	r0, r3
10008d84:	f7ff fe58 	bl	10008a38 <metal_mutex_release>
		if (rp_hdr || !tick_count)
10008d88:	69bb      	ldr	r3, [r7, #24]
10008d8a:	2b00      	cmp	r3, #0
10008d8c:	d10a      	bne.n	10008da4 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
10008d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008d90:	2b00      	cmp	r3, #0
10008d92:	d007      	beq.n	10008da4 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
10008d94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10008d98:	f7ff fd94 	bl	100088c4 <metal_sleep_usec>
		tick_count--;
10008d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008d9e:	3b01      	subs	r3, #1
10008da0:	627b      	str	r3, [r7, #36]	@ 0x24
		metal_mutex_acquire(&rdev->lock);
10008da2:	e7df      	b.n	10008d64 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
10008da4:	69bb      	ldr	r3, [r7, #24]
10008da6:	2b00      	cmp	r3, #0
10008da8:	d101      	bne.n	10008dae <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
10008daa:	2300      	movs	r3, #0
10008dac:	e00b      	b.n	10008dc6 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
10008dae:	8afb      	ldrh	r3, [r7, #22]
10008db0:	461a      	mov	r2, r3
10008db2:	69bb      	ldr	r3, [r7, #24]
10008db4:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
10008db6:	68bb      	ldr	r3, [r7, #8]
10008db8:	681b      	ldr	r3, [r3, #0]
10008dba:	f1a3 0210 	sub.w	r2, r3, #16
10008dbe:	68bb      	ldr	r3, [r7, #8]
10008dc0:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
10008dc2:	69bb      	ldr	r3, [r7, #24]
10008dc4:	3310      	adds	r3, #16
}
10008dc6:	4618      	mov	r0, r3
10008dc8:	3728      	adds	r7, #40	@ 0x28
10008dca:	46bd      	mov	sp, r7
10008dcc:	bd80      	pop	{r7, pc}
	...

10008dd0 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
10008dd0:	b580      	push	{r7, lr}
10008dd2:	b08e      	sub	sp, #56	@ 0x38
10008dd4:	af00      	add	r7, sp, #0
10008dd6:	60f8      	str	r0, [r7, #12]
10008dd8:	60b9      	str	r1, [r7, #8]
10008dda:	607a      	str	r2, [r7, #4]
10008ddc:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10008dde:	68fb      	ldr	r3, [r7, #12]
10008de0:	637b      	str	r3, [r7, #52]	@ 0x34

	hdr = RPMSG_LOCATE_HDR(data);
10008de2:	683b      	ldr	r3, [r7, #0]
10008de4:	3b10      	subs	r3, #16
10008de6:	633b      	str	r3, [r7, #48]	@ 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
10008de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008dea:	689b      	ldr	r3, [r3, #8]
10008dec:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
10008dee:	687b      	ldr	r3, [r7, #4]
10008df0:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
10008df2:	68bb      	ldr	r3, [r7, #8]
10008df4:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
10008df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10008df8:	b29b      	uxth	r3, r3
10008dfa:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
10008dfc:	2300      	movs	r3, #0
10008dfe:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
10008e00:	2300      	movs	r3, #0
10008e02:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
10008e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10008e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
10008e0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10008e0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10008e10:	f7ff fd74 	bl	100088fc <metal_io_virt_to_offset>
10008e14:	4601      	mov	r1, r0
10008e16:	f107 0210 	add.w	r2, r7, #16
10008e1a:	2310      	movs	r3, #16
10008e1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10008e1e:	f7ff f961 	bl	100080e4 <metal_io_block_write>
10008e22:	6278      	str	r0, [r7, #36]	@ 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
10008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008e26:	2b10      	cmp	r3, #16
10008e28:	d006      	beq.n	10008e38 <rpmsg_virtio_send_offchannel_nocopy+0x68>
10008e2a:	4b1b      	ldr	r3, [pc, #108]	@ (10008e98 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
10008e2c:	4a1b      	ldr	r2, [pc, #108]	@ (10008e9c <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10008e2e:	f240 117d 	movw	r1, #381	@ 0x17d
10008e32:	481b      	ldr	r0, [pc, #108]	@ (10008ea0 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
10008e34:	f000 ff44 	bl	10009cc0 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
10008e38:	68fb      	ldr	r3, [r7, #12]
10008e3a:	3358      	adds	r3, #88	@ 0x58
10008e3c:	4618      	mov	r0, r3
10008e3e:	f7ff fdf0 	bl	10008a22 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
10008e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10008e48:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
10008e4a:	4611      	mov	r1, r2
10008e4c:	4618      	mov	r0, r3
10008e4e:	f000 fbf3 	bl	10009638 <virtqueue_get_buffer_length>
10008e52:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
10008e54:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
10008e56:	6a3a      	ldr	r2, [r7, #32]
10008e58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10008e5a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10008e5c:	f7ff feb5 	bl	10008bca <rpmsg_virtio_enqueue_buffer>
10008e60:	6278      	str	r0, [r7, #36]	@ 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
10008e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008e64:	2b00      	cmp	r3, #0
10008e66:	d006      	beq.n	10008e76 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
10008e68:	4b0e      	ldr	r3, [pc, #56]	@ (10008ea4 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
10008e6a:	4a0c      	ldr	r2, [pc, #48]	@ (10008e9c <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10008e6c:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
10008e70:	480b      	ldr	r0, [pc, #44]	@ (10008ea0 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
10008e72:	f000 ff25 	bl	10009cc0 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
10008e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10008e7c:	4618      	mov	r0, r3
10008e7e:	f000 fcaf 	bl	100097e0 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
10008e82:	68fb      	ldr	r3, [r7, #12]
10008e84:	3358      	adds	r3, #88	@ 0x58
10008e86:	4618      	mov	r0, r3
10008e88:	f7ff fdd6 	bl	10008a38 <metal_mutex_release>

	return len;
10008e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
10008e8e:	4618      	mov	r0, r3
10008e90:	3738      	adds	r7, #56	@ 0x38
10008e92:	46bd      	mov	sp, r7
10008e94:	bd80      	pop	{r7, pc}
10008e96:	bf00      	nop
10008e98:	1000af2c 	.word	0x1000af2c
10008e9c:	1000b0e4 	.word	0x1000b0e4
10008ea0:	1000af48 	.word	0x1000af48
10008ea4:	1000afc0 	.word	0x1000afc0

10008ea8 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
10008ea8:	b580      	push	{r7, lr}
10008eaa:	b08c      	sub	sp, #48	@ 0x30
10008eac:	af02      	add	r7, sp, #8
10008eae:	60f8      	str	r0, [r7, #12]
10008eb0:	60b9      	str	r1, [r7, #8]
10008eb2:	607a      	str	r2, [r7, #4]
10008eb4:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10008eb6:	68fb      	ldr	r3, [r7, #12]
10008eb8:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
10008eba:	f107 0314 	add.w	r3, r7, #20
10008ebe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008ec0:	4619      	mov	r1, r3
10008ec2:	68f8      	ldr	r0, [r7, #12]
10008ec4:	f7ff ff31 	bl	10008d2a <rpmsg_virtio_get_tx_payload_buffer>
10008ec8:	6238      	str	r0, [r7, #32]
	if (!buffer)
10008eca:	6a3b      	ldr	r3, [r7, #32]
10008ecc:	2b00      	cmp	r3, #0
10008ece:	d101      	bne.n	10008ed4 <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
10008ed0:	4b17      	ldr	r3, [pc, #92]	@ (10008f30 <rpmsg_virtio_send_offchannel_raw+0x88>)
10008ed2:	e029      	b.n	10008f28 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
10008ed4:	697b      	ldr	r3, [r7, #20]
10008ed6:	461a      	mov	r2, r3
10008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008eda:	4293      	cmp	r3, r2
10008edc:	dd01      	ble.n	10008ee2 <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
10008ede:	697b      	ldr	r3, [r7, #20]
10008ee0:	633b      	str	r3, [r7, #48]	@ 0x30
	io = rvdev->shbuf_io;
10008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10008ee8:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
10008eea:	6a39      	ldr	r1, [r7, #32]
10008eec:	69f8      	ldr	r0, [r7, #28]
10008eee:	f7ff fd05 	bl	100088fc <metal_io_virt_to_offset>
10008ef2:	4601      	mov	r1, r0
10008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008ef6:	683a      	ldr	r2, [r7, #0]
10008ef8:	69f8      	ldr	r0, [r7, #28]
10008efa:	f7ff f8f3 	bl	100080e4 <metal_io_block_write>
10008efe:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
10008f00:	69ba      	ldr	r2, [r7, #24]
10008f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008f04:	429a      	cmp	r2, r3
10008f06:	d006      	beq.n	10008f16 <rpmsg_virtio_send_offchannel_raw+0x6e>
10008f08:	4b0a      	ldr	r3, [pc, #40]	@ (10008f34 <rpmsg_virtio_send_offchannel_raw+0x8c>)
10008f0a:	4a0b      	ldr	r2, [pc, #44]	@ (10008f38 <rpmsg_virtio_send_offchannel_raw+0x90>)
10008f0c:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
10008f10:	480a      	ldr	r0, [pc, #40]	@ (10008f3c <rpmsg_virtio_send_offchannel_raw+0x94>)
10008f12:	f000 fed5 	bl	10009cc0 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
10008f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008f18:	9300      	str	r3, [sp, #0]
10008f1a:	6a3b      	ldr	r3, [r7, #32]
10008f1c:	687a      	ldr	r2, [r7, #4]
10008f1e:	68b9      	ldr	r1, [r7, #8]
10008f20:	68f8      	ldr	r0, [r7, #12]
10008f22:	f7ff ff55 	bl	10008dd0 <rpmsg_virtio_send_offchannel_nocopy>
10008f26:	4603      	mov	r3, r0
}
10008f28:	4618      	mov	r0, r3
10008f2a:	3728      	adds	r7, #40	@ 0x28
10008f2c:	46bd      	mov	sp, r7
10008f2e:	bd80      	pop	{r7, pc}
10008f30:	fffff82e 	.word	0xfffff82e
10008f34:	1000afcc 	.word	0x1000afcc
10008f38:	1000b108 	.word	0x1000b108
10008f3c:	1000af48 	.word	0x1000af48

10008f40 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
10008f40:	b480      	push	{r7}
10008f42:	b083      	sub	sp, #12
10008f44:	af00      	add	r7, sp, #0
10008f46:	6078      	str	r0, [r7, #4]
	(void)vq;
}
10008f48:	bf00      	nop
10008f4a:	370c      	adds	r7, #12
10008f4c:	46bd      	mov	sp, r7
10008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
10008f52:	4770      	bx	lr

10008f54 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
10008f54:	b590      	push	{r4, r7, lr}
10008f56:	b08d      	sub	sp, #52	@ 0x34
10008f58:	af02      	add	r7, sp, #8
10008f5a:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
10008f5c:	687b      	ldr	r3, [r7, #4]
10008f5e:	681b      	ldr	r3, [r3, #0]
10008f60:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
10008f62:	6a3b      	ldr	r3, [r7, #32]
10008f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10008f66:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
10008f68:	69fb      	ldr	r3, [r7, #28]
10008f6a:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
10008f6c:	69bb      	ldr	r3, [r7, #24]
10008f6e:	3358      	adds	r3, #88	@ 0x58
10008f70:	4618      	mov	r0, r3
10008f72:	f7ff fd56 	bl	10008a22 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
10008f76:	f107 020a 	add.w	r2, r7, #10
10008f7a:	f107 030c 	add.w	r3, r7, #12
10008f7e:	4619      	mov	r1, r3
10008f80:	69f8      	ldr	r0, [r7, #28]
10008f82:	f7ff fe5c 	bl	10008c3e <rpmsg_virtio_get_rx_buffer>
10008f86:	6278      	str	r0, [r7, #36]	@ 0x24

	metal_mutex_release(&rdev->lock);
10008f88:	69bb      	ldr	r3, [r7, #24]
10008f8a:	3358      	adds	r3, #88	@ 0x58
10008f8c:	4618      	mov	r0, r3
10008f8e:	f7ff fd53 	bl	10008a38 <metal_mutex_release>

	while (rp_hdr) {
10008f92:	e062      	b.n	1000905a <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
10008f94:	897b      	ldrh	r3, [r7, #10]
10008f96:	461a      	mov	r2, r3
10008f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008f9a:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
10008f9c:	69bb      	ldr	r3, [r7, #24]
10008f9e:	3358      	adds	r3, #88	@ 0x58
10008fa0:	4618      	mov	r0, r3
10008fa2:	f7ff fd3e 	bl	10008a22 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
10008fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008fa8:	685b      	ldr	r3, [r3, #4]
10008faa:	4619      	mov	r1, r3
10008fac:	69b8      	ldr	r0, [r7, #24]
10008fae:	f7ff fdc9 	bl	10008b44 <rpmsg_get_ept_from_addr>
10008fb2:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
10008fb4:	69bb      	ldr	r3, [r7, #24]
10008fb6:	3358      	adds	r3, #88	@ 0x58
10008fb8:	4618      	mov	r0, r3
10008fba:	f7ff fd3d 	bl	10008a38 <metal_mutex_release>

		if (ept) {
10008fbe:	697b      	ldr	r3, [r7, #20]
10008fc0:	2b00      	cmp	r3, #0
10008fc2:	d025      	beq.n	10009010 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
10008fc4:	697b      	ldr	r3, [r7, #20]
10008fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
10008fcc:	d103      	bne.n	10008fd6 <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
10008fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008fd0:	681a      	ldr	r2, [r3, #0]
10008fd2:	697b      	ldr	r3, [r7, #20]
10008fd4:	629a      	str	r2, [r3, #40]	@ 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10008fd6:	697b      	ldr	r3, [r7, #20]
10008fd8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
10008fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008fdc:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
10008fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008fe2:	899b      	ldrh	r3, [r3, #12]
10008fe4:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10008fe6:	4618      	mov	r0, r3
10008fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008fea:	681a      	ldr	r2, [r3, #0]
10008fec:	697b      	ldr	r3, [r7, #20]
10008fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10008ff0:	9300      	str	r3, [sp, #0]
10008ff2:	4613      	mov	r3, r2
10008ff4:	4602      	mov	r2, r0
10008ff6:	6978      	ldr	r0, [r7, #20]
10008ff8:	47a0      	blx	r4
10008ffa:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
10008ffc:	693b      	ldr	r3, [r7, #16]
10008ffe:	2b00      	cmp	r3, #0
10009000:	da06      	bge.n	10009010 <rpmsg_virtio_rx_callback+0xbc>
10009002:	4b1a      	ldr	r3, [pc, #104]	@ (1000906c <rpmsg_virtio_rx_callback+0x118>)
10009004:	4a1a      	ldr	r2, [pc, #104]	@ (10009070 <rpmsg_virtio_rx_callback+0x11c>)
10009006:	f44f 71fd 	mov.w	r1, #506	@ 0x1fa
1000900a:	481a      	ldr	r0, [pc, #104]	@ (10009074 <rpmsg_virtio_rx_callback+0x120>)
1000900c:	f000 fe58 	bl	10009cc0 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
10009010:	69bb      	ldr	r3, [r7, #24]
10009012:	3358      	adds	r3, #88	@ 0x58
10009014:	4618      	mov	r0, r3
10009016:	f7ff fd04 	bl	10008a22 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
1000901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000901c:	689b      	ldr	r3, [r3, #8]
1000901e:	2b00      	cmp	r3, #0
10009020:	db05      	blt.n	1000902e <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10009022:	68fa      	ldr	r2, [r7, #12]
10009024:	897b      	ldrh	r3, [r7, #10]
10009026:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10009028:	69f8      	ldr	r0, [r7, #28]
1000902a:	f7ff fdb5 	bl	10008b98 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000902e:	f107 020a 	add.w	r2, r7, #10
10009032:	f107 030c 	add.w	r3, r7, #12
10009036:	4619      	mov	r1, r3
10009038:	69f8      	ldr	r0, [r7, #28]
1000903a:	f7ff fe00 	bl	10008c3e <rpmsg_virtio_get_rx_buffer>
1000903e:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!rp_hdr) {
10009040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009042:	2b00      	cmp	r3, #0
10009044:	d104      	bne.n	10009050 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
10009046:	69fb      	ldr	r3, [r7, #28]
10009048:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1000904a:	4618      	mov	r0, r3
1000904c:	f000 fbc8 	bl	100097e0 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
10009050:	69bb      	ldr	r3, [r7, #24]
10009052:	3358      	adds	r3, #88	@ 0x58
10009054:	4618      	mov	r0, r3
10009056:	f7ff fcef 	bl	10008a38 <metal_mutex_release>
	while (rp_hdr) {
1000905a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000905c:	2b00      	cmp	r3, #0
1000905e:	d199      	bne.n	10008f94 <rpmsg_virtio_rx_callback+0x40>
	}
}
10009060:	bf00      	nop
10009062:	bf00      	nop
10009064:	372c      	adds	r7, #44	@ 0x2c
10009066:	46bd      	mov	sp, r7
10009068:	bd90      	pop	{r4, r7, pc}
1000906a:	bf00      	nop
1000906c:	1000afdc 	.word	0x1000afdc
10009070:	1000b12c 	.word	0x1000b12c
10009074:	1000af48 	.word	0x1000af48

10009078 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
10009078:	b580      	push	{r7, lr}
1000907a:	b092      	sub	sp, #72	@ 0x48
1000907c:	af00      	add	r7, sp, #0
1000907e:	60f8      	str	r0, [r7, #12]
10009080:	60b9      	str	r1, [r7, #8]
10009082:	607a      	str	r2, [r7, #4]
10009084:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
10009086:	68fb      	ldr	r3, [r7, #12]
10009088:	6a1b      	ldr	r3, [r3, #32]
1000908a:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
1000908c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000908e:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
10009090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10009092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10009096:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
10009098:	68bb      	ldr	r3, [r7, #8]
1000909a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
1000909c:	687b      	ldr	r3, [r7, #4]
1000909e:	2b28      	cmp	r3, #40	@ 0x28
100090a0:	d001      	beq.n	100090a6 <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
100090a2:	2300      	movs	r3, #0
100090a4:	e057      	b.n	10009156 <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
100090a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
100090a8:	4619      	mov	r1, r3
100090aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
100090ac:	f7ff fc26 	bl	100088fc <metal_io_virt_to_offset>
100090b0:	4601      	mov	r1, r0
100090b2:	f107 0210 	add.w	r2, r7, #16
100090b6:	2320      	movs	r3, #32
100090b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
100090ba:	f7fe ff9e 	bl	10007ffa <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
100090be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100090c0:	6a1b      	ldr	r3, [r3, #32]
100090c2:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
100090c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100090c6:	3358      	adds	r3, #88	@ 0x58
100090c8:	4618      	mov	r0, r3
100090ca:	f7ff fcaa 	bl	10008a22 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
100090ce:	f107 0110 	add.w	r1, r7, #16
100090d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100090d4:	f04f 32ff 	mov.w	r2, #4294967295
100090d8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
100090da:	f7ff fb5e 	bl	1000879a <rpmsg_get_endpoint>
100090de:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
100090e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100090e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100090e4:	f003 0301 	and.w	r3, r3, #1
100090e8:	2b00      	cmp	r3, #0
100090ea:	d017      	beq.n	1000911c <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
100090ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100090ee:	2b00      	cmp	r3, #0
100090f0:	d003      	beq.n	100090fa <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
100090f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100090f4:	f04f 32ff 	mov.w	r2, #4294967295
100090f8:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
100090fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100090fc:	3358      	adds	r3, #88	@ 0x58
100090fe:	4618      	mov	r0, r3
10009100:	f7ff fc9a 	bl	10008a38 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
10009104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009106:	2b00      	cmp	r3, #0
10009108:	d024      	beq.n	10009154 <rpmsg_virtio_ns_callback+0xdc>
1000910a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000910c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000910e:	2b00      	cmp	r3, #0
10009110:	d020      	beq.n	10009154 <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
10009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10009116:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10009118:	4798      	blx	r3
1000911a:	e01b      	b.n	10009154 <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
1000911c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000911e:	2b00      	cmp	r3, #0
10009120:	d110      	bne.n	10009144 <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
10009122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10009124:	3358      	adds	r3, #88	@ 0x58
10009126:	4618      	mov	r0, r3
10009128:	f7ff fc86 	bl	10008a38 <metal_mutex_release>
			if (rdev->ns_bind_cb)
1000912c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000912e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10009130:	2b00      	cmp	r3, #0
10009132:	d00f      	beq.n	10009154 <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
10009134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10009136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10009138:	f107 0110 	add.w	r1, r7, #16
1000913c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000913e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10009140:	4798      	blx	r3
10009142:	e007      	b.n	10009154 <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
10009144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009146:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10009148:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
1000914a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000914c:	3358      	adds	r3, #88	@ 0x58
1000914e:	4618      	mov	r0, r3
10009150:	f7ff fc72 	bl	10008a38 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
10009154:	2300      	movs	r3, #0
}
10009156:	4618      	mov	r0, r3
10009158:	3748      	adds	r7, #72	@ 0x48
1000915a:	46bd      	mov	sp, r7
1000915c:	bd80      	pop	{r7, pc}
	...

10009160 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
10009160:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
10009164:	b090      	sub	sp, #64	@ 0x40
10009166:	af02      	add	r7, sp, #8
10009168:	60f8      	str	r0, [r7, #12]
1000916a:	60b9      	str	r1, [r7, #8]
1000916c:	607a      	str	r2, [r7, #4]
1000916e:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
10009170:	68fb      	ldr	r3, [r7, #12]
10009172:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
10009174:	2278      	movs	r2, #120	@ 0x78
10009176:	2100      	movs	r1, #0
10009178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1000917a:	f000 fed6 	bl	10009f2a <memset>
	metal_mutex_init(&rdev->lock);
1000917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009180:	3358      	adds	r3, #88	@ 0x58
10009182:	4618      	mov	r0, r3
10009184:	f7ff fc42 	bl	10008a0c <metal_mutex_init>
	rvdev->vdev = vdev;
10009188:	68fb      	ldr	r3, [r7, #12]
1000918a:	68ba      	ldr	r2, [r7, #8]
1000918c:	679a      	str	r2, [r3, #120]	@ 0x78
	rdev->ns_bind_cb = ns_bind_cb;
1000918e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009190:	687a      	ldr	r2, [r7, #4]
10009192:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
10009194:	68bb      	ldr	r3, [r7, #8]
10009196:	68fa      	ldr	r2, [r7, #12]
10009198:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
1000919a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000919c:	4a4d      	ldr	r2, [pc, #308]	@ (100092d4 <rpmsg_init_vdev+0x174>)
1000919e:	661a      	str	r2, [r3, #96]	@ 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
100091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100091a2:	4a4d      	ldr	r2, [pc, #308]	@ (100092d8 <rpmsg_init_vdev+0x178>)
100091a4:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
100091a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100091a8:	4a4c      	ldr	r2, [pc, #304]	@ (100092dc <rpmsg_init_vdev+0x17c>)
100091aa:	669a      	str	r2, [r3, #104]	@ 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
100091ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100091ae:	4a4c      	ldr	r2, [pc, #304]	@ (100092e0 <rpmsg_init_vdev+0x180>)
100091b0:	66da      	str	r2, [r3, #108]	@ 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
100091b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100091b4:	4a4b      	ldr	r2, [pc, #300]	@ (100092e4 <rpmsg_init_vdev+0x184>)
100091b6:	671a      	str	r2, [r3, #112]	@ 0x70
	role = rpmsg_virtio_get_role(rvdev);
100091b8:	68f8      	ldr	r0, [r7, #12]
100091ba:	f7ff fc48 	bl	10008a4e <rpmsg_virtio_get_role>
100091be:	62f8      	str	r0, [r7, #44]	@ 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100091c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100091c2:	2b01      	cmp	r3, #1
100091c4:	d102      	bne.n	100091cc <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
100091c6:	68f8      	ldr	r0, [r7, #12]
100091c8:	f7ff fd55 	bl	10008c76 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
100091cc:	68f8      	ldr	r0, [r7, #12]
100091ce:	f7ff fc6f 	bl	10008ab0 <rpmsg_virtio_get_features>
100091d2:	4603      	mov	r3, r0
100091d4:	2200      	movs	r2, #0
100091d6:	4698      	mov	r8, r3
100091d8:	4691      	mov	r9, r2
100091da:	68bb      	ldr	r3, [r7, #8]
100091dc:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
100091e0:	68bb      	ldr	r3, [r7, #8]
100091e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
100091e6:	f002 0401 	and.w	r4, r2, #1
100091ea:	2500      	movs	r5, #0
100091ec:	ea44 0305 	orr.w	r3, r4, r5
100091f0:	2b00      	cmp	r3, #0
100091f2:	bf14      	ite	ne
100091f4:	2301      	movne	r3, #1
100091f6:	2300      	moveq	r3, #0
100091f8:	b2da      	uxtb	r2, r3
100091fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100091fc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
10009200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10009202:	2b01      	cmp	r3, #1
10009204:	d113      	bne.n	1000922e <rpmsg_init_vdev+0xce>
		vq_names[0] = "tx_vq";
10009206:	4b38      	ldr	r3, [pc, #224]	@ (100092e8 <rpmsg_init_vdev+0x188>)
10009208:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
1000920a:	4b38      	ldr	r3, [pc, #224]	@ (100092ec <rpmsg_init_vdev+0x18c>)
1000920c:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
1000920e:	4b38      	ldr	r3, [pc, #224]	@ (100092f0 <rpmsg_init_vdev+0x190>)
10009210:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
10009212:	4b38      	ldr	r3, [pc, #224]	@ (100092f4 <rpmsg_init_vdev+0x194>)
10009214:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
10009216:	68bb      	ldr	r3, [r7, #8]
10009218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000921a:	3318      	adds	r3, #24
1000921c:	681a      	ldr	r2, [r3, #0]
1000921e:	68fb      	ldr	r3, [r7, #12]
10009220:	67da      	str	r2, [r3, #124]	@ 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
10009222:	68bb      	ldr	r3, [r7, #8]
10009224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10009226:	681a      	ldr	r2, [r3, #0]
10009228:	68fb      	ldr	r3, [r7, #12]
1000922a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
1000922e:	68fb      	ldr	r3, [r7, #12]
10009230:	683a      	ldr	r2, [r7, #0]
10009232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
10009236:	f107 021c 	add.w	r2, r7, #28
1000923a:	f107 0314 	add.w	r3, r7, #20
1000923e:	9300      	str	r3, [sp, #0]
10009240:	4613      	mov	r3, r2
10009242:	2202      	movs	r2, #2
10009244:	2100      	movs	r1, #0
10009246:	68f8      	ldr	r0, [r7, #12]
10009248:	f7ff fc43 	bl	10008ad2 <rpmsg_virtio_create_virtqueues>
1000924c:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
1000924e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009250:	2b00      	cmp	r3, #0
10009252:	d001      	beq.n	10009258 <rpmsg_init_vdev+0xf8>
		return status;
10009254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009256:	e037      	b.n	100092c8 <rpmsg_init_vdev+0x168>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
10009258:	68fb      	ldr	r3, [r7, #12]
1000925a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000925e:	4618      	mov	r0, r3
10009260:	f000 fa86 	bl	10009770 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
10009264:	2300      	movs	r3, #0
10009266:	637b      	str	r3, [r7, #52]	@ 0x34
10009268:	e00f      	b.n	1000928a <rpmsg_init_vdev+0x12a>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
1000926a:	68bb      	ldr	r3, [r7, #8]
1000926c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1000926e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10009270:	4613      	mov	r3, r2
10009272:	005b      	lsls	r3, r3, #1
10009274:	4413      	add	r3, r2
10009276:	00db      	lsls	r3, r3, #3
10009278:	440b      	add	r3, r1
1000927a:	681b      	ldr	r3, [r3, #0]
1000927c:	627b      	str	r3, [r7, #36]	@ 0x24
		vq->shm_io = shm_io;
1000927e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009280:	683a      	ldr	r2, [r7, #0]
10009282:	629a      	str	r2, [r3, #40]	@ 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
10009284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10009286:	3301      	adds	r3, #1
10009288:	637b      	str	r3, [r7, #52]	@ 0x34
1000928a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000928c:	2b01      	cmp	r3, #1
1000928e:	d9ec      	bls.n	1000926a <rpmsg_init_vdev+0x10a>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
10009290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009292:	4618      	mov	r0, r3
10009294:	f7ff fb22 	bl	100088dc <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
10009298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000929a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
1000929e:	2b00      	cmp	r3, #0
100092a0:	d011      	beq.n	100092c6 <rpmsg_init_vdev+0x166>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
100092a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100092a4:	f103 0008 	add.w	r0, r3, #8
100092a8:	2300      	movs	r3, #0
100092aa:	9301      	str	r3, [sp, #4]
100092ac:	4b12      	ldr	r3, [pc, #72]	@ (100092f8 <rpmsg_init_vdev+0x198>)
100092ae:	9300      	str	r3, [sp, #0]
100092b0:	2335      	movs	r3, #53	@ 0x35
100092b2:	2235      	movs	r2, #53	@ 0x35
100092b4:	4911      	ldr	r1, [pc, #68]	@ (100092fc <rpmsg_init_vdev+0x19c>)
100092b6:	f7ff fc21 	bl	10008afc <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
100092ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100092bc:	3308      	adds	r3, #8
100092be:	4619      	mov	r1, r3
100092c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
100092c2:	f7ff faca 	bl	1000885a <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
100092c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
100092c8:	4618      	mov	r0, r3
100092ca:	3738      	adds	r7, #56	@ 0x38
100092cc:	46bd      	mov	sp, r7
100092ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
100092d2:	bf00      	nop
100092d4:	10008ea9 	.word	0x10008ea9
100092d8:	10008cb1 	.word	0x10008cb1
100092dc:	10008cd9 	.word	0x10008cd9
100092e0:	10008d2b 	.word	0x10008d2b
100092e4:	10008dd1 	.word	0x10008dd1
100092e8:	1000afe8 	.word	0x1000afe8
100092ec:	1000aff0 	.word	0x1000aff0
100092f0:	10008f41 	.word	0x10008f41
100092f4:	10008f55 	.word	0x10008f55
100092f8:	10009079 	.word	0x10009079
100092fc:	1000aff8 	.word	0x1000aff8

10009300 <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
10009300:	b480      	push	{r7}
10009302:	b083      	sub	sp, #12
10009304:	af00      	add	r7, sp, #0
10009306:	6078      	str	r0, [r7, #4]
10009308:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000930a:	bf00      	nop
1000930c:	370c      	adds	r7, #12
1000930e:	46bd      	mov	sp, r7
10009310:	f85d 7b04 	ldr.w	r7, [sp], #4
10009314:	4770      	bx	lr

10009316 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
10009316:	b480      	push	{r7}
10009318:	b083      	sub	sp, #12
1000931a:	af00      	add	r7, sp, #0
1000931c:	6078      	str	r0, [r7, #4]
1000931e:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
10009320:	bf00      	nop
10009322:	370c      	adds	r7, #12
10009324:	46bd      	mov	sp, r7
10009326:	f85d 7b04 	ldr.w	r7, [sp], #4
1000932a:	4770      	bx	lr

1000932c <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
1000932c:	b480      	push	{r7}
1000932e:	b085      	sub	sp, #20
10009330:	af00      	add	r7, sp, #0
10009332:	60f8      	str	r0, [r7, #12]
10009334:	60b9      	str	r1, [r7, #8]
10009336:	607a      	str	r2, [r7, #4]
10009338:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
1000933a:	68fb      	ldr	r3, [r7, #12]
}
1000933c:	4618      	mov	r0, r3
1000933e:	3714      	adds	r7, #20
10009340:	46bd      	mov	sp, r7
10009342:	f85d 7b04 	ldr.w	r7, [sp], #4
10009346:	4770      	bx	lr

10009348 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
10009348:	b590      	push	{r4, r7, lr}
1000934a:	b08f      	sub	sp, #60	@ 0x3c
1000934c:	af04      	add	r7, sp, #16
1000934e:	60f8      	str	r0, [r7, #12]
10009350:	60b9      	str	r1, [r7, #8]
10009352:	607a      	str	r2, [r7, #4]
10009354:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
10009356:	68fb      	ldr	r3, [r7, #12]
10009358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000935a:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
1000935c:	687a      	ldr	r2, [r7, #4]
1000935e:	6a3b      	ldr	r3, [r7, #32]
10009360:	429a      	cmp	r2, r3
10009362:	d901      	bls.n	10009368 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
10009364:	4b1e      	ldr	r3, [pc, #120]	@ (100093e0 <virtio_create_virtqueues+0x98>)
10009366:	e036      	b.n	100093d6 <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
10009368:	2300      	movs	r3, #0
1000936a:	627b      	str	r3, [r7, #36]	@ 0x24
1000936c:	e02e      	b.n	100093cc <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
1000936e:	68fb      	ldr	r3, [r7, #12]
10009370:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10009372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10009374:	4613      	mov	r3, r2
10009376:	005b      	lsls	r3, r3, #1
10009378:	4413      	add	r3, r2
1000937a:	00db      	lsls	r3, r3, #3
1000937c:	440b      	add	r3, r1
1000937e:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
10009380:	69fb      	ldr	r3, [r7, #28]
10009382:	3304      	adds	r3, #4
10009384:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10009386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009388:	b298      	uxth	r0, r3
1000938a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000938c:	009b      	lsls	r3, r3, #2
1000938e:	683a      	ldr	r2, [r7, #0]
10009390:	4413      	add	r3, r2
10009392:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
10009394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009396:	009b      	lsls	r3, r3, #2
10009398:	6bba      	ldr	r2, [r7, #56]	@ 0x38
1000939a:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000939c:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000939e:	68fa      	ldr	r2, [r7, #12]
100093a0:	6a12      	ldr	r2, [r2, #32]
100093a2:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
100093a4:	69f9      	ldr	r1, [r7, #28]
100093a6:	6809      	ldr	r1, [r1, #0]
100093a8:	9102      	str	r1, [sp, #8]
100093aa:	9201      	str	r2, [sp, #4]
100093ac:	9300      	str	r3, [sp, #0]
100093ae:	69bb      	ldr	r3, [r7, #24]
100093b0:	4622      	mov	r2, r4
100093b2:	4601      	mov	r1, r0
100093b4:	68f8      	ldr	r0, [r7, #12]
100093b6:	f000 f90e 	bl	100095d6 <virtqueue_create>
100093ba:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
100093bc:	697b      	ldr	r3, [r7, #20]
100093be:	2b00      	cmp	r3, #0
100093c0:	d001      	beq.n	100093c6 <virtio_create_virtqueues+0x7e>
			return ret;
100093c2:	697b      	ldr	r3, [r7, #20]
100093c4:	e007      	b.n	100093d6 <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
100093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100093c8:	3301      	adds	r3, #1
100093ca:	627b      	str	r3, [r7, #36]	@ 0x24
100093cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100093ce:	687b      	ldr	r3, [r7, #4]
100093d0:	429a      	cmp	r2, r3
100093d2:	d3cc      	bcc.n	1000936e <virtio_create_virtqueues+0x26>
	}
	return 0;
100093d4:	2300      	movs	r3, #0
}
100093d6:	4618      	mov	r0, r3
100093d8:	372c      	adds	r7, #44	@ 0x2c
100093da:	46bd      	mov	sp, r7
100093dc:	bd90      	pop	{r4, r7, pc}
100093de:	bf00      	nop
100093e0:	fffff440 	.word	0xfffff440

100093e4 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
100093e4:	b480      	push	{r7}
100093e6:	b085      	sub	sp, #20
100093e8:	af00      	add	r7, sp, #0
100093ea:	60f8      	str	r0, [r7, #12]
100093ec:	60b9      	str	r1, [r7, #8]
100093ee:	607a      	str	r2, [r7, #4]
100093f0:	603b      	str	r3, [r7, #0]
	vr->num = num;
100093f2:	68fb      	ldr	r3, [r7, #12]
100093f4:	68ba      	ldr	r2, [r7, #8]
100093f6:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
100093f8:	68fb      	ldr	r3, [r7, #12]
100093fa:	687a      	ldr	r2, [r7, #4]
100093fc:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
100093fe:	68bb      	ldr	r3, [r7, #8]
10009400:	011b      	lsls	r3, r3, #4
10009402:	687a      	ldr	r2, [r7, #4]
10009404:	441a      	add	r2, r3
10009406:	68fb      	ldr	r3, [r7, #12]
10009408:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
1000940a:	68fb      	ldr	r3, [r7, #12]
1000940c:	689a      	ldr	r2, [r3, #8]
1000940e:	68bb      	ldr	r3, [r7, #8]
10009410:	005b      	lsls	r3, r3, #1
10009412:	4413      	add	r3, r2
10009414:	3304      	adds	r3, #4
10009416:	461a      	mov	r2, r3
10009418:	683b      	ldr	r3, [r7, #0]
1000941a:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
1000941c:	1c5a      	adds	r2, r3, #1
1000941e:	683b      	ldr	r3, [r7, #0]
10009420:	425b      	negs	r3, r3
10009422:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
10009424:	461a      	mov	r2, r3
10009426:	68fb      	ldr	r3, [r7, #12]
10009428:	60da      	str	r2, [r3, #12]
}
1000942a:	bf00      	nop
1000942c:	3714      	adds	r7, #20
1000942e:	46bd      	mov	sp, r7
10009430:	f85d 7b04 	ldr.w	r7, [sp], #4
10009434:	4770      	bx	lr

10009436 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
10009436:	b480      	push	{r7}
10009438:	b083      	sub	sp, #12
1000943a:	af00      	add	r7, sp, #0
1000943c:	4603      	mov	r3, r0
1000943e:	80fb      	strh	r3, [r7, #6]
10009440:	460b      	mov	r3, r1
10009442:	80bb      	strh	r3, [r7, #4]
10009444:	4613      	mov	r3, r2
10009446:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
10009448:	88ba      	ldrh	r2, [r7, #4]
1000944a:	88fb      	ldrh	r3, [r7, #6]
1000944c:	1ad3      	subs	r3, r2, r3
1000944e:	b29b      	uxth	r3, r3
10009450:	3b01      	subs	r3, #1
10009452:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
10009454:	88b9      	ldrh	r1, [r7, #4]
10009456:	887b      	ldrh	r3, [r7, #2]
10009458:	1acb      	subs	r3, r1, r3
1000945a:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
1000945c:	429a      	cmp	r2, r3
1000945e:	bf34      	ite	cc
10009460:	2301      	movcc	r3, #1
10009462:	2300      	movcs	r3, #0
10009464:	b2db      	uxtb	r3, r3
}
10009466:	4618      	mov	r0, r3
10009468:	370c      	adds	r7, #12
1000946a:	46bd      	mov	sp, r7
1000946c:	f85d 7b04 	ldr.w	r7, [sp], #4
10009470:	4770      	bx	lr

10009472 <metal_io_virt>:
{
10009472:	b480      	push	{r7}
10009474:	b083      	sub	sp, #12
10009476:	af00      	add	r7, sp, #0
10009478:	6078      	str	r0, [r7, #4]
1000947a:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000947c:	687b      	ldr	r3, [r7, #4]
1000947e:	681b      	ldr	r3, [r3, #0]
		: NULL);
10009480:	f1b3 3fff 	cmp.w	r3, #4294967295
10009484:	d00a      	beq.n	1000949c <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10009486:	687b      	ldr	r3, [r7, #4]
10009488:	689b      	ldr	r3, [r3, #8]
1000948a:	683a      	ldr	r2, [r7, #0]
1000948c:	429a      	cmp	r2, r3
1000948e:	d205      	bcs.n	1000949c <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10009490:	687b      	ldr	r3, [r7, #4]
10009492:	681b      	ldr	r3, [r3, #0]
10009494:	461a      	mov	r2, r3
10009496:	683b      	ldr	r3, [r7, #0]
10009498:	4413      	add	r3, r2
		: NULL);
1000949a:	e000      	b.n	1000949e <metal_io_virt+0x2c>
1000949c:	2300      	movs	r3, #0
}
1000949e:	4618      	mov	r0, r3
100094a0:	370c      	adds	r7, #12
100094a2:	46bd      	mov	sp, r7
100094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
100094a8:	4770      	bx	lr

100094aa <metal_io_phys>:
{
100094aa:	b580      	push	{r7, lr}
100094ac:	b084      	sub	sp, #16
100094ae:	af00      	add	r7, sp, #0
100094b0:	6078      	str	r0, [r7, #4]
100094b2:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
100094b4:	687b      	ldr	r3, [r7, #4]
100094b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100094b8:	2b00      	cmp	r3, #0
100094ba:	d123      	bne.n	10009504 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
100094bc:	687b      	ldr	r3, [r7, #4]
100094be:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
100094c0:	2b1f      	cmp	r3, #31
100094c2:	d805      	bhi.n	100094d0 <metal_io_phys+0x26>
100094c4:	687b      	ldr	r3, [r7, #4]
100094c6:	68db      	ldr	r3, [r3, #12]
100094c8:	683a      	ldr	r2, [r7, #0]
100094ca:	fa22 f303 	lsr.w	r3, r2, r3
100094ce:	e000      	b.n	100094d2 <metal_io_phys+0x28>
100094d0:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
100094d2:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
100094d4:	687b      	ldr	r3, [r7, #4]
100094d6:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
100094d8:	2b00      	cmp	r3, #0
100094da:	d010      	beq.n	100094fe <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
100094dc:	687b      	ldr	r3, [r7, #4]
100094de:	689b      	ldr	r3, [r3, #8]
100094e0:	683a      	ldr	r2, [r7, #0]
100094e2:	429a      	cmp	r2, r3
100094e4:	d20b      	bcs.n	100094fe <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
100094e6:	687b      	ldr	r3, [r7, #4]
100094e8:	685a      	ldr	r2, [r3, #4]
100094ea:	68fb      	ldr	r3, [r7, #12]
100094ec:	009b      	lsls	r3, r3, #2
100094ee:	4413      	add	r3, r2
100094f0:	681a      	ldr	r2, [r3, #0]
100094f2:	687b      	ldr	r3, [r7, #4]
100094f4:	6919      	ldr	r1, [r3, #16]
100094f6:	683b      	ldr	r3, [r7, #0]
100094f8:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
100094fa:	4413      	add	r3, r2
100094fc:	e008      	b.n	10009510 <metal_io_phys+0x66>
100094fe:	f04f 33ff 	mov.w	r3, #4294967295
10009502:	e005      	b.n	10009510 <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
10009504:	687b      	ldr	r3, [r7, #4]
10009506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10009508:	6839      	ldr	r1, [r7, #0]
1000950a:	6878      	ldr	r0, [r7, #4]
1000950c:	4798      	blx	r3
1000950e:	4603      	mov	r3, r0
}
10009510:	4618      	mov	r0, r3
10009512:	3710      	adds	r7, #16
10009514:	46bd      	mov	sp, r7
10009516:	bd80      	pop	{r7, pc}

10009518 <metal_io_phys_to_offset>:
{
10009518:	b580      	push	{r7, lr}
1000951a:	b084      	sub	sp, #16
1000951c:	af00      	add	r7, sp, #0
1000951e:	6078      	str	r0, [r7, #4]
10009520:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
10009522:	687b      	ldr	r3, [r7, #4]
10009524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10009526:	2b00      	cmp	r3, #0
10009528:	d127      	bne.n	1000957a <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
1000952a:	687b      	ldr	r3, [r7, #4]
1000952c:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
1000952e:	f1b3 3fff 	cmp.w	r3, #4294967295
10009532:	d105      	bne.n	10009540 <metal_io_phys_to_offset+0x28>
10009534:	687b      	ldr	r3, [r7, #4]
10009536:	685b      	ldr	r3, [r3, #4]
10009538:	681b      	ldr	r3, [r3, #0]
1000953a:	683a      	ldr	r2, [r7, #0]
1000953c:	1ad3      	subs	r3, r2, r3
1000953e:	e003      	b.n	10009548 <metal_io_phys_to_offset+0x30>
10009540:	687b      	ldr	r3, [r7, #4]
10009542:	691a      	ldr	r2, [r3, #16]
10009544:	683b      	ldr	r3, [r7, #0]
10009546:	4013      	ands	r3, r2
		unsigned long offset =
10009548:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
1000954a:	68f9      	ldr	r1, [r7, #12]
1000954c:	6878      	ldr	r0, [r7, #4]
1000954e:	f7ff ffac 	bl	100094aa <metal_io_phys>
10009552:	4602      	mov	r2, r0
10009554:	683b      	ldr	r3, [r7, #0]
10009556:	4293      	cmp	r3, r2
10009558:	d101      	bne.n	1000955e <metal_io_phys_to_offset+0x46>
				return offset;
1000955a:	68fb      	ldr	r3, [r7, #12]
1000955c:	e013      	b.n	10009586 <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
1000955e:	687b      	ldr	r3, [r7, #4]
10009560:	691a      	ldr	r2, [r3, #16]
10009562:	68fb      	ldr	r3, [r7, #12]
10009564:	4413      	add	r3, r2
10009566:	3301      	adds	r3, #1
10009568:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
1000956a:	687b      	ldr	r3, [r7, #4]
1000956c:	689b      	ldr	r3, [r3, #8]
1000956e:	68fa      	ldr	r2, [r7, #12]
10009570:	429a      	cmp	r2, r3
10009572:	d3ea      	bcc.n	1000954a <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
10009574:	f04f 33ff 	mov.w	r3, #4294967295
10009578:	e005      	b.n	10009586 <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
1000957a:	687b      	ldr	r3, [r7, #4]
1000957c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000957e:	6839      	ldr	r1, [r7, #0]
10009580:	6878      	ldr	r0, [r7, #4]
10009582:	4798      	blx	r3
10009584:	4603      	mov	r3, r0
}
10009586:	4618      	mov	r0, r3
10009588:	3710      	adds	r7, #16
1000958a:	46bd      	mov	sp, r7
1000958c:	bd80      	pop	{r7, pc}

1000958e <metal_io_phys_to_virt>:
{
1000958e:	b580      	push	{r7, lr}
10009590:	b082      	sub	sp, #8
10009592:	af00      	add	r7, sp, #0
10009594:	6078      	str	r0, [r7, #4]
10009596:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
10009598:	6839      	ldr	r1, [r7, #0]
1000959a:	6878      	ldr	r0, [r7, #4]
1000959c:	f7ff ffbc 	bl	10009518 <metal_io_phys_to_offset>
100095a0:	4603      	mov	r3, r0
100095a2:	4619      	mov	r1, r3
100095a4:	6878      	ldr	r0, [r7, #4]
100095a6:	f7ff ff64 	bl	10009472 <metal_io_virt>
100095aa:	4603      	mov	r3, r0
}
100095ac:	4618      	mov	r0, r3
100095ae:	3708      	adds	r7, #8
100095b0:	46bd      	mov	sp, r7
100095b2:	bd80      	pop	{r7, pc}

100095b4 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
100095b4:	b580      	push	{r7, lr}
100095b6:	b084      	sub	sp, #16
100095b8:	af00      	add	r7, sp, #0
100095ba:	6078      	str	r0, [r7, #4]
100095bc:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
100095be:	687b      	ldr	r3, [r7, #4]
100095c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100095c2:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
100095c4:	6839      	ldr	r1, [r7, #0]
100095c6:	68f8      	ldr	r0, [r7, #12]
100095c8:	f7ff ffe1 	bl	1000958e <metal_io_phys_to_virt>
100095cc:	4603      	mov	r3, r0
}
100095ce:	4618      	mov	r0, r3
100095d0:	3710      	adds	r7, #16
100095d2:	46bd      	mov	sp, r7
100095d4:	bd80      	pop	{r7, pc}

100095d6 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
100095d6:	b580      	push	{r7, lr}
100095d8:	b086      	sub	sp, #24
100095da:	af00      	add	r7, sp, #0
100095dc:	60f8      	str	r0, [r7, #12]
100095de:	607a      	str	r2, [r7, #4]
100095e0:	603b      	str	r3, [r7, #0]
100095e2:	460b      	mov	r3, r1
100095e4:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
100095e6:	2300      	movs	r3, #0
100095e8:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
100095ea:	697b      	ldr	r3, [r7, #20]
100095ec:	2b00      	cmp	r3, #0
100095ee:	d11e      	bne.n	1000962e <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
100095f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100095f2:	68fa      	ldr	r2, [r7, #12]
100095f4:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
100095f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100095f8:	687a      	ldr	r2, [r7, #4]
100095fa:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
100095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100095fe:	897a      	ldrh	r2, [r7, #10]
10009600:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
10009602:	683b      	ldr	r3, [r7, #0]
10009604:	891a      	ldrh	r2, [r3, #8]
10009606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009608:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
1000960a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000960c:	895a      	ldrh	r2, [r3, #10]
1000960e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009610:	849a      	strh	r2, [r3, #36]	@ 0x24
		vq->callback = callback;
10009612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009614:	6a3a      	ldr	r2, [r7, #32]
10009616:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
10009618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000961a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1000961c:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
1000961e:	683b      	ldr	r3, [r7, #0]
10009620:	6819      	ldr	r1, [r3, #0]
10009622:	683b      	ldr	r3, [r7, #0]
10009624:	685b      	ldr	r3, [r3, #4]
10009626:	461a      	mov	r2, r3
10009628:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
1000962a:	f000 f8ef 	bl	1000980c <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
1000962e:	697b      	ldr	r3, [r7, #20]
}
10009630:	4618      	mov	r0, r3
10009632:	3718      	adds	r7, #24
10009634:	46bd      	mov	sp, r7
10009636:	bd80      	pop	{r7, pc}

10009638 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
10009638:	b480      	push	{r7}
1000963a:	b083      	sub	sp, #12
1000963c:	af00      	add	r7, sp, #0
1000963e:	6078      	str	r0, [r7, #4]
10009640:	460b      	mov	r3, r1
10009642:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
10009644:	687b      	ldr	r3, [r7, #4]
10009646:	699a      	ldr	r2, [r3, #24]
10009648:	887b      	ldrh	r3, [r7, #2]
1000964a:	011b      	lsls	r3, r3, #4
1000964c:	4413      	add	r3, r2
1000964e:	689b      	ldr	r3, [r3, #8]
}
10009650:	4618      	mov	r0, r3
10009652:	370c      	adds	r7, #12
10009654:	46bd      	mov	sp, r7
10009656:	f85d 7b04 	ldr.w	r7, [sp], #4
1000965a:	4770      	bx	lr

1000965c <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
1000965c:	b580      	push	{r7, lr}
1000965e:	b086      	sub	sp, #24
10009660:	af00      	add	r7, sp, #0
10009662:	60f8      	str	r0, [r7, #12]
10009664:	60b9      	str	r1, [r7, #8]
10009666:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
10009668:	2300      	movs	r3, #0
1000966a:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
1000966c:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
10009670:	68fb      	ldr	r3, [r7, #12]
10009672:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
10009674:	68fb      	ldr	r3, [r7, #12]
10009676:	69db      	ldr	r3, [r3, #28]
10009678:	885b      	ldrh	r3, [r3, #2]
1000967a:	b29b      	uxth	r3, r3
1000967c:	429a      	cmp	r2, r3
1000967e:	d101      	bne.n	10009684 <virtqueue_get_available_buffer+0x28>
		return NULL;
10009680:	2300      	movs	r3, #0
10009682:	e02f      	b.n	100096e4 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
10009684:	68fb      	ldr	r3, [r7, #12]
10009686:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
10009688:	1c5a      	adds	r2, r3, #1
1000968a:	b291      	uxth	r1, r2
1000968c:	68fa      	ldr	r2, [r7, #12]
1000968e:	8611      	strh	r1, [r2, #48]	@ 0x30
10009690:	b21a      	sxth	r2, r3
10009692:	68fb      	ldr	r3, [r7, #12]
10009694:	895b      	ldrh	r3, [r3, #10]
10009696:	3b01      	subs	r3, #1
10009698:	b29b      	uxth	r3, r3
1000969a:	b21b      	sxth	r3, r3
1000969c:	4013      	ands	r3, r2
1000969e:	b21b      	sxth	r3, r3
100096a0:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
100096a2:	68fb      	ldr	r3, [r7, #12]
100096a4:	69da      	ldr	r2, [r3, #28]
100096a6:	8afb      	ldrh	r3, [r7, #22]
100096a8:	005b      	lsls	r3, r3, #1
100096aa:	4413      	add	r3, r2
100096ac:	889b      	ldrh	r3, [r3, #4]
100096ae:	b29a      	uxth	r2, r3
100096b0:	68bb      	ldr	r3, [r7, #8]
100096b2:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
100096b4:	68fb      	ldr	r3, [r7, #12]
100096b6:	699a      	ldr	r2, [r3, #24]
100096b8:	68bb      	ldr	r3, [r7, #8]
100096ba:	881b      	ldrh	r3, [r3, #0]
100096bc:	011b      	lsls	r3, r3, #4
100096be:	18d1      	adds	r1, r2, r3
100096c0:	680a      	ldr	r2, [r1, #0]
100096c2:	684b      	ldr	r3, [r1, #4]
100096c4:	4613      	mov	r3, r2
100096c6:	4619      	mov	r1, r3
100096c8:	68f8      	ldr	r0, [r7, #12]
100096ca:	f7ff ff73 	bl	100095b4 <virtqueue_phys_to_virt>
100096ce:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
100096d0:	68fb      	ldr	r3, [r7, #12]
100096d2:	699a      	ldr	r2, [r3, #24]
100096d4:	68bb      	ldr	r3, [r7, #8]
100096d6:	881b      	ldrh	r3, [r3, #0]
100096d8:	011b      	lsls	r3, r3, #4
100096da:	4413      	add	r3, r2
100096dc:	689a      	ldr	r2, [r3, #8]
100096de:	687b      	ldr	r3, [r7, #4]
100096e0:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
100096e2:	693b      	ldr	r3, [r7, #16]
}
100096e4:	4618      	mov	r0, r3
100096e6:	3718      	adds	r7, #24
100096e8:	46bd      	mov	sp, r7
100096ea:	bd80      	pop	{r7, pc}

100096ec <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
100096ec:	b480      	push	{r7}
100096ee:	b087      	sub	sp, #28
100096f0:	af00      	add	r7, sp, #0
100096f2:	60f8      	str	r0, [r7, #12]
100096f4:	460b      	mov	r3, r1
100096f6:	607a      	str	r2, [r7, #4]
100096f8:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
100096fa:	2300      	movs	r3, #0
100096fc:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
100096fe:	68fb      	ldr	r3, [r7, #12]
10009700:	895b      	ldrh	r3, [r3, #10]
10009702:	897a      	ldrh	r2, [r7, #10]
10009704:	429a      	cmp	r2, r3
10009706:	d901      	bls.n	1000970c <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
10009708:	4b18      	ldr	r3, [pc, #96]	@ (1000976c <virtqueue_add_consumed_buffer+0x80>)
1000970a:	e029      	b.n	10009760 <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
1000970c:	68fb      	ldr	r3, [r7, #12]
1000970e:	6a1b      	ldr	r3, [r3, #32]
10009710:	885b      	ldrh	r3, [r3, #2]
10009712:	b29b      	uxth	r3, r3
10009714:	b21a      	sxth	r2, r3
10009716:	68fb      	ldr	r3, [r7, #12]
10009718:	895b      	ldrh	r3, [r3, #10]
1000971a:	3b01      	subs	r3, #1
1000971c:	b29b      	uxth	r3, r3
1000971e:	b21b      	sxth	r3, r3
10009720:	4013      	ands	r3, r2
10009722:	b21b      	sxth	r3, r3
10009724:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
10009726:	68fb      	ldr	r3, [r7, #12]
10009728:	6a1a      	ldr	r2, [r3, #32]
1000972a:	8a7b      	ldrh	r3, [r7, #18]
1000972c:	00db      	lsls	r3, r3, #3
1000972e:	4413      	add	r3, r2
10009730:	3304      	adds	r3, #4
10009732:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
10009734:	897a      	ldrh	r2, [r7, #10]
10009736:	697b      	ldr	r3, [r7, #20]
10009738:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
1000973a:	697b      	ldr	r3, [r7, #20]
1000973c:	687a      	ldr	r2, [r7, #4]
1000973e:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
10009740:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
10009744:	68fb      	ldr	r3, [r7, #12]
10009746:	6a1b      	ldr	r3, [r3, #32]
10009748:	885a      	ldrh	r2, [r3, #2]
1000974a:	b292      	uxth	r2, r2
1000974c:	3201      	adds	r2, #1
1000974e:	b292      	uxth	r2, r2
10009750:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
10009752:	68fb      	ldr	r3, [r7, #12]
10009754:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
10009756:	3301      	adds	r3, #1
10009758:	b29a      	uxth	r2, r3
1000975a:	68fb      	ldr	r3, [r7, #12]
1000975c:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
1000975e:	2300      	movs	r3, #0
}
10009760:	4618      	mov	r0, r3
10009762:	371c      	adds	r7, #28
10009764:	46bd      	mov	sp, r7
10009766:	f85d 7b04 	ldr.w	r7, [sp], #4
1000976a:	4770      	bx	lr
1000976c:	fffff441 	.word	0xfffff441

10009770 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
10009770:	b480      	push	{r7}
10009772:	b083      	sub	sp, #12
10009774:	af00      	add	r7, sp, #0
10009776:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10009778:	6879      	ldr	r1, [r7, #4]
1000977a:	6809      	ldr	r1, [r1, #0]
1000977c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10009780:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
10009784:	2300      	movs	r3, #0
10009786:	4313      	orrs	r3, r2
10009788:	d015      	beq.n	100097b6 <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000978a:	687b      	ldr	r3, [r7, #4]
1000978c:	681b      	ldr	r3, [r3, #0]
1000978e:	699b      	ldr	r3, [r3, #24]
10009790:	2b01      	cmp	r3, #1
10009792:	d11f      	bne.n	100097d4 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
10009794:	687b      	ldr	r3, [r7, #4]
10009796:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
10009798:	687b      	ldr	r3, [r7, #4]
1000979a:	895b      	ldrh	r3, [r3, #10]
1000979c:	1ad3      	subs	r3, r2, r3
1000979e:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
100097a0:	687b      	ldr	r3, [r7, #4]
100097a2:	6a1a      	ldr	r2, [r3, #32]
100097a4:	687b      	ldr	r3, [r7, #4]
100097a6:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
100097a8:	3901      	subs	r1, #1
100097aa:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
100097ac:	00db      	lsls	r3, r3, #3
100097ae:	4413      	add	r3, r2
100097b0:	460a      	mov	r2, r1
100097b2:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
100097b4:	e00e      	b.n	100097d4 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
100097b6:	687b      	ldr	r3, [r7, #4]
100097b8:	681b      	ldr	r3, [r3, #0]
100097ba:	699b      	ldr	r3, [r3, #24]
100097bc:	2b01      	cmp	r3, #1
100097be:	d109      	bne.n	100097d4 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
100097c0:	687b      	ldr	r3, [r7, #4]
100097c2:	6a1b      	ldr	r3, [r3, #32]
100097c4:	881b      	ldrh	r3, [r3, #0]
100097c6:	b29a      	uxth	r2, r3
100097c8:	687b      	ldr	r3, [r7, #4]
100097ca:	6a1b      	ldr	r3, [r3, #32]
100097cc:	f042 0201 	orr.w	r2, r2, #1
100097d0:	b292      	uxth	r2, r2
100097d2:	801a      	strh	r2, [r3, #0]
}
100097d4:	bf00      	nop
100097d6:	370c      	adds	r7, #12
100097d8:	46bd      	mov	sp, r7
100097da:	f85d 7b04 	ldr.w	r7, [sp], #4
100097de:	4770      	bx	lr

100097e0 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
100097e0:	b580      	push	{r7, lr}
100097e2:	b082      	sub	sp, #8
100097e4:	af00      	add	r7, sp, #0
100097e6:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
100097e8:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
100097ec:	6878      	ldr	r0, [r7, #4]
100097ee:	f000 f823 	bl	10009838 <vq_ring_must_notify>
100097f2:	4603      	mov	r3, r0
100097f4:	2b00      	cmp	r3, #0
100097f6:	d002      	beq.n	100097fe <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
100097f8:	6878      	ldr	r0, [r7, #4]
100097fa:	f000 f86b 	bl	100098d4 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
100097fe:	687b      	ldr	r3, [r7, #4]
10009800:	2200      	movs	r2, #0
10009802:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);
}
10009804:	bf00      	nop
10009806:	3708      	adds	r7, #8
10009808:	46bd      	mov	sp, r7
1000980a:	bd80      	pop	{r7, pc}

1000980c <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
1000980c:	b580      	push	{r7, lr}
1000980e:	b086      	sub	sp, #24
10009810:	af00      	add	r7, sp, #0
10009812:	60f8      	str	r0, [r7, #12]
10009814:	60b9      	str	r1, [r7, #8]
10009816:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
10009818:	68fb      	ldr	r3, [r7, #12]
1000981a:	895b      	ldrh	r3, [r3, #10]
1000981c:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
1000981e:	68fb      	ldr	r3, [r7, #12]
10009820:	3314      	adds	r3, #20
10009822:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
10009824:	6979      	ldr	r1, [r7, #20]
10009826:	687b      	ldr	r3, [r7, #4]
10009828:	68ba      	ldr	r2, [r7, #8]
1000982a:	6938      	ldr	r0, [r7, #16]
1000982c:	f7ff fdda 	bl	100093e4 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
10009830:	bf00      	nop
10009832:	3718      	adds	r7, #24
10009834:	46bd      	mov	sp, r7
10009836:	bd80      	pop	{r7, pc}

10009838 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
10009838:	b580      	push	{r7, lr}
1000983a:	b084      	sub	sp, #16
1000983c:	af00      	add	r7, sp, #0
1000983e:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10009840:	6879      	ldr	r1, [r7, #4]
10009842:	6809      	ldr	r1, [r1, #0]
10009844:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10009848:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
1000984c:	2300      	movs	r3, #0
1000984e:	4313      	orrs	r3, r2
10009850:	d02a      	beq.n	100098a8 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10009852:	687b      	ldr	r3, [r7, #4]
10009854:	681b      	ldr	r3, [r3, #0]
10009856:	699b      	ldr	r3, [r3, #24]
10009858:	2b01      	cmp	r3, #1
1000985a:	d136      	bne.n	100098ca <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
1000985c:	687b      	ldr	r3, [r7, #4]
1000985e:	6a1b      	ldr	r3, [r3, #32]
10009860:	789a      	ldrb	r2, [r3, #2]
10009862:	78db      	ldrb	r3, [r3, #3]
10009864:	021b      	lsls	r3, r3, #8
10009866:	4313      	orrs	r3, r2
10009868:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
1000986a:	687b      	ldr	r3, [r7, #4]
1000986c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
1000986e:	89fa      	ldrh	r2, [r7, #14]
10009870:	1ad3      	subs	r3, r2, r3
10009872:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
10009874:	687b      	ldr	r3, [r7, #4]
10009876:	69da      	ldr	r2, [r3, #28]
10009878:	687b      	ldr	r3, [r7, #4]
1000987a:	6959      	ldr	r1, [r3, #20]
1000987c:	004b      	lsls	r3, r1, #1
1000987e:	4413      	add	r3, r2
10009880:	7918      	ldrb	r0, [r3, #4]
10009882:	004b      	lsls	r3, r1, #1
10009884:	4413      	add	r3, r2
10009886:	795b      	ldrb	r3, [r3, #5]
10009888:	021b      	lsls	r3, r3, #8
1000988a:	4303      	orrs	r3, r0
1000988c:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
1000988e:	89ba      	ldrh	r2, [r7, #12]
10009890:	89f9      	ldrh	r1, [r7, #14]
10009892:	897b      	ldrh	r3, [r7, #10]
10009894:	4618      	mov	r0, r3
10009896:	f7ff fdce 	bl	10009436 <vring_need_event>
1000989a:	4603      	mov	r3, r0
						prev_idx) != 0;
1000989c:	2b00      	cmp	r3, #0
1000989e:	bf14      	ite	ne
100098a0:	2301      	movne	r3, #1
100098a2:	2300      	moveq	r3, #0
100098a4:	b2db      	uxtb	r3, r3
100098a6:	e011      	b.n	100098cc <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
100098a8:	687b      	ldr	r3, [r7, #4]
100098aa:	681b      	ldr	r3, [r3, #0]
100098ac:	699b      	ldr	r3, [r3, #24]
100098ae:	2b01      	cmp	r3, #1
100098b0:	d10b      	bne.n	100098ca <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
100098b2:	687b      	ldr	r3, [r7, #4]
100098b4:	69db      	ldr	r3, [r3, #28]
100098b6:	881b      	ldrh	r3, [r3, #0]
100098b8:	b29b      	uxth	r3, r3
100098ba:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
100098be:	2b00      	cmp	r3, #0
100098c0:	bf0c      	ite	eq
100098c2:	2301      	moveq	r3, #1
100098c4:	2300      	movne	r3, #0
100098c6:	b2db      	uxtb	r3, r3
100098c8:	e000      	b.n	100098cc <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
100098ca:	2300      	movs	r3, #0
}
100098cc:	4618      	mov	r0, r3
100098ce:	3710      	adds	r7, #16
100098d0:	46bd      	mov	sp, r7
100098d2:	bd80      	pop	{r7, pc}

100098d4 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
100098d4:	b580      	push	{r7, lr}
100098d6:	b082      	sub	sp, #8
100098d8:	af00      	add	r7, sp, #0
100098da:	6078      	str	r0, [r7, #4]
	if (vq->notify)
100098dc:	687b      	ldr	r3, [r7, #4]
100098de:	691b      	ldr	r3, [r3, #16]
100098e0:	2b00      	cmp	r3, #0
100098e2:	d003      	beq.n	100098ec <vq_ring_notify+0x18>
		vq->notify(vq);
100098e4:	687b      	ldr	r3, [r7, #4]
100098e6:	691b      	ldr	r3, [r3, #16]
100098e8:	6878      	ldr	r0, [r7, #4]
100098ea:	4798      	blx	r3
}
100098ec:	bf00      	nop
100098ee:	3708      	adds	r7, #8
100098f0:	46bd      	mov	sp, r7
100098f2:	bd80      	pop	{r7, pc}

100098f4 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
100098f4:	b580      	push	{r7, lr}
100098f6:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
100098f8:	4b0d      	ldr	r3, [pc, #52]	@ (10009930 <MAILBOX_Init+0x3c>)
100098fa:	2201      	movs	r2, #1
100098fc:	2100      	movs	r1, #0
100098fe:	480d      	ldr	r0, [pc, #52]	@ (10009934 <MAILBOX_Init+0x40>)
10009900:	f7f7 f972 	bl	10000be8 <HAL_IPCC_ActivateNotification>
10009904:	4603      	mov	r3, r0
10009906:	2b00      	cmp	r3, #0
10009908:	d002      	beq.n	10009910 <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
1000990a:	f04f 33ff 	mov.w	r3, #4294967295
1000990e:	e00c      	b.n	1000992a <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
10009910:	4b09      	ldr	r3, [pc, #36]	@ (10009938 <MAILBOX_Init+0x44>)
10009912:	2201      	movs	r2, #1
10009914:	2101      	movs	r1, #1
10009916:	4807      	ldr	r0, [pc, #28]	@ (10009934 <MAILBOX_Init+0x40>)
10009918:	f7f7 f966 	bl	10000be8 <HAL_IPCC_ActivateNotification>
1000991c:	4603      	mov	r3, r0
1000991e:	2b00      	cmp	r3, #0
10009920:	d002      	beq.n	10009928 <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
10009922:	f04f 33ff 	mov.w	r3, #4294967295
10009926:	e000      	b.n	1000992a <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
10009928:	2300      	movs	r3, #0
}
1000992a:	4618      	mov	r0, r3
1000992c:	bd80      	pop	{r7, pc}
1000992e:	bf00      	nop
10009930:	100099a1 	.word	0x100099a1
10009934:	100201cc 	.word	0x100201cc
10009938:	100099cd 	.word	0x100099cd

1000993c <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
1000993c:	b580      	push	{r7, lr}
1000993e:	b084      	sub	sp, #16
10009940:	af00      	add	r7, sp, #0
10009942:	6078      	str	r0, [r7, #4]
10009944:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
10009946:	683b      	ldr	r3, [r7, #0]
10009948:	2b00      	cmp	r3, #0
1000994a:	d102      	bne.n	10009952 <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
1000994c:	2300      	movs	r3, #0
1000994e:	60fb      	str	r3, [r7, #12]
10009950:	e008      	b.n	10009964 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
10009952:	683b      	ldr	r3, [r7, #0]
10009954:	2b01      	cmp	r3, #1
10009956:	d102      	bne.n	1000995e <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
10009958:	2301      	movs	r3, #1
1000995a:	60fb      	str	r3, [r7, #12]
1000995c:	e002      	b.n	10009964 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
1000995e:	f04f 33ff 	mov.w	r3, #4294967295
10009962:	e016      	b.n	10009992 <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
10009964:	2200      	movs	r2, #0
10009966:	68f9      	ldr	r1, [r7, #12]
10009968:	480c      	ldr	r0, [pc, #48]	@ (1000999c <MAILBOX_Notify+0x60>)
1000996a:	f7f7 f98b 	bl	10000c84 <HAL_IPCC_GetChannelStatus>
1000996e:	4603      	mov	r3, r0
10009970:	2b01      	cmp	r3, #1
10009972:	d108      	bne.n	10009986 <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
10009974:	bf00      	nop
10009976:	2200      	movs	r2, #0
10009978:	68f9      	ldr	r1, [r7, #12]
1000997a:	4808      	ldr	r0, [pc, #32]	@ (1000999c <MAILBOX_Notify+0x60>)
1000997c:	f7f7 f982 	bl	10000c84 <HAL_IPCC_GetChannelStatus>
10009980:	4603      	mov	r3, r0
10009982:	2b01      	cmp	r3, #1
10009984:	d0f7      	beq.n	10009976 <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
10009986:	2200      	movs	r2, #0
10009988:	68f9      	ldr	r1, [r7, #12]
1000998a:	4804      	ldr	r0, [pc, #16]	@ (1000999c <MAILBOX_Notify+0x60>)
1000998c:	f7f7 f9ae 	bl	10000cec <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
10009990:	2300      	movs	r3, #0
}
10009992:	4618      	mov	r0, r3
10009994:	3710      	adds	r7, #16
10009996:	46bd      	mov	sp, r7
10009998:	bd80      	pop	{r7, pc}
1000999a:	bf00      	nop
1000999c:	100201cc 	.word	0x100201cc

100099a0 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100099a0:	b580      	push	{r7, lr}
100099a2:	b084      	sub	sp, #16
100099a4:	af00      	add	r7, sp, #0
100099a6:	60f8      	str	r0, [r7, #12]
100099a8:	60b9      	str	r1, [r7, #8]
100099aa:	4613      	mov	r3, r2
100099ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
100099ae:	4b06      	ldr	r3, [pc, #24]	@ (100099c8 <IPCC_channel1_callback+0x28>)
100099b0:	2202      	movs	r2, #2
100099b2:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
100099b4:	2201      	movs	r2, #1
100099b6:	68b9      	ldr	r1, [r7, #8]
100099b8:	68f8      	ldr	r0, [r7, #12]
100099ba:	f7f7 f997 	bl	10000cec <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
100099be:	bf00      	nop
100099c0:	3710      	adds	r7, #16
100099c2:	46bd      	mov	sp, r7
100099c4:	bd80      	pop	{r7, pc}
100099c6:	bf00      	nop
100099c8:	10021b80 	.word	0x10021b80

100099cc <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100099cc:	b580      	push	{r7, lr}
100099ce:	b084      	sub	sp, #16
100099d0:	af00      	add	r7, sp, #0
100099d2:	60f8      	str	r0, [r7, #12]
100099d4:	60b9      	str	r1, [r7, #8]
100099d6:	4613      	mov	r3, r2
100099d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
100099da:	4b06      	ldr	r3, [pc, #24]	@ (100099f4 <IPCC_channel2_callback+0x28>)
100099dc:	2201      	movs	r2, #1
100099de:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
100099e0:	2201      	movs	r2, #1
100099e2:	68b9      	ldr	r1, [r7, #8]
100099e4:	68f8      	ldr	r0, [r7, #12]
100099e6:	f7f7 f981 	bl	10000cec <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
100099ea:	bf00      	nop
100099ec:	3710      	adds	r7, #16
100099ee:	46bd      	mov	sp, r7
100099f0:	bd80      	pop	{r7, pc}
100099f2:	bf00      	nop
100099f4:	10021b84 	.word	0x10021b84

100099f8 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
100099f8:	b480      	push	{r7}
100099fa:	b083      	sub	sp, #12
100099fc:	af00      	add	r7, sp, #0
100099fe:	6078      	str	r0, [r7, #4]
10009a00:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
10009a02:	687b      	ldr	r3, [r7, #4]
10009a04:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
10009a06:	683a      	ldr	r2, [r7, #0]
10009a08:	429a      	cmp	r2, r3
10009a0a:	d209      	bcs.n	10009a20 <metal_device_io_region+0x28>
10009a0c:	683a      	ldr	r2, [r7, #0]
10009a0e:	4613      	mov	r3, r2
10009a10:	00db      	lsls	r3, r3, #3
10009a12:	1a9b      	subs	r3, r3, r2
10009a14:	00db      	lsls	r3, r3, #3
10009a16:	3308      	adds	r3, #8
10009a18:	687a      	ldr	r2, [r7, #4]
10009a1a:	4413      	add	r3, r2
10009a1c:	3304      	adds	r3, #4
10009a1e:	e000      	b.n	10009a22 <metal_device_io_region+0x2a>
10009a20:	2300      	movs	r3, #0
}
10009a22:	4618      	mov	r0, r3
10009a24:	370c      	adds	r7, #12
10009a26:	46bd      	mov	sp, r7
10009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
10009a2c:	4770      	bx	lr
	...

10009a30 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
10009a30:	b590      	push	{r4, r7, lr}
10009a32:	b08d      	sub	sp, #52	@ 0x34
10009a34:	af04      	add	r7, sp, #16
10009a36:	6078      	str	r0, [r7, #4]
  int status = 0;
10009a38:	2300      	movs	r3, #0
10009a3a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
10009a3c:	2300      	movs	r3, #0
10009a3e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
10009a40:	4a41      	ldr	r2, [pc, #260]	@ (10009b48 <OPENAMP_shmem_init+0x118>)
10009a42:	f107 0310 	add.w	r3, r7, #16
10009a46:	e892 0003 	ldmia.w	r2, {r0, r1}
10009a4a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
10009a4e:	2300      	movs	r3, #0
10009a50:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
10009a52:	2300      	movs	r3, #0
10009a54:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
10009a56:	f107 0310 	add.w	r3, r7, #16
10009a5a:	4618      	mov	r0, r3
10009a5c:	f7fe fa32 	bl	10007ec4 <metal_init>

  status = metal_register_generic_device(&shm_device);
10009a60:	483a      	ldr	r0, [pc, #232]	@ (10009b4c <OPENAMP_shmem_init+0x11c>)
10009a62:	f7fe f8d9 	bl	10007c18 <metal_register_generic_device>
10009a66:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10009a68:	69fb      	ldr	r3, [r7, #28]
10009a6a:	2b00      	cmp	r3, #0
10009a6c:	d001      	beq.n	10009a72 <OPENAMP_shmem_init+0x42>
    return status;
10009a6e:	69fb      	ldr	r3, [r7, #28]
10009a70:	e066      	b.n	10009b40 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
10009a72:	f107 0318 	add.w	r3, r7, #24
10009a76:	461a      	mov	r2, r3
10009a78:	4935      	ldr	r1, [pc, #212]	@ (10009b50 <OPENAMP_shmem_init+0x120>)
10009a7a:	4836      	ldr	r0, [pc, #216]	@ (10009b54 <OPENAMP_shmem_init+0x124>)
10009a7c:	f7fe f88e 	bl	10007b9c <metal_device_open>
10009a80:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10009a82:	69fb      	ldr	r3, [r7, #28]
10009a84:	2b00      	cmp	r3, #0
10009a86:	d001      	beq.n	10009a8c <OPENAMP_shmem_init+0x5c>
    return status;
10009a88:	69fb      	ldr	r3, [r7, #28]
10009a8a:	e059      	b.n	10009b40 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
10009a8c:	4a32      	ldr	r2, [pc, #200]	@ (10009b58 <OPENAMP_shmem_init+0x128>)
10009a8e:	4b33      	ldr	r3, [pc, #204]	@ (10009b5c <OPENAMP_shmem_init+0x12c>)
10009a90:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10009a92:	69bb      	ldr	r3, [r7, #24]
10009a94:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
10009a98:	4a31      	ldr	r2, [pc, #196]	@ (10009b60 <OPENAMP_shmem_init+0x130>)
10009a9a:	4b2f      	ldr	r3, [pc, #188]	@ (10009b58 <OPENAMP_shmem_init+0x128>)
10009a9c:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10009a9e:	461a      	mov	r2, r3
10009aa0:	2300      	movs	r3, #0
10009aa2:	9302      	str	r3, [sp, #8]
10009aa4:	2300      	movs	r3, #0
10009aa6:	9301      	str	r3, [sp, #4]
10009aa8:	f04f 33ff 	mov.w	r3, #4294967295
10009aac:	9300      	str	r3, [sp, #0]
10009aae:	4613      	mov	r3, r2
10009ab0:	4a2a      	ldr	r2, [pc, #168]	@ (10009b5c <OPENAMP_shmem_init+0x12c>)
10009ab2:	4929      	ldr	r1, [pc, #164]	@ (10009b58 <OPENAMP_shmem_init+0x128>)
10009ab4:	f7fe fa54 	bl	10007f60 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
10009ab8:	69bb      	ldr	r3, [r7, #24]
10009aba:	2100      	movs	r1, #0
10009abc:	4618      	mov	r0, r3
10009abe:	f7ff ff9b 	bl	100099f8 <metal_device_io_region>
10009ac2:	4603      	mov	r3, r0
10009ac4:	4a27      	ldr	r2, [pc, #156]	@ (10009b64 <OPENAMP_shmem_init+0x134>)
10009ac6:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
10009ac8:	4b26      	ldr	r3, [pc, #152]	@ (10009b64 <OPENAMP_shmem_init+0x134>)
10009aca:	681b      	ldr	r3, [r3, #0]
10009acc:	2b00      	cmp	r3, #0
10009ace:	d102      	bne.n	10009ad6 <OPENAMP_shmem_init+0xa6>
    return -1;
10009ad0:	f04f 33ff 	mov.w	r3, #4294967295
10009ad4:	e034      	b.n	10009b40 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
10009ad6:	f107 0208 	add.w	r2, r7, #8
10009ada:	f107 030c 	add.w	r3, r7, #12
10009ade:	4619      	mov	r1, r3
10009ae0:	6878      	ldr	r0, [r7, #4]
10009ae2:	f000 f8d9 	bl	10009c98 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
10009ae6:	68fb      	ldr	r3, [r7, #12]
10009ae8:	4a1f      	ldr	r2, [pc, #124]	@ (10009b68 <OPENAMP_shmem_init+0x138>)
10009aea:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
10009aec:	4b1e      	ldr	r3, [pc, #120]	@ (10009b68 <OPENAMP_shmem_init+0x138>)
10009aee:	681b      	ldr	r3, [r3, #0]
10009af0:	2b00      	cmp	r3, #0
10009af2:	d102      	bne.n	10009afa <OPENAMP_shmem_init+0xca>
  {
    return -1;
10009af4:	f04f 33ff 	mov.w	r3, #4294967295
10009af8:	e022      	b.n	10009b40 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
10009afa:	69bb      	ldr	r3, [r7, #24]
10009afc:	f103 0044 	add.w	r0, r3, #68	@ 0x44
10009b00:	4b19      	ldr	r3, [pc, #100]	@ (10009b68 <OPENAMP_shmem_init+0x138>)
10009b02:	6819      	ldr	r1, [r3, #0]
10009b04:	4b18      	ldr	r3, [pc, #96]	@ (10009b68 <OPENAMP_shmem_init+0x138>)
10009b06:	681a      	ldr	r2, [r3, #0]
10009b08:	68bb      	ldr	r3, [r7, #8]
10009b0a:	461c      	mov	r4, r3
10009b0c:	2300      	movs	r3, #0
10009b0e:	9302      	str	r3, [sp, #8]
10009b10:	2300      	movs	r3, #0
10009b12:	9301      	str	r3, [sp, #4]
10009b14:	f04f 33ff 	mov.w	r3, #4294967295
10009b18:	9300      	str	r3, [sp, #0]
10009b1a:	4623      	mov	r3, r4
10009b1c:	f7fe fa20 	bl	10007f60 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
10009b20:	69bb      	ldr	r3, [r7, #24]
10009b22:	2101      	movs	r1, #1
10009b24:	4618      	mov	r0, r3
10009b26:	f7ff ff67 	bl	100099f8 <metal_device_io_region>
10009b2a:	4603      	mov	r3, r0
10009b2c:	4a0f      	ldr	r2, [pc, #60]	@ (10009b6c <OPENAMP_shmem_init+0x13c>)
10009b2e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
10009b30:	4b0e      	ldr	r3, [pc, #56]	@ (10009b6c <OPENAMP_shmem_init+0x13c>)
10009b32:	681b      	ldr	r3, [r3, #0]
10009b34:	2b00      	cmp	r3, #0
10009b36:	d102      	bne.n	10009b3e <OPENAMP_shmem_init+0x10e>
    return -1;
10009b38:	f04f 33ff 	mov.w	r3, #4294967295
10009b3c:	e000      	b.n	10009b40 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
10009b3e:	2300      	movs	r3, #0
}
10009b40:	4618      	mov	r0, r3
10009b42:	3724      	adds	r7, #36	@ 0x24
10009b44:	46bd      	mov	sp, r7
10009b46:	bd90      	pop	{r4, r7, pc}
10009b48:	1000b010 	.word	0x1000b010
10009b4c:	1002003c 	.word	0x1002003c
10009b50:	1000affc 	.word	0x1000affc
10009b54:	1000b008 	.word	0x1000b008
10009b58:	10040000 	.word	0x10040000
10009b5c:	10021c2c 	.word	0x10021c2c
10009b60:	10050000 	.word	0x10050000
10009b64:	10021b88 	.word	0x10021b88
10009b68:	10021b90 	.word	0x10021b90
10009b6c:	10021b8c 	.word	0x10021b8c

10009b70 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
10009b70:	b590      	push	{r4, r7, lr}
10009b72:	b08b      	sub	sp, #44	@ 0x2c
10009b74:	af04      	add	r7, sp, #16
10009b76:	6078      	str	r0, [r7, #4]
10009b78:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
10009b7a:	2300      	movs	r3, #0
10009b7c:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
10009b7e:	2300      	movs	r3, #0
10009b80:	613b      	str	r3, [r7, #16]
  int status = 0;
10009b82:	2300      	movs	r3, #0
10009b84:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
10009b86:	f7ff feb5 	bl	100098f4 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
10009b8a:	6878      	ldr	r0, [r7, #4]
10009b8c:	f7ff ff50 	bl	10009a30 <OPENAMP_shmem_init>
10009b90:	60f8      	str	r0, [r7, #12]
  if(status)
10009b92:	68fb      	ldr	r3, [r7, #12]
10009b94:	2b00      	cmp	r3, #0
10009b96:	d001      	beq.n	10009b9c <MX_OPENAMP_Init+0x2c>
  {
    return status;
10009b98:	68fb      	ldr	r3, [r7, #12]
10009b9a:	e068      	b.n	10009c6e <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
10009b9c:	6878      	ldr	r0, [r7, #4]
10009b9e:	4b36      	ldr	r3, [pc, #216]	@ (10009c78 <MX_OPENAMP_Init+0x108>)
10009ba0:	681b      	ldr	r3, [r3, #0]
10009ba2:	f103 0218 	add.w	r2, r3, #24
10009ba6:	4b35      	ldr	r3, [pc, #212]	@ (10009c7c <MX_OPENAMP_Init+0x10c>)
10009ba8:	681b      	ldr	r3, [r3, #0]
10009baa:	2100      	movs	r1, #0
10009bac:	9102      	str	r1, [sp, #8]
10009bae:	4934      	ldr	r1, [pc, #208]	@ (10009c80 <MX_OPENAMP_Init+0x110>)
10009bb0:	9101      	str	r1, [sp, #4]
10009bb2:	2100      	movs	r1, #0
10009bb4:	9100      	str	r1, [sp, #0]
10009bb6:	21ff      	movs	r1, #255	@ 0xff
10009bb8:	f7fe fcd0 	bl	1000855c <rproc_virtio_create_vdev>
10009bbc:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
10009bbe:	693b      	ldr	r3, [r7, #16]
10009bc0:	2b00      	cmp	r3, #0
10009bc2:	d102      	bne.n	10009bca <MX_OPENAMP_Init+0x5a>
  {
    return -1;
10009bc4:	f04f 33ff 	mov.w	r3, #4294967295
10009bc8:	e051      	b.n	10009c6e <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
10009bca:	6938      	ldr	r0, [r7, #16]
10009bcc:	f7fe fda5 	bl	1000871a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
10009bd0:	4b29      	ldr	r3, [pc, #164]	@ (10009c78 <MX_OPENAMP_Init+0x108>)
10009bd2:	681b      	ldr	r3, [r3, #0]
10009bd4:	3334      	adds	r3, #52	@ 0x34
10009bd6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10009bd8:	697b      	ldr	r3, [r7, #20]
10009bda:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10009bdc:	697b      	ldr	r3, [r7, #20]
10009bde:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10009be0:	461c      	mov	r4, r3
10009be2:	4b28      	ldr	r3, [pc, #160]	@ (10009c84 <MX_OPENAMP_Init+0x114>)
10009be4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10009be6:	697a      	ldr	r2, [r7, #20]
10009be8:	6892      	ldr	r2, [r2, #8]
10009bea:	6979      	ldr	r1, [r7, #20]
10009bec:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10009bee:	9102      	str	r1, [sp, #8]
10009bf0:	9201      	str	r2, [sp, #4]
10009bf2:	9300      	str	r3, [sp, #0]
10009bf4:	4623      	mov	r3, r4
10009bf6:	4602      	mov	r2, r0
10009bf8:	2100      	movs	r1, #0
10009bfa:	6938      	ldr	r0, [r7, #16]
10009bfc:	f7fe fd5c 	bl	100086b8 <rproc_virtio_init_vring>
10009c00:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10009c02:	68fb      	ldr	r3, [r7, #12]
10009c04:	2b00      	cmp	r3, #0
10009c06:	d001      	beq.n	10009c0c <MX_OPENAMP_Init+0x9c>
  {
    return status;
10009c08:	68fb      	ldr	r3, [r7, #12]
10009c0a:	e030      	b.n	10009c6e <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
10009c0c:	4b1a      	ldr	r3, [pc, #104]	@ (10009c78 <MX_OPENAMP_Init+0x108>)
10009c0e:	681b      	ldr	r3, [r3, #0]
10009c10:	3348      	adds	r3, #72	@ 0x48
10009c12:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10009c14:	697b      	ldr	r3, [r7, #20]
10009c16:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10009c18:	697b      	ldr	r3, [r7, #20]
10009c1a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10009c1c:	461c      	mov	r4, r3
10009c1e:	4b19      	ldr	r3, [pc, #100]	@ (10009c84 <MX_OPENAMP_Init+0x114>)
10009c20:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10009c22:	697a      	ldr	r2, [r7, #20]
10009c24:	6892      	ldr	r2, [r2, #8]
10009c26:	6979      	ldr	r1, [r7, #20]
10009c28:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10009c2a:	9102      	str	r1, [sp, #8]
10009c2c:	9201      	str	r2, [sp, #4]
10009c2e:	9300      	str	r3, [sp, #0]
10009c30:	4623      	mov	r3, r4
10009c32:	4602      	mov	r2, r0
10009c34:	2101      	movs	r1, #1
10009c36:	6938      	ldr	r0, [r7, #16]
10009c38:	f7fe fd3e 	bl	100086b8 <rproc_virtio_init_vring>
10009c3c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10009c3e:	68fb      	ldr	r3, [r7, #12]
10009c40:	2b00      	cmp	r3, #0
10009c42:	d001      	beq.n	10009c48 <MX_OPENAMP_Init+0xd8>
  {
    return status;
10009c44:	68fb      	ldr	r3, [r7, #12]
10009c46:	e012      	b.n	10009c6e <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
10009c48:	4a0f      	ldr	r2, [pc, #60]	@ (10009c88 <MX_OPENAMP_Init+0x118>)
10009c4a:	4b10      	ldr	r3, [pc, #64]	@ (10009c8c <MX_OPENAMP_Init+0x11c>)
10009c4c:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
10009c4e:	461a      	mov	r2, r3
10009c50:	f04f 31ff 	mov.w	r1, #4294967295
10009c54:	480e      	ldr	r0, [pc, #56]	@ (10009c90 <MX_OPENAMP_Init+0x120>)
10009c56:	f7fe ff86 	bl	10008b66 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
10009c5a:	4b0a      	ldr	r3, [pc, #40]	@ (10009c84 <MX_OPENAMP_Init+0x114>)
10009c5c:	681b      	ldr	r3, [r3, #0]
10009c5e:	4a0c      	ldr	r2, [pc, #48]	@ (10009c90 <MX_OPENAMP_Init+0x120>)
10009c60:	9200      	str	r2, [sp, #0]
10009c62:	683a      	ldr	r2, [r7, #0]
10009c64:	6939      	ldr	r1, [r7, #16]
10009c66:	480b      	ldr	r0, [pc, #44]	@ (10009c94 <MX_OPENAMP_Init+0x124>)
10009c68:	f7ff fa7a 	bl	10009160 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
10009c6c:	2300      	movs	r3, #0
}
10009c6e:	4618      	mov	r0, r3
10009c70:	371c      	adds	r7, #28
10009c72:	46bd      	mov	sp, r7
10009c74:	bd90      	pop	{r4, r7, pc}
10009c76:	bf00      	nop
10009c78:	10021b90 	.word	0x10021b90
10009c7c:	10021b8c 	.word	0x10021b8c
10009c80:	1000993d 	.word	0x1000993d
10009c84:	10021b88 	.word	0x10021b88
10009c88:	10050000 	.word	0x10050000
10009c8c:	10040000 	.word	0x10040000
10009c90:	10021b94 	.word	0x10021b94
10009c94:	10021ba0 	.word	0x10021ba0

10009c98 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
10009c98:	b480      	push	{r7}
10009c9a:	b085      	sub	sp, #20
10009c9c:	af00      	add	r7, sp, #0
10009c9e:	60f8      	str	r0, [r7, #12]
10009ca0:	60b9      	str	r1, [r7, #8]
10009ca2:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
10009ca4:	687b      	ldr	r3, [r7, #4]
10009ca6:	228c      	movs	r2, #140	@ 0x8c
10009ca8:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
10009caa:	68bb      	ldr	r3, [r7, #8]
10009cac:	4a03      	ldr	r2, [pc, #12]	@ (10009cbc <resource_table_init+0x24>)
10009cae:	601a      	str	r2, [r3, #0]
}
10009cb0:	bf00      	nop
10009cb2:	3714      	adds	r7, #20
10009cb4:	46bd      	mov	sp, r7
10009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
10009cba:	4770      	bx	lr
10009cbc:	10020124 	.word	0x10020124

10009cc0 <__assert_func>:
10009cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10009cc2:	4614      	mov	r4, r2
10009cc4:	461a      	mov	r2, r3
10009cc6:	4b09      	ldr	r3, [pc, #36]	@ (10009cec <__assert_func+0x2c>)
10009cc8:	681b      	ldr	r3, [r3, #0]
10009cca:	4605      	mov	r5, r0
10009ccc:	68d8      	ldr	r0, [r3, #12]
10009cce:	b954      	cbnz	r4, 10009ce6 <__assert_func+0x26>
10009cd0:	4b07      	ldr	r3, [pc, #28]	@ (10009cf0 <__assert_func+0x30>)
10009cd2:	461c      	mov	r4, r3
10009cd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
10009cd8:	9100      	str	r1, [sp, #0]
10009cda:	462b      	mov	r3, r5
10009cdc:	4905      	ldr	r1, [pc, #20]	@ (10009cf4 <__assert_func+0x34>)
10009cde:	f000 f8b1 	bl	10009e44 <fiprintf>
10009ce2:	f000 f9d0 	bl	1000a086 <abort>
10009ce6:	4b04      	ldr	r3, [pc, #16]	@ (10009cf8 <__assert_func+0x38>)
10009ce8:	e7f4      	b.n	10009cd4 <__assert_func+0x14>
10009cea:	bf00      	nop
10009cec:	100200d4 	.word	0x100200d4
10009cf0:	1000b196 	.word	0x1000b196
10009cf4:	1000b168 	.word	0x1000b168
10009cf8:	1000b15b 	.word	0x1000b15b

10009cfc <std>:
10009cfc:	2300      	movs	r3, #0
10009cfe:	b510      	push	{r4, lr}
10009d00:	4604      	mov	r4, r0
10009d02:	e9c0 3300 	strd	r3, r3, [r0]
10009d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
10009d0a:	6083      	str	r3, [r0, #8]
10009d0c:	8181      	strh	r1, [r0, #12]
10009d0e:	6643      	str	r3, [r0, #100]	@ 0x64
10009d10:	81c2      	strh	r2, [r0, #14]
10009d12:	6183      	str	r3, [r0, #24]
10009d14:	4619      	mov	r1, r3
10009d16:	2208      	movs	r2, #8
10009d18:	305c      	adds	r0, #92	@ 0x5c
10009d1a:	f000 f906 	bl	10009f2a <memset>
10009d1e:	4b0d      	ldr	r3, [pc, #52]	@ (10009d54 <std+0x58>)
10009d20:	6263      	str	r3, [r4, #36]	@ 0x24
10009d22:	4b0d      	ldr	r3, [pc, #52]	@ (10009d58 <std+0x5c>)
10009d24:	62a3      	str	r3, [r4, #40]	@ 0x28
10009d26:	4b0d      	ldr	r3, [pc, #52]	@ (10009d5c <std+0x60>)
10009d28:	62e3      	str	r3, [r4, #44]	@ 0x2c
10009d2a:	4b0d      	ldr	r3, [pc, #52]	@ (10009d60 <std+0x64>)
10009d2c:	6323      	str	r3, [r4, #48]	@ 0x30
10009d2e:	4b0d      	ldr	r3, [pc, #52]	@ (10009d64 <std+0x68>)
10009d30:	6224      	str	r4, [r4, #32]
10009d32:	429c      	cmp	r4, r3
10009d34:	d006      	beq.n	10009d44 <std+0x48>
10009d36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
10009d3a:	4294      	cmp	r4, r2
10009d3c:	d002      	beq.n	10009d44 <std+0x48>
10009d3e:	33d0      	adds	r3, #208	@ 0xd0
10009d40:	429c      	cmp	r4, r3
10009d42:	d105      	bne.n	10009d50 <std+0x54>
10009d44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
10009d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009d4c:	f000 b98a 	b.w	1000a064 <__retarget_lock_init_recursive>
10009d50:	bd10      	pop	{r4, pc}
10009d52:	bf00      	nop
10009d54:	10009ea5 	.word	0x10009ea5
10009d58:	10009ec7 	.word	0x10009ec7
10009d5c:	10009eff 	.word	0x10009eff
10009d60:	10009f23 	.word	0x10009f23
10009d64:	10021c30 	.word	0x10021c30

10009d68 <stdio_exit_handler>:
10009d68:	4a02      	ldr	r2, [pc, #8]	@ (10009d74 <stdio_exit_handler+0xc>)
10009d6a:	4903      	ldr	r1, [pc, #12]	@ (10009d78 <stdio_exit_handler+0x10>)
10009d6c:	4803      	ldr	r0, [pc, #12]	@ (10009d7c <stdio_exit_handler+0x14>)
10009d6e:	f000 b87b 	b.w	10009e68 <_fwalk_sglue>
10009d72:	bf00      	nop
10009d74:	100200c8 	.word	0x100200c8
10009d78:	1000a92d 	.word	0x1000a92d
10009d7c:	100200d8 	.word	0x100200d8

10009d80 <cleanup_stdio>:
10009d80:	6841      	ldr	r1, [r0, #4]
10009d82:	4b0c      	ldr	r3, [pc, #48]	@ (10009db4 <cleanup_stdio+0x34>)
10009d84:	4299      	cmp	r1, r3
10009d86:	b510      	push	{r4, lr}
10009d88:	4604      	mov	r4, r0
10009d8a:	d001      	beq.n	10009d90 <cleanup_stdio+0x10>
10009d8c:	f000 fdce 	bl	1000a92c <_fflush_r>
10009d90:	68a1      	ldr	r1, [r4, #8]
10009d92:	4b09      	ldr	r3, [pc, #36]	@ (10009db8 <cleanup_stdio+0x38>)
10009d94:	4299      	cmp	r1, r3
10009d96:	d002      	beq.n	10009d9e <cleanup_stdio+0x1e>
10009d98:	4620      	mov	r0, r4
10009d9a:	f000 fdc7 	bl	1000a92c <_fflush_r>
10009d9e:	68e1      	ldr	r1, [r4, #12]
10009da0:	4b06      	ldr	r3, [pc, #24]	@ (10009dbc <cleanup_stdio+0x3c>)
10009da2:	4299      	cmp	r1, r3
10009da4:	d004      	beq.n	10009db0 <cleanup_stdio+0x30>
10009da6:	4620      	mov	r0, r4
10009da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009dac:	f000 bdbe 	b.w	1000a92c <_fflush_r>
10009db0:	bd10      	pop	{r4, pc}
10009db2:	bf00      	nop
10009db4:	10021c30 	.word	0x10021c30
10009db8:	10021c98 	.word	0x10021c98
10009dbc:	10021d00 	.word	0x10021d00

10009dc0 <global_stdio_init.part.0>:
10009dc0:	b510      	push	{r4, lr}
10009dc2:	4b0b      	ldr	r3, [pc, #44]	@ (10009df0 <global_stdio_init.part.0+0x30>)
10009dc4:	4c0b      	ldr	r4, [pc, #44]	@ (10009df4 <global_stdio_init.part.0+0x34>)
10009dc6:	4a0c      	ldr	r2, [pc, #48]	@ (10009df8 <global_stdio_init.part.0+0x38>)
10009dc8:	601a      	str	r2, [r3, #0]
10009dca:	4620      	mov	r0, r4
10009dcc:	2200      	movs	r2, #0
10009dce:	2104      	movs	r1, #4
10009dd0:	f7ff ff94 	bl	10009cfc <std>
10009dd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
10009dd8:	2201      	movs	r2, #1
10009dda:	2109      	movs	r1, #9
10009ddc:	f7ff ff8e 	bl	10009cfc <std>
10009de0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
10009de4:	2202      	movs	r2, #2
10009de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009dea:	2112      	movs	r1, #18
10009dec:	f7ff bf86 	b.w	10009cfc <std>
10009df0:	10021d68 	.word	0x10021d68
10009df4:	10021c30 	.word	0x10021c30
10009df8:	10009d69 	.word	0x10009d69

10009dfc <__sfp_lock_acquire>:
10009dfc:	4801      	ldr	r0, [pc, #4]	@ (10009e04 <__sfp_lock_acquire+0x8>)
10009dfe:	f000 b932 	b.w	1000a066 <__retarget_lock_acquire_recursive>
10009e02:	bf00      	nop
10009e04:	10021d71 	.word	0x10021d71

10009e08 <__sfp_lock_release>:
10009e08:	4801      	ldr	r0, [pc, #4]	@ (10009e10 <__sfp_lock_release+0x8>)
10009e0a:	f000 b92d 	b.w	1000a068 <__retarget_lock_release_recursive>
10009e0e:	bf00      	nop
10009e10:	10021d71 	.word	0x10021d71

10009e14 <__sinit>:
10009e14:	b510      	push	{r4, lr}
10009e16:	4604      	mov	r4, r0
10009e18:	f7ff fff0 	bl	10009dfc <__sfp_lock_acquire>
10009e1c:	6a23      	ldr	r3, [r4, #32]
10009e1e:	b11b      	cbz	r3, 10009e28 <__sinit+0x14>
10009e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009e24:	f7ff bff0 	b.w	10009e08 <__sfp_lock_release>
10009e28:	4b04      	ldr	r3, [pc, #16]	@ (10009e3c <__sinit+0x28>)
10009e2a:	6223      	str	r3, [r4, #32]
10009e2c:	4b04      	ldr	r3, [pc, #16]	@ (10009e40 <__sinit+0x2c>)
10009e2e:	681b      	ldr	r3, [r3, #0]
10009e30:	2b00      	cmp	r3, #0
10009e32:	d1f5      	bne.n	10009e20 <__sinit+0xc>
10009e34:	f7ff ffc4 	bl	10009dc0 <global_stdio_init.part.0>
10009e38:	e7f2      	b.n	10009e20 <__sinit+0xc>
10009e3a:	bf00      	nop
10009e3c:	10009d81 	.word	0x10009d81
10009e40:	10021d68 	.word	0x10021d68

10009e44 <fiprintf>:
10009e44:	b40e      	push	{r1, r2, r3}
10009e46:	b503      	push	{r0, r1, lr}
10009e48:	4601      	mov	r1, r0
10009e4a:	ab03      	add	r3, sp, #12
10009e4c:	4805      	ldr	r0, [pc, #20]	@ (10009e64 <fiprintf+0x20>)
10009e4e:	f853 2b04 	ldr.w	r2, [r3], #4
10009e52:	6800      	ldr	r0, [r0, #0]
10009e54:	9301      	str	r3, [sp, #4]
10009e56:	f000 fa3f 	bl	1000a2d8 <_vfiprintf_r>
10009e5a:	b002      	add	sp, #8
10009e5c:	f85d eb04 	ldr.w	lr, [sp], #4
10009e60:	b003      	add	sp, #12
10009e62:	4770      	bx	lr
10009e64:	100200d4 	.word	0x100200d4

10009e68 <_fwalk_sglue>:
10009e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10009e6c:	4607      	mov	r7, r0
10009e6e:	4688      	mov	r8, r1
10009e70:	4614      	mov	r4, r2
10009e72:	2600      	movs	r6, #0
10009e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
10009e78:	f1b9 0901 	subs.w	r9, r9, #1
10009e7c:	d505      	bpl.n	10009e8a <_fwalk_sglue+0x22>
10009e7e:	6824      	ldr	r4, [r4, #0]
10009e80:	2c00      	cmp	r4, #0
10009e82:	d1f7      	bne.n	10009e74 <_fwalk_sglue+0xc>
10009e84:	4630      	mov	r0, r6
10009e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10009e8a:	89ab      	ldrh	r3, [r5, #12]
10009e8c:	2b01      	cmp	r3, #1
10009e8e:	d907      	bls.n	10009ea0 <_fwalk_sglue+0x38>
10009e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
10009e94:	3301      	adds	r3, #1
10009e96:	d003      	beq.n	10009ea0 <_fwalk_sglue+0x38>
10009e98:	4629      	mov	r1, r5
10009e9a:	4638      	mov	r0, r7
10009e9c:	47c0      	blx	r8
10009e9e:	4306      	orrs	r6, r0
10009ea0:	3568      	adds	r5, #104	@ 0x68
10009ea2:	e7e9      	b.n	10009e78 <_fwalk_sglue+0x10>

10009ea4 <__sread>:
10009ea4:	b510      	push	{r4, lr}
10009ea6:	460c      	mov	r4, r1
10009ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009eac:	f000 f88c 	bl	10009fc8 <_read_r>
10009eb0:	2800      	cmp	r0, #0
10009eb2:	bfab      	itete	ge
10009eb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
10009eb6:	89a3      	ldrhlt	r3, [r4, #12]
10009eb8:	181b      	addge	r3, r3, r0
10009eba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
10009ebe:	bfac      	ite	ge
10009ec0:	6563      	strge	r3, [r4, #84]	@ 0x54
10009ec2:	81a3      	strhlt	r3, [r4, #12]
10009ec4:	bd10      	pop	{r4, pc}

10009ec6 <__swrite>:
10009ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10009eca:	461f      	mov	r7, r3
10009ecc:	898b      	ldrh	r3, [r1, #12]
10009ece:	05db      	lsls	r3, r3, #23
10009ed0:	4605      	mov	r5, r0
10009ed2:	460c      	mov	r4, r1
10009ed4:	4616      	mov	r6, r2
10009ed6:	d505      	bpl.n	10009ee4 <__swrite+0x1e>
10009ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009edc:	2302      	movs	r3, #2
10009ede:	2200      	movs	r2, #0
10009ee0:	f000 f860 	bl	10009fa4 <_lseek_r>
10009ee4:	89a3      	ldrh	r3, [r4, #12]
10009ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10009eea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
10009eee:	81a3      	strh	r3, [r4, #12]
10009ef0:	4632      	mov	r2, r6
10009ef2:	463b      	mov	r3, r7
10009ef4:	4628      	mov	r0, r5
10009ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
10009efa:	f000 b877 	b.w	10009fec <_write_r>

10009efe <__sseek>:
10009efe:	b510      	push	{r4, lr}
10009f00:	460c      	mov	r4, r1
10009f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009f06:	f000 f84d 	bl	10009fa4 <_lseek_r>
10009f0a:	1c43      	adds	r3, r0, #1
10009f0c:	89a3      	ldrh	r3, [r4, #12]
10009f0e:	bf15      	itete	ne
10009f10:	6560      	strne	r0, [r4, #84]	@ 0x54
10009f12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
10009f16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
10009f1a:	81a3      	strheq	r3, [r4, #12]
10009f1c:	bf18      	it	ne
10009f1e:	81a3      	strhne	r3, [r4, #12]
10009f20:	bd10      	pop	{r4, pc}

10009f22 <__sclose>:
10009f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009f26:	f000 b82d 	b.w	10009f84 <_close_r>

10009f2a <memset>:
10009f2a:	4402      	add	r2, r0
10009f2c:	4603      	mov	r3, r0
10009f2e:	4293      	cmp	r3, r2
10009f30:	d100      	bne.n	10009f34 <memset+0xa>
10009f32:	4770      	bx	lr
10009f34:	f803 1b01 	strb.w	r1, [r3], #1
10009f38:	e7f9      	b.n	10009f2e <memset+0x4>

10009f3a <strncmp>:
10009f3a:	b510      	push	{r4, lr}
10009f3c:	b16a      	cbz	r2, 10009f5a <strncmp+0x20>
10009f3e:	3901      	subs	r1, #1
10009f40:	1884      	adds	r4, r0, r2
10009f42:	f810 2b01 	ldrb.w	r2, [r0], #1
10009f46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
10009f4a:	429a      	cmp	r2, r3
10009f4c:	d103      	bne.n	10009f56 <strncmp+0x1c>
10009f4e:	42a0      	cmp	r0, r4
10009f50:	d001      	beq.n	10009f56 <strncmp+0x1c>
10009f52:	2a00      	cmp	r2, #0
10009f54:	d1f5      	bne.n	10009f42 <strncmp+0x8>
10009f56:	1ad0      	subs	r0, r2, r3
10009f58:	bd10      	pop	{r4, pc}
10009f5a:	4610      	mov	r0, r2
10009f5c:	e7fc      	b.n	10009f58 <strncmp+0x1e>

10009f5e <strncpy>:
10009f5e:	b510      	push	{r4, lr}
10009f60:	3901      	subs	r1, #1
10009f62:	4603      	mov	r3, r0
10009f64:	b132      	cbz	r2, 10009f74 <strncpy+0x16>
10009f66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
10009f6a:	f803 4b01 	strb.w	r4, [r3], #1
10009f6e:	3a01      	subs	r2, #1
10009f70:	2c00      	cmp	r4, #0
10009f72:	d1f7      	bne.n	10009f64 <strncpy+0x6>
10009f74:	441a      	add	r2, r3
10009f76:	2100      	movs	r1, #0
10009f78:	4293      	cmp	r3, r2
10009f7a:	d100      	bne.n	10009f7e <strncpy+0x20>
10009f7c:	bd10      	pop	{r4, pc}
10009f7e:	f803 1b01 	strb.w	r1, [r3], #1
10009f82:	e7f9      	b.n	10009f78 <strncpy+0x1a>

10009f84 <_close_r>:
10009f84:	b538      	push	{r3, r4, r5, lr}
10009f86:	4d06      	ldr	r5, [pc, #24]	@ (10009fa0 <_close_r+0x1c>)
10009f88:	2300      	movs	r3, #0
10009f8a:	4604      	mov	r4, r0
10009f8c:	4608      	mov	r0, r1
10009f8e:	602b      	str	r3, [r5, #0]
10009f90:	f7f6 fc0a 	bl	100007a8 <_close>
10009f94:	1c43      	adds	r3, r0, #1
10009f96:	d102      	bne.n	10009f9e <_close_r+0x1a>
10009f98:	682b      	ldr	r3, [r5, #0]
10009f9a:	b103      	cbz	r3, 10009f9e <_close_r+0x1a>
10009f9c:	6023      	str	r3, [r4, #0]
10009f9e:	bd38      	pop	{r3, r4, r5, pc}
10009fa0:	10021d6c 	.word	0x10021d6c

10009fa4 <_lseek_r>:
10009fa4:	b538      	push	{r3, r4, r5, lr}
10009fa6:	4d07      	ldr	r5, [pc, #28]	@ (10009fc4 <_lseek_r+0x20>)
10009fa8:	4604      	mov	r4, r0
10009faa:	4608      	mov	r0, r1
10009fac:	4611      	mov	r1, r2
10009fae:	2200      	movs	r2, #0
10009fb0:	602a      	str	r2, [r5, #0]
10009fb2:	461a      	mov	r2, r3
10009fb4:	f7f6 fc1f 	bl	100007f6 <_lseek>
10009fb8:	1c43      	adds	r3, r0, #1
10009fba:	d102      	bne.n	10009fc2 <_lseek_r+0x1e>
10009fbc:	682b      	ldr	r3, [r5, #0]
10009fbe:	b103      	cbz	r3, 10009fc2 <_lseek_r+0x1e>
10009fc0:	6023      	str	r3, [r4, #0]
10009fc2:	bd38      	pop	{r3, r4, r5, pc}
10009fc4:	10021d6c 	.word	0x10021d6c

10009fc8 <_read_r>:
10009fc8:	b538      	push	{r3, r4, r5, lr}
10009fca:	4d07      	ldr	r5, [pc, #28]	@ (10009fe8 <_read_r+0x20>)
10009fcc:	4604      	mov	r4, r0
10009fce:	4608      	mov	r0, r1
10009fd0:	4611      	mov	r1, r2
10009fd2:	2200      	movs	r2, #0
10009fd4:	602a      	str	r2, [r5, #0]
10009fd6:	461a      	mov	r2, r3
10009fd8:	f7f6 fbad 	bl	10000736 <_read>
10009fdc:	1c43      	adds	r3, r0, #1
10009fde:	d102      	bne.n	10009fe6 <_read_r+0x1e>
10009fe0:	682b      	ldr	r3, [r5, #0]
10009fe2:	b103      	cbz	r3, 10009fe6 <_read_r+0x1e>
10009fe4:	6023      	str	r3, [r4, #0]
10009fe6:	bd38      	pop	{r3, r4, r5, pc}
10009fe8:	10021d6c 	.word	0x10021d6c

10009fec <_write_r>:
10009fec:	b538      	push	{r3, r4, r5, lr}
10009fee:	4d07      	ldr	r5, [pc, #28]	@ (1000a00c <_write_r+0x20>)
10009ff0:	4604      	mov	r4, r0
10009ff2:	4608      	mov	r0, r1
10009ff4:	4611      	mov	r1, r2
10009ff6:	2200      	movs	r2, #0
10009ff8:	602a      	str	r2, [r5, #0]
10009ffa:	461a      	mov	r2, r3
10009ffc:	f7f6 fbb8 	bl	10000770 <_write>
1000a000:	1c43      	adds	r3, r0, #1
1000a002:	d102      	bne.n	1000a00a <_write_r+0x1e>
1000a004:	682b      	ldr	r3, [r5, #0]
1000a006:	b103      	cbz	r3, 1000a00a <_write_r+0x1e>
1000a008:	6023      	str	r3, [r4, #0]
1000a00a:	bd38      	pop	{r3, r4, r5, pc}
1000a00c:	10021d6c 	.word	0x10021d6c

1000a010 <__errno>:
1000a010:	4b01      	ldr	r3, [pc, #4]	@ (1000a018 <__errno+0x8>)
1000a012:	6818      	ldr	r0, [r3, #0]
1000a014:	4770      	bx	lr
1000a016:	bf00      	nop
1000a018:	100200d4 	.word	0x100200d4

1000a01c <__libc_init_array>:
1000a01c:	b570      	push	{r4, r5, r6, lr}
1000a01e:	4d0d      	ldr	r5, [pc, #52]	@ (1000a054 <__libc_init_array+0x38>)
1000a020:	4c0d      	ldr	r4, [pc, #52]	@ (1000a058 <__libc_init_array+0x3c>)
1000a022:	1b64      	subs	r4, r4, r5
1000a024:	10a4      	asrs	r4, r4, #2
1000a026:	2600      	movs	r6, #0
1000a028:	42a6      	cmp	r6, r4
1000a02a:	d109      	bne.n	1000a040 <__libc_init_array+0x24>
1000a02c:	4d0b      	ldr	r5, [pc, #44]	@ (1000a05c <__libc_init_array+0x40>)
1000a02e:	4c0c      	ldr	r4, [pc, #48]	@ (1000a060 <__libc_init_array+0x44>)
1000a030:	f000 fe10 	bl	1000ac54 <_init>
1000a034:	1b64      	subs	r4, r4, r5
1000a036:	10a4      	asrs	r4, r4, #2
1000a038:	2600      	movs	r6, #0
1000a03a:	42a6      	cmp	r6, r4
1000a03c:	d105      	bne.n	1000a04a <__libc_init_array+0x2e>
1000a03e:	bd70      	pop	{r4, r5, r6, pc}
1000a040:	f855 3b04 	ldr.w	r3, [r5], #4
1000a044:	4798      	blx	r3
1000a046:	3601      	adds	r6, #1
1000a048:	e7ee      	b.n	1000a028 <__libc_init_array+0xc>
1000a04a:	f855 3b04 	ldr.w	r3, [r5], #4
1000a04e:	4798      	blx	r3
1000a050:	3601      	adds	r6, #1
1000a052:	e7f2      	b.n	1000a03a <__libc_init_array+0x1e>
1000a054:	1000b1d4 	.word	0x1000b1d4
1000a058:	1000b1d4 	.word	0x1000b1d4
1000a05c:	1000b1d4 	.word	0x1000b1d4
1000a060:	1000b1d8 	.word	0x1000b1d8

1000a064 <__retarget_lock_init_recursive>:
1000a064:	4770      	bx	lr

1000a066 <__retarget_lock_acquire_recursive>:
1000a066:	4770      	bx	lr

1000a068 <__retarget_lock_release_recursive>:
1000a068:	4770      	bx	lr

1000a06a <memcpy>:
1000a06a:	440a      	add	r2, r1
1000a06c:	4291      	cmp	r1, r2
1000a06e:	f100 33ff 	add.w	r3, r0, #4294967295
1000a072:	d100      	bne.n	1000a076 <memcpy+0xc>
1000a074:	4770      	bx	lr
1000a076:	b510      	push	{r4, lr}
1000a078:	f811 4b01 	ldrb.w	r4, [r1], #1
1000a07c:	f803 4f01 	strb.w	r4, [r3, #1]!
1000a080:	4291      	cmp	r1, r2
1000a082:	d1f9      	bne.n	1000a078 <memcpy+0xe>
1000a084:	bd10      	pop	{r4, pc}

1000a086 <abort>:
1000a086:	b508      	push	{r3, lr}
1000a088:	2006      	movs	r0, #6
1000a08a:	f000 fd33 	bl	1000aaf4 <raise>
1000a08e:	2001      	movs	r0, #1
1000a090:	f7f6 fb46 	bl	10000720 <_exit>

1000a094 <_free_r>:
1000a094:	b538      	push	{r3, r4, r5, lr}
1000a096:	4605      	mov	r5, r0
1000a098:	2900      	cmp	r1, #0
1000a09a:	d041      	beq.n	1000a120 <_free_r+0x8c>
1000a09c:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000a0a0:	1f0c      	subs	r4, r1, #4
1000a0a2:	2b00      	cmp	r3, #0
1000a0a4:	bfb8      	it	lt
1000a0a6:	18e4      	addlt	r4, r4, r3
1000a0a8:	f000 f8e0 	bl	1000a26c <__malloc_lock>
1000a0ac:	4a1d      	ldr	r2, [pc, #116]	@ (1000a124 <_free_r+0x90>)
1000a0ae:	6813      	ldr	r3, [r2, #0]
1000a0b0:	b933      	cbnz	r3, 1000a0c0 <_free_r+0x2c>
1000a0b2:	6063      	str	r3, [r4, #4]
1000a0b4:	6014      	str	r4, [r2, #0]
1000a0b6:	4628      	mov	r0, r5
1000a0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000a0bc:	f000 b8dc 	b.w	1000a278 <__malloc_unlock>
1000a0c0:	42a3      	cmp	r3, r4
1000a0c2:	d908      	bls.n	1000a0d6 <_free_r+0x42>
1000a0c4:	6820      	ldr	r0, [r4, #0]
1000a0c6:	1821      	adds	r1, r4, r0
1000a0c8:	428b      	cmp	r3, r1
1000a0ca:	bf01      	itttt	eq
1000a0cc:	6819      	ldreq	r1, [r3, #0]
1000a0ce:	685b      	ldreq	r3, [r3, #4]
1000a0d0:	1809      	addeq	r1, r1, r0
1000a0d2:	6021      	streq	r1, [r4, #0]
1000a0d4:	e7ed      	b.n	1000a0b2 <_free_r+0x1e>
1000a0d6:	461a      	mov	r2, r3
1000a0d8:	685b      	ldr	r3, [r3, #4]
1000a0da:	b10b      	cbz	r3, 1000a0e0 <_free_r+0x4c>
1000a0dc:	42a3      	cmp	r3, r4
1000a0de:	d9fa      	bls.n	1000a0d6 <_free_r+0x42>
1000a0e0:	6811      	ldr	r1, [r2, #0]
1000a0e2:	1850      	adds	r0, r2, r1
1000a0e4:	42a0      	cmp	r0, r4
1000a0e6:	d10b      	bne.n	1000a100 <_free_r+0x6c>
1000a0e8:	6820      	ldr	r0, [r4, #0]
1000a0ea:	4401      	add	r1, r0
1000a0ec:	1850      	adds	r0, r2, r1
1000a0ee:	4283      	cmp	r3, r0
1000a0f0:	6011      	str	r1, [r2, #0]
1000a0f2:	d1e0      	bne.n	1000a0b6 <_free_r+0x22>
1000a0f4:	6818      	ldr	r0, [r3, #0]
1000a0f6:	685b      	ldr	r3, [r3, #4]
1000a0f8:	6053      	str	r3, [r2, #4]
1000a0fa:	4408      	add	r0, r1
1000a0fc:	6010      	str	r0, [r2, #0]
1000a0fe:	e7da      	b.n	1000a0b6 <_free_r+0x22>
1000a100:	d902      	bls.n	1000a108 <_free_r+0x74>
1000a102:	230c      	movs	r3, #12
1000a104:	602b      	str	r3, [r5, #0]
1000a106:	e7d6      	b.n	1000a0b6 <_free_r+0x22>
1000a108:	6820      	ldr	r0, [r4, #0]
1000a10a:	1821      	adds	r1, r4, r0
1000a10c:	428b      	cmp	r3, r1
1000a10e:	bf04      	itt	eq
1000a110:	6819      	ldreq	r1, [r3, #0]
1000a112:	685b      	ldreq	r3, [r3, #4]
1000a114:	6063      	str	r3, [r4, #4]
1000a116:	bf04      	itt	eq
1000a118:	1809      	addeq	r1, r1, r0
1000a11a:	6021      	streq	r1, [r4, #0]
1000a11c:	6054      	str	r4, [r2, #4]
1000a11e:	e7ca      	b.n	1000a0b6 <_free_r+0x22>
1000a120:	bd38      	pop	{r3, r4, r5, pc}
1000a122:	bf00      	nop
1000a124:	10021d78 	.word	0x10021d78

1000a128 <sbrk_aligned>:
1000a128:	b570      	push	{r4, r5, r6, lr}
1000a12a:	4e0f      	ldr	r6, [pc, #60]	@ (1000a168 <sbrk_aligned+0x40>)
1000a12c:	460c      	mov	r4, r1
1000a12e:	6831      	ldr	r1, [r6, #0]
1000a130:	4605      	mov	r5, r0
1000a132:	b911      	cbnz	r1, 1000a13a <sbrk_aligned+0x12>
1000a134:	f000 fcfa 	bl	1000ab2c <_sbrk_r>
1000a138:	6030      	str	r0, [r6, #0]
1000a13a:	4621      	mov	r1, r4
1000a13c:	4628      	mov	r0, r5
1000a13e:	f000 fcf5 	bl	1000ab2c <_sbrk_r>
1000a142:	1c43      	adds	r3, r0, #1
1000a144:	d103      	bne.n	1000a14e <sbrk_aligned+0x26>
1000a146:	f04f 34ff 	mov.w	r4, #4294967295
1000a14a:	4620      	mov	r0, r4
1000a14c:	bd70      	pop	{r4, r5, r6, pc}
1000a14e:	1cc4      	adds	r4, r0, #3
1000a150:	f024 0403 	bic.w	r4, r4, #3
1000a154:	42a0      	cmp	r0, r4
1000a156:	d0f8      	beq.n	1000a14a <sbrk_aligned+0x22>
1000a158:	1a21      	subs	r1, r4, r0
1000a15a:	4628      	mov	r0, r5
1000a15c:	f000 fce6 	bl	1000ab2c <_sbrk_r>
1000a160:	3001      	adds	r0, #1
1000a162:	d1f2      	bne.n	1000a14a <sbrk_aligned+0x22>
1000a164:	e7ef      	b.n	1000a146 <sbrk_aligned+0x1e>
1000a166:	bf00      	nop
1000a168:	10021d74 	.word	0x10021d74

1000a16c <_malloc_r>:
1000a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000a170:	1ccd      	adds	r5, r1, #3
1000a172:	f025 0503 	bic.w	r5, r5, #3
1000a176:	3508      	adds	r5, #8
1000a178:	2d0c      	cmp	r5, #12
1000a17a:	bf38      	it	cc
1000a17c:	250c      	movcc	r5, #12
1000a17e:	2d00      	cmp	r5, #0
1000a180:	4606      	mov	r6, r0
1000a182:	db01      	blt.n	1000a188 <_malloc_r+0x1c>
1000a184:	42a9      	cmp	r1, r5
1000a186:	d904      	bls.n	1000a192 <_malloc_r+0x26>
1000a188:	230c      	movs	r3, #12
1000a18a:	6033      	str	r3, [r6, #0]
1000a18c:	2000      	movs	r0, #0
1000a18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000a192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 1000a268 <_malloc_r+0xfc>
1000a196:	f000 f869 	bl	1000a26c <__malloc_lock>
1000a19a:	f8d8 3000 	ldr.w	r3, [r8]
1000a19e:	461c      	mov	r4, r3
1000a1a0:	bb44      	cbnz	r4, 1000a1f4 <_malloc_r+0x88>
1000a1a2:	4629      	mov	r1, r5
1000a1a4:	4630      	mov	r0, r6
1000a1a6:	f7ff ffbf 	bl	1000a128 <sbrk_aligned>
1000a1aa:	1c43      	adds	r3, r0, #1
1000a1ac:	4604      	mov	r4, r0
1000a1ae:	d158      	bne.n	1000a262 <_malloc_r+0xf6>
1000a1b0:	f8d8 4000 	ldr.w	r4, [r8]
1000a1b4:	4627      	mov	r7, r4
1000a1b6:	2f00      	cmp	r7, #0
1000a1b8:	d143      	bne.n	1000a242 <_malloc_r+0xd6>
1000a1ba:	2c00      	cmp	r4, #0
1000a1bc:	d04b      	beq.n	1000a256 <_malloc_r+0xea>
1000a1be:	6823      	ldr	r3, [r4, #0]
1000a1c0:	4639      	mov	r1, r7
1000a1c2:	4630      	mov	r0, r6
1000a1c4:	eb04 0903 	add.w	r9, r4, r3
1000a1c8:	f000 fcb0 	bl	1000ab2c <_sbrk_r>
1000a1cc:	4581      	cmp	r9, r0
1000a1ce:	d142      	bne.n	1000a256 <_malloc_r+0xea>
1000a1d0:	6821      	ldr	r1, [r4, #0]
1000a1d2:	1a6d      	subs	r5, r5, r1
1000a1d4:	4629      	mov	r1, r5
1000a1d6:	4630      	mov	r0, r6
1000a1d8:	f7ff ffa6 	bl	1000a128 <sbrk_aligned>
1000a1dc:	3001      	adds	r0, #1
1000a1de:	d03a      	beq.n	1000a256 <_malloc_r+0xea>
1000a1e0:	6823      	ldr	r3, [r4, #0]
1000a1e2:	442b      	add	r3, r5
1000a1e4:	6023      	str	r3, [r4, #0]
1000a1e6:	f8d8 3000 	ldr.w	r3, [r8]
1000a1ea:	685a      	ldr	r2, [r3, #4]
1000a1ec:	bb62      	cbnz	r2, 1000a248 <_malloc_r+0xdc>
1000a1ee:	f8c8 7000 	str.w	r7, [r8]
1000a1f2:	e00f      	b.n	1000a214 <_malloc_r+0xa8>
1000a1f4:	6822      	ldr	r2, [r4, #0]
1000a1f6:	1b52      	subs	r2, r2, r5
1000a1f8:	d420      	bmi.n	1000a23c <_malloc_r+0xd0>
1000a1fa:	2a0b      	cmp	r2, #11
1000a1fc:	d917      	bls.n	1000a22e <_malloc_r+0xc2>
1000a1fe:	1961      	adds	r1, r4, r5
1000a200:	42a3      	cmp	r3, r4
1000a202:	6025      	str	r5, [r4, #0]
1000a204:	bf18      	it	ne
1000a206:	6059      	strne	r1, [r3, #4]
1000a208:	6863      	ldr	r3, [r4, #4]
1000a20a:	bf08      	it	eq
1000a20c:	f8c8 1000 	streq.w	r1, [r8]
1000a210:	5162      	str	r2, [r4, r5]
1000a212:	604b      	str	r3, [r1, #4]
1000a214:	4630      	mov	r0, r6
1000a216:	f000 f82f 	bl	1000a278 <__malloc_unlock>
1000a21a:	f104 000b 	add.w	r0, r4, #11
1000a21e:	1d23      	adds	r3, r4, #4
1000a220:	f020 0007 	bic.w	r0, r0, #7
1000a224:	1ac2      	subs	r2, r0, r3
1000a226:	bf1c      	itt	ne
1000a228:	1a1b      	subne	r3, r3, r0
1000a22a:	50a3      	strne	r3, [r4, r2]
1000a22c:	e7af      	b.n	1000a18e <_malloc_r+0x22>
1000a22e:	6862      	ldr	r2, [r4, #4]
1000a230:	42a3      	cmp	r3, r4
1000a232:	bf0c      	ite	eq
1000a234:	f8c8 2000 	streq.w	r2, [r8]
1000a238:	605a      	strne	r2, [r3, #4]
1000a23a:	e7eb      	b.n	1000a214 <_malloc_r+0xa8>
1000a23c:	4623      	mov	r3, r4
1000a23e:	6864      	ldr	r4, [r4, #4]
1000a240:	e7ae      	b.n	1000a1a0 <_malloc_r+0x34>
1000a242:	463c      	mov	r4, r7
1000a244:	687f      	ldr	r7, [r7, #4]
1000a246:	e7b6      	b.n	1000a1b6 <_malloc_r+0x4a>
1000a248:	461a      	mov	r2, r3
1000a24a:	685b      	ldr	r3, [r3, #4]
1000a24c:	42a3      	cmp	r3, r4
1000a24e:	d1fb      	bne.n	1000a248 <_malloc_r+0xdc>
1000a250:	2300      	movs	r3, #0
1000a252:	6053      	str	r3, [r2, #4]
1000a254:	e7de      	b.n	1000a214 <_malloc_r+0xa8>
1000a256:	230c      	movs	r3, #12
1000a258:	6033      	str	r3, [r6, #0]
1000a25a:	4630      	mov	r0, r6
1000a25c:	f000 f80c 	bl	1000a278 <__malloc_unlock>
1000a260:	e794      	b.n	1000a18c <_malloc_r+0x20>
1000a262:	6005      	str	r5, [r0, #0]
1000a264:	e7d6      	b.n	1000a214 <_malloc_r+0xa8>
1000a266:	bf00      	nop
1000a268:	10021d78 	.word	0x10021d78

1000a26c <__malloc_lock>:
1000a26c:	4801      	ldr	r0, [pc, #4]	@ (1000a274 <__malloc_lock+0x8>)
1000a26e:	f7ff befa 	b.w	1000a066 <__retarget_lock_acquire_recursive>
1000a272:	bf00      	nop
1000a274:	10021d70 	.word	0x10021d70

1000a278 <__malloc_unlock>:
1000a278:	4801      	ldr	r0, [pc, #4]	@ (1000a280 <__malloc_unlock+0x8>)
1000a27a:	f7ff bef5 	b.w	1000a068 <__retarget_lock_release_recursive>
1000a27e:	bf00      	nop
1000a280:	10021d70 	.word	0x10021d70

1000a284 <__sfputc_r>:
1000a284:	6893      	ldr	r3, [r2, #8]
1000a286:	3b01      	subs	r3, #1
1000a288:	2b00      	cmp	r3, #0
1000a28a:	b410      	push	{r4}
1000a28c:	6093      	str	r3, [r2, #8]
1000a28e:	da08      	bge.n	1000a2a2 <__sfputc_r+0x1e>
1000a290:	6994      	ldr	r4, [r2, #24]
1000a292:	42a3      	cmp	r3, r4
1000a294:	db01      	blt.n	1000a29a <__sfputc_r+0x16>
1000a296:	290a      	cmp	r1, #10
1000a298:	d103      	bne.n	1000a2a2 <__sfputc_r+0x1e>
1000a29a:	f85d 4b04 	ldr.w	r4, [sp], #4
1000a29e:	f000 bb6d 	b.w	1000a97c <__swbuf_r>
1000a2a2:	6813      	ldr	r3, [r2, #0]
1000a2a4:	1c58      	adds	r0, r3, #1
1000a2a6:	6010      	str	r0, [r2, #0]
1000a2a8:	7019      	strb	r1, [r3, #0]
1000a2aa:	4608      	mov	r0, r1
1000a2ac:	f85d 4b04 	ldr.w	r4, [sp], #4
1000a2b0:	4770      	bx	lr

1000a2b2 <__sfputs_r>:
1000a2b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a2b4:	4606      	mov	r6, r0
1000a2b6:	460f      	mov	r7, r1
1000a2b8:	4614      	mov	r4, r2
1000a2ba:	18d5      	adds	r5, r2, r3
1000a2bc:	42ac      	cmp	r4, r5
1000a2be:	d101      	bne.n	1000a2c4 <__sfputs_r+0x12>
1000a2c0:	2000      	movs	r0, #0
1000a2c2:	e007      	b.n	1000a2d4 <__sfputs_r+0x22>
1000a2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a2c8:	463a      	mov	r2, r7
1000a2ca:	4630      	mov	r0, r6
1000a2cc:	f7ff ffda 	bl	1000a284 <__sfputc_r>
1000a2d0:	1c43      	adds	r3, r0, #1
1000a2d2:	d1f3      	bne.n	1000a2bc <__sfputs_r+0xa>
1000a2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1000a2d8 <_vfiprintf_r>:
1000a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000a2dc:	460d      	mov	r5, r1
1000a2de:	b09d      	sub	sp, #116	@ 0x74
1000a2e0:	4614      	mov	r4, r2
1000a2e2:	4698      	mov	r8, r3
1000a2e4:	4606      	mov	r6, r0
1000a2e6:	b118      	cbz	r0, 1000a2f0 <_vfiprintf_r+0x18>
1000a2e8:	6a03      	ldr	r3, [r0, #32]
1000a2ea:	b90b      	cbnz	r3, 1000a2f0 <_vfiprintf_r+0x18>
1000a2ec:	f7ff fd92 	bl	10009e14 <__sinit>
1000a2f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000a2f2:	07d9      	lsls	r1, r3, #31
1000a2f4:	d405      	bmi.n	1000a302 <_vfiprintf_r+0x2a>
1000a2f6:	89ab      	ldrh	r3, [r5, #12]
1000a2f8:	059a      	lsls	r2, r3, #22
1000a2fa:	d402      	bmi.n	1000a302 <_vfiprintf_r+0x2a>
1000a2fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000a2fe:	f7ff feb2 	bl	1000a066 <__retarget_lock_acquire_recursive>
1000a302:	89ab      	ldrh	r3, [r5, #12]
1000a304:	071b      	lsls	r3, r3, #28
1000a306:	d501      	bpl.n	1000a30c <_vfiprintf_r+0x34>
1000a308:	692b      	ldr	r3, [r5, #16]
1000a30a:	b99b      	cbnz	r3, 1000a334 <_vfiprintf_r+0x5c>
1000a30c:	4629      	mov	r1, r5
1000a30e:	4630      	mov	r0, r6
1000a310:	f000 fb72 	bl	1000a9f8 <__swsetup_r>
1000a314:	b170      	cbz	r0, 1000a334 <_vfiprintf_r+0x5c>
1000a316:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000a318:	07dc      	lsls	r4, r3, #31
1000a31a:	d504      	bpl.n	1000a326 <_vfiprintf_r+0x4e>
1000a31c:	f04f 30ff 	mov.w	r0, #4294967295
1000a320:	b01d      	add	sp, #116	@ 0x74
1000a322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000a326:	89ab      	ldrh	r3, [r5, #12]
1000a328:	0598      	lsls	r0, r3, #22
1000a32a:	d4f7      	bmi.n	1000a31c <_vfiprintf_r+0x44>
1000a32c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000a32e:	f7ff fe9b 	bl	1000a068 <__retarget_lock_release_recursive>
1000a332:	e7f3      	b.n	1000a31c <_vfiprintf_r+0x44>
1000a334:	2300      	movs	r3, #0
1000a336:	9309      	str	r3, [sp, #36]	@ 0x24
1000a338:	2320      	movs	r3, #32
1000a33a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
1000a33e:	f8cd 800c 	str.w	r8, [sp, #12]
1000a342:	2330      	movs	r3, #48	@ 0x30
1000a344:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 1000a4f4 <_vfiprintf_r+0x21c>
1000a348:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
1000a34c:	f04f 0901 	mov.w	r9, #1
1000a350:	4623      	mov	r3, r4
1000a352:	469a      	mov	sl, r3
1000a354:	f813 2b01 	ldrb.w	r2, [r3], #1
1000a358:	b10a      	cbz	r2, 1000a35e <_vfiprintf_r+0x86>
1000a35a:	2a25      	cmp	r2, #37	@ 0x25
1000a35c:	d1f9      	bne.n	1000a352 <_vfiprintf_r+0x7a>
1000a35e:	ebba 0b04 	subs.w	fp, sl, r4
1000a362:	d00b      	beq.n	1000a37c <_vfiprintf_r+0xa4>
1000a364:	465b      	mov	r3, fp
1000a366:	4622      	mov	r2, r4
1000a368:	4629      	mov	r1, r5
1000a36a:	4630      	mov	r0, r6
1000a36c:	f7ff ffa1 	bl	1000a2b2 <__sfputs_r>
1000a370:	3001      	adds	r0, #1
1000a372:	f000 80a7 	beq.w	1000a4c4 <_vfiprintf_r+0x1ec>
1000a376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000a378:	445a      	add	r2, fp
1000a37a:	9209      	str	r2, [sp, #36]	@ 0x24
1000a37c:	f89a 3000 	ldrb.w	r3, [sl]
1000a380:	2b00      	cmp	r3, #0
1000a382:	f000 809f 	beq.w	1000a4c4 <_vfiprintf_r+0x1ec>
1000a386:	2300      	movs	r3, #0
1000a388:	f04f 32ff 	mov.w	r2, #4294967295
1000a38c:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000a390:	f10a 0a01 	add.w	sl, sl, #1
1000a394:	9304      	str	r3, [sp, #16]
1000a396:	9307      	str	r3, [sp, #28]
1000a398:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
1000a39c:	931a      	str	r3, [sp, #104]	@ 0x68
1000a39e:	4654      	mov	r4, sl
1000a3a0:	2205      	movs	r2, #5
1000a3a2:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a3a6:	4853      	ldr	r0, [pc, #332]	@ (1000a4f4 <_vfiprintf_r+0x21c>)
1000a3a8:	f7f5 fe5a 	bl	10000060 <memchr>
1000a3ac:	9a04      	ldr	r2, [sp, #16]
1000a3ae:	b9d8      	cbnz	r0, 1000a3e8 <_vfiprintf_r+0x110>
1000a3b0:	06d1      	lsls	r1, r2, #27
1000a3b2:	bf44      	itt	mi
1000a3b4:	2320      	movmi	r3, #32
1000a3b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
1000a3ba:	0713      	lsls	r3, r2, #28
1000a3bc:	bf44      	itt	mi
1000a3be:	232b      	movmi	r3, #43	@ 0x2b
1000a3c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
1000a3c4:	f89a 3000 	ldrb.w	r3, [sl]
1000a3c8:	2b2a      	cmp	r3, #42	@ 0x2a
1000a3ca:	d015      	beq.n	1000a3f8 <_vfiprintf_r+0x120>
1000a3cc:	9a07      	ldr	r2, [sp, #28]
1000a3ce:	4654      	mov	r4, sl
1000a3d0:	2000      	movs	r0, #0
1000a3d2:	f04f 0c0a 	mov.w	ip, #10
1000a3d6:	4621      	mov	r1, r4
1000a3d8:	f811 3b01 	ldrb.w	r3, [r1], #1
1000a3dc:	3b30      	subs	r3, #48	@ 0x30
1000a3de:	2b09      	cmp	r3, #9
1000a3e0:	d94b      	bls.n	1000a47a <_vfiprintf_r+0x1a2>
1000a3e2:	b1b0      	cbz	r0, 1000a412 <_vfiprintf_r+0x13a>
1000a3e4:	9207      	str	r2, [sp, #28]
1000a3e6:	e014      	b.n	1000a412 <_vfiprintf_r+0x13a>
1000a3e8:	eba0 0308 	sub.w	r3, r0, r8
1000a3ec:	fa09 f303 	lsl.w	r3, r9, r3
1000a3f0:	4313      	orrs	r3, r2
1000a3f2:	9304      	str	r3, [sp, #16]
1000a3f4:	46a2      	mov	sl, r4
1000a3f6:	e7d2      	b.n	1000a39e <_vfiprintf_r+0xc6>
1000a3f8:	9b03      	ldr	r3, [sp, #12]
1000a3fa:	1d19      	adds	r1, r3, #4
1000a3fc:	681b      	ldr	r3, [r3, #0]
1000a3fe:	9103      	str	r1, [sp, #12]
1000a400:	2b00      	cmp	r3, #0
1000a402:	bfbb      	ittet	lt
1000a404:	425b      	neglt	r3, r3
1000a406:	f042 0202 	orrlt.w	r2, r2, #2
1000a40a:	9307      	strge	r3, [sp, #28]
1000a40c:	9307      	strlt	r3, [sp, #28]
1000a40e:	bfb8      	it	lt
1000a410:	9204      	strlt	r2, [sp, #16]
1000a412:	7823      	ldrb	r3, [r4, #0]
1000a414:	2b2e      	cmp	r3, #46	@ 0x2e
1000a416:	d10a      	bne.n	1000a42e <_vfiprintf_r+0x156>
1000a418:	7863      	ldrb	r3, [r4, #1]
1000a41a:	2b2a      	cmp	r3, #42	@ 0x2a
1000a41c:	d132      	bne.n	1000a484 <_vfiprintf_r+0x1ac>
1000a41e:	9b03      	ldr	r3, [sp, #12]
1000a420:	1d1a      	adds	r2, r3, #4
1000a422:	681b      	ldr	r3, [r3, #0]
1000a424:	9203      	str	r2, [sp, #12]
1000a426:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
1000a42a:	3402      	adds	r4, #2
1000a42c:	9305      	str	r3, [sp, #20]
1000a42e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 1000a504 <_vfiprintf_r+0x22c>
1000a432:	7821      	ldrb	r1, [r4, #0]
1000a434:	2203      	movs	r2, #3
1000a436:	4650      	mov	r0, sl
1000a438:	f7f5 fe12 	bl	10000060 <memchr>
1000a43c:	b138      	cbz	r0, 1000a44e <_vfiprintf_r+0x176>
1000a43e:	9b04      	ldr	r3, [sp, #16]
1000a440:	eba0 000a 	sub.w	r0, r0, sl
1000a444:	2240      	movs	r2, #64	@ 0x40
1000a446:	4082      	lsls	r2, r0
1000a448:	4313      	orrs	r3, r2
1000a44a:	3401      	adds	r4, #1
1000a44c:	9304      	str	r3, [sp, #16]
1000a44e:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a452:	4829      	ldr	r0, [pc, #164]	@ (1000a4f8 <_vfiprintf_r+0x220>)
1000a454:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
1000a458:	2206      	movs	r2, #6
1000a45a:	f7f5 fe01 	bl	10000060 <memchr>
1000a45e:	2800      	cmp	r0, #0
1000a460:	d03f      	beq.n	1000a4e2 <_vfiprintf_r+0x20a>
1000a462:	4b26      	ldr	r3, [pc, #152]	@ (1000a4fc <_vfiprintf_r+0x224>)
1000a464:	bb1b      	cbnz	r3, 1000a4ae <_vfiprintf_r+0x1d6>
1000a466:	9b03      	ldr	r3, [sp, #12]
1000a468:	3307      	adds	r3, #7
1000a46a:	f023 0307 	bic.w	r3, r3, #7
1000a46e:	3308      	adds	r3, #8
1000a470:	9303      	str	r3, [sp, #12]
1000a472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000a474:	443b      	add	r3, r7
1000a476:	9309      	str	r3, [sp, #36]	@ 0x24
1000a478:	e76a      	b.n	1000a350 <_vfiprintf_r+0x78>
1000a47a:	fb0c 3202 	mla	r2, ip, r2, r3
1000a47e:	460c      	mov	r4, r1
1000a480:	2001      	movs	r0, #1
1000a482:	e7a8      	b.n	1000a3d6 <_vfiprintf_r+0xfe>
1000a484:	2300      	movs	r3, #0
1000a486:	3401      	adds	r4, #1
1000a488:	9305      	str	r3, [sp, #20]
1000a48a:	4619      	mov	r1, r3
1000a48c:	f04f 0c0a 	mov.w	ip, #10
1000a490:	4620      	mov	r0, r4
1000a492:	f810 2b01 	ldrb.w	r2, [r0], #1
1000a496:	3a30      	subs	r2, #48	@ 0x30
1000a498:	2a09      	cmp	r2, #9
1000a49a:	d903      	bls.n	1000a4a4 <_vfiprintf_r+0x1cc>
1000a49c:	2b00      	cmp	r3, #0
1000a49e:	d0c6      	beq.n	1000a42e <_vfiprintf_r+0x156>
1000a4a0:	9105      	str	r1, [sp, #20]
1000a4a2:	e7c4      	b.n	1000a42e <_vfiprintf_r+0x156>
1000a4a4:	fb0c 2101 	mla	r1, ip, r1, r2
1000a4a8:	4604      	mov	r4, r0
1000a4aa:	2301      	movs	r3, #1
1000a4ac:	e7f0      	b.n	1000a490 <_vfiprintf_r+0x1b8>
1000a4ae:	ab03      	add	r3, sp, #12
1000a4b0:	9300      	str	r3, [sp, #0]
1000a4b2:	462a      	mov	r2, r5
1000a4b4:	4b12      	ldr	r3, [pc, #72]	@ (1000a500 <_vfiprintf_r+0x228>)
1000a4b6:	a904      	add	r1, sp, #16
1000a4b8:	4630      	mov	r0, r6
1000a4ba:	f3af 8000 	nop.w
1000a4be:	4607      	mov	r7, r0
1000a4c0:	1c78      	adds	r0, r7, #1
1000a4c2:	d1d6      	bne.n	1000a472 <_vfiprintf_r+0x19a>
1000a4c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000a4c6:	07d9      	lsls	r1, r3, #31
1000a4c8:	d405      	bmi.n	1000a4d6 <_vfiprintf_r+0x1fe>
1000a4ca:	89ab      	ldrh	r3, [r5, #12]
1000a4cc:	059a      	lsls	r2, r3, #22
1000a4ce:	d402      	bmi.n	1000a4d6 <_vfiprintf_r+0x1fe>
1000a4d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000a4d2:	f7ff fdc9 	bl	1000a068 <__retarget_lock_release_recursive>
1000a4d6:	89ab      	ldrh	r3, [r5, #12]
1000a4d8:	065b      	lsls	r3, r3, #25
1000a4da:	f53f af1f 	bmi.w	1000a31c <_vfiprintf_r+0x44>
1000a4de:	9809      	ldr	r0, [sp, #36]	@ 0x24
1000a4e0:	e71e      	b.n	1000a320 <_vfiprintf_r+0x48>
1000a4e2:	ab03      	add	r3, sp, #12
1000a4e4:	9300      	str	r3, [sp, #0]
1000a4e6:	462a      	mov	r2, r5
1000a4e8:	4b05      	ldr	r3, [pc, #20]	@ (1000a500 <_vfiprintf_r+0x228>)
1000a4ea:	a904      	add	r1, sp, #16
1000a4ec:	4630      	mov	r0, r6
1000a4ee:	f000 f879 	bl	1000a5e4 <_printf_i>
1000a4f2:	e7e4      	b.n	1000a4be <_vfiprintf_r+0x1e6>
1000a4f4:	1000b197 	.word	0x1000b197
1000a4f8:	1000b1a1 	.word	0x1000b1a1
1000a4fc:	00000000 	.word	0x00000000
1000a500:	1000a2b3 	.word	0x1000a2b3
1000a504:	1000b19d 	.word	0x1000b19d

1000a508 <_printf_common>:
1000a508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000a50c:	4616      	mov	r6, r2
1000a50e:	4698      	mov	r8, r3
1000a510:	688a      	ldr	r2, [r1, #8]
1000a512:	690b      	ldr	r3, [r1, #16]
1000a514:	f8dd 9020 	ldr.w	r9, [sp, #32]
1000a518:	4293      	cmp	r3, r2
1000a51a:	bfb8      	it	lt
1000a51c:	4613      	movlt	r3, r2
1000a51e:	6033      	str	r3, [r6, #0]
1000a520:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
1000a524:	4607      	mov	r7, r0
1000a526:	460c      	mov	r4, r1
1000a528:	b10a      	cbz	r2, 1000a52e <_printf_common+0x26>
1000a52a:	3301      	adds	r3, #1
1000a52c:	6033      	str	r3, [r6, #0]
1000a52e:	6823      	ldr	r3, [r4, #0]
1000a530:	0699      	lsls	r1, r3, #26
1000a532:	bf42      	ittt	mi
1000a534:	6833      	ldrmi	r3, [r6, #0]
1000a536:	3302      	addmi	r3, #2
1000a538:	6033      	strmi	r3, [r6, #0]
1000a53a:	6825      	ldr	r5, [r4, #0]
1000a53c:	f015 0506 	ands.w	r5, r5, #6
1000a540:	d106      	bne.n	1000a550 <_printf_common+0x48>
1000a542:	f104 0a19 	add.w	sl, r4, #25
1000a546:	68e3      	ldr	r3, [r4, #12]
1000a548:	6832      	ldr	r2, [r6, #0]
1000a54a:	1a9b      	subs	r3, r3, r2
1000a54c:	42ab      	cmp	r3, r5
1000a54e:	dc26      	bgt.n	1000a59e <_printf_common+0x96>
1000a550:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
1000a554:	6822      	ldr	r2, [r4, #0]
1000a556:	3b00      	subs	r3, #0
1000a558:	bf18      	it	ne
1000a55a:	2301      	movne	r3, #1
1000a55c:	0692      	lsls	r2, r2, #26
1000a55e:	d42b      	bmi.n	1000a5b8 <_printf_common+0xb0>
1000a560:	f104 0243 	add.w	r2, r4, #67	@ 0x43
1000a564:	4641      	mov	r1, r8
1000a566:	4638      	mov	r0, r7
1000a568:	47c8      	blx	r9
1000a56a:	3001      	adds	r0, #1
1000a56c:	d01e      	beq.n	1000a5ac <_printf_common+0xa4>
1000a56e:	6823      	ldr	r3, [r4, #0]
1000a570:	6922      	ldr	r2, [r4, #16]
1000a572:	f003 0306 	and.w	r3, r3, #6
1000a576:	2b04      	cmp	r3, #4
1000a578:	bf02      	ittt	eq
1000a57a:	68e5      	ldreq	r5, [r4, #12]
1000a57c:	6833      	ldreq	r3, [r6, #0]
1000a57e:	1aed      	subeq	r5, r5, r3
1000a580:	68a3      	ldr	r3, [r4, #8]
1000a582:	bf0c      	ite	eq
1000a584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1000a588:	2500      	movne	r5, #0
1000a58a:	4293      	cmp	r3, r2
1000a58c:	bfc4      	itt	gt
1000a58e:	1a9b      	subgt	r3, r3, r2
1000a590:	18ed      	addgt	r5, r5, r3
1000a592:	2600      	movs	r6, #0
1000a594:	341a      	adds	r4, #26
1000a596:	42b5      	cmp	r5, r6
1000a598:	d11a      	bne.n	1000a5d0 <_printf_common+0xc8>
1000a59a:	2000      	movs	r0, #0
1000a59c:	e008      	b.n	1000a5b0 <_printf_common+0xa8>
1000a59e:	2301      	movs	r3, #1
1000a5a0:	4652      	mov	r2, sl
1000a5a2:	4641      	mov	r1, r8
1000a5a4:	4638      	mov	r0, r7
1000a5a6:	47c8      	blx	r9
1000a5a8:	3001      	adds	r0, #1
1000a5aa:	d103      	bne.n	1000a5b4 <_printf_common+0xac>
1000a5ac:	f04f 30ff 	mov.w	r0, #4294967295
1000a5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000a5b4:	3501      	adds	r5, #1
1000a5b6:	e7c6      	b.n	1000a546 <_printf_common+0x3e>
1000a5b8:	18e1      	adds	r1, r4, r3
1000a5ba:	1c5a      	adds	r2, r3, #1
1000a5bc:	2030      	movs	r0, #48	@ 0x30
1000a5be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
1000a5c2:	4422      	add	r2, r4
1000a5c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
1000a5c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
1000a5cc:	3302      	adds	r3, #2
1000a5ce:	e7c7      	b.n	1000a560 <_printf_common+0x58>
1000a5d0:	2301      	movs	r3, #1
1000a5d2:	4622      	mov	r2, r4
1000a5d4:	4641      	mov	r1, r8
1000a5d6:	4638      	mov	r0, r7
1000a5d8:	47c8      	blx	r9
1000a5da:	3001      	adds	r0, #1
1000a5dc:	d0e6      	beq.n	1000a5ac <_printf_common+0xa4>
1000a5de:	3601      	adds	r6, #1
1000a5e0:	e7d9      	b.n	1000a596 <_printf_common+0x8e>
	...

1000a5e4 <_printf_i>:
1000a5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000a5e8:	7e0f      	ldrb	r7, [r1, #24]
1000a5ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1000a5ec:	2f78      	cmp	r7, #120	@ 0x78
1000a5ee:	4691      	mov	r9, r2
1000a5f0:	4680      	mov	r8, r0
1000a5f2:	460c      	mov	r4, r1
1000a5f4:	469a      	mov	sl, r3
1000a5f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
1000a5fa:	d807      	bhi.n	1000a60c <_printf_i+0x28>
1000a5fc:	2f62      	cmp	r7, #98	@ 0x62
1000a5fe:	d80a      	bhi.n	1000a616 <_printf_i+0x32>
1000a600:	2f00      	cmp	r7, #0
1000a602:	f000 80d2 	beq.w	1000a7aa <_printf_i+0x1c6>
1000a606:	2f58      	cmp	r7, #88	@ 0x58
1000a608:	f000 80b9 	beq.w	1000a77e <_printf_i+0x19a>
1000a60c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
1000a610:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
1000a614:	e03a      	b.n	1000a68c <_printf_i+0xa8>
1000a616:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
1000a61a:	2b15      	cmp	r3, #21
1000a61c:	d8f6      	bhi.n	1000a60c <_printf_i+0x28>
1000a61e:	a101      	add	r1, pc, #4	@ (adr r1, 1000a624 <_printf_i+0x40>)
1000a620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1000a624:	1000a67d 	.word	0x1000a67d
1000a628:	1000a691 	.word	0x1000a691
1000a62c:	1000a60d 	.word	0x1000a60d
1000a630:	1000a60d 	.word	0x1000a60d
1000a634:	1000a60d 	.word	0x1000a60d
1000a638:	1000a60d 	.word	0x1000a60d
1000a63c:	1000a691 	.word	0x1000a691
1000a640:	1000a60d 	.word	0x1000a60d
1000a644:	1000a60d 	.word	0x1000a60d
1000a648:	1000a60d 	.word	0x1000a60d
1000a64c:	1000a60d 	.word	0x1000a60d
1000a650:	1000a791 	.word	0x1000a791
1000a654:	1000a6bb 	.word	0x1000a6bb
1000a658:	1000a74b 	.word	0x1000a74b
1000a65c:	1000a60d 	.word	0x1000a60d
1000a660:	1000a60d 	.word	0x1000a60d
1000a664:	1000a7b3 	.word	0x1000a7b3
1000a668:	1000a60d 	.word	0x1000a60d
1000a66c:	1000a6bb 	.word	0x1000a6bb
1000a670:	1000a60d 	.word	0x1000a60d
1000a674:	1000a60d 	.word	0x1000a60d
1000a678:	1000a753 	.word	0x1000a753
1000a67c:	6833      	ldr	r3, [r6, #0]
1000a67e:	1d1a      	adds	r2, r3, #4
1000a680:	681b      	ldr	r3, [r3, #0]
1000a682:	6032      	str	r2, [r6, #0]
1000a684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
1000a688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
1000a68c:	2301      	movs	r3, #1
1000a68e:	e09d      	b.n	1000a7cc <_printf_i+0x1e8>
1000a690:	6833      	ldr	r3, [r6, #0]
1000a692:	6820      	ldr	r0, [r4, #0]
1000a694:	1d19      	adds	r1, r3, #4
1000a696:	6031      	str	r1, [r6, #0]
1000a698:	0606      	lsls	r6, r0, #24
1000a69a:	d501      	bpl.n	1000a6a0 <_printf_i+0xbc>
1000a69c:	681d      	ldr	r5, [r3, #0]
1000a69e:	e003      	b.n	1000a6a8 <_printf_i+0xc4>
1000a6a0:	0645      	lsls	r5, r0, #25
1000a6a2:	d5fb      	bpl.n	1000a69c <_printf_i+0xb8>
1000a6a4:	f9b3 5000 	ldrsh.w	r5, [r3]
1000a6a8:	2d00      	cmp	r5, #0
1000a6aa:	da03      	bge.n	1000a6b4 <_printf_i+0xd0>
1000a6ac:	232d      	movs	r3, #45	@ 0x2d
1000a6ae:	426d      	negs	r5, r5
1000a6b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000a6b4:	4859      	ldr	r0, [pc, #356]	@ (1000a81c <_printf_i+0x238>)
1000a6b6:	230a      	movs	r3, #10
1000a6b8:	e011      	b.n	1000a6de <_printf_i+0xfa>
1000a6ba:	6821      	ldr	r1, [r4, #0]
1000a6bc:	6833      	ldr	r3, [r6, #0]
1000a6be:	0608      	lsls	r0, r1, #24
1000a6c0:	f853 5b04 	ldr.w	r5, [r3], #4
1000a6c4:	d402      	bmi.n	1000a6cc <_printf_i+0xe8>
1000a6c6:	0649      	lsls	r1, r1, #25
1000a6c8:	bf48      	it	mi
1000a6ca:	b2ad      	uxthmi	r5, r5
1000a6cc:	2f6f      	cmp	r7, #111	@ 0x6f
1000a6ce:	4853      	ldr	r0, [pc, #332]	@ (1000a81c <_printf_i+0x238>)
1000a6d0:	6033      	str	r3, [r6, #0]
1000a6d2:	bf14      	ite	ne
1000a6d4:	230a      	movne	r3, #10
1000a6d6:	2308      	moveq	r3, #8
1000a6d8:	2100      	movs	r1, #0
1000a6da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
1000a6de:	6866      	ldr	r6, [r4, #4]
1000a6e0:	60a6      	str	r6, [r4, #8]
1000a6e2:	2e00      	cmp	r6, #0
1000a6e4:	bfa2      	ittt	ge
1000a6e6:	6821      	ldrge	r1, [r4, #0]
1000a6e8:	f021 0104 	bicge.w	r1, r1, #4
1000a6ec:	6021      	strge	r1, [r4, #0]
1000a6ee:	b90d      	cbnz	r5, 1000a6f4 <_printf_i+0x110>
1000a6f0:	2e00      	cmp	r6, #0
1000a6f2:	d04b      	beq.n	1000a78c <_printf_i+0x1a8>
1000a6f4:	4616      	mov	r6, r2
1000a6f6:	fbb5 f1f3 	udiv	r1, r5, r3
1000a6fa:	fb03 5711 	mls	r7, r3, r1, r5
1000a6fe:	5dc7      	ldrb	r7, [r0, r7]
1000a700:	f806 7d01 	strb.w	r7, [r6, #-1]!
1000a704:	462f      	mov	r7, r5
1000a706:	42bb      	cmp	r3, r7
1000a708:	460d      	mov	r5, r1
1000a70a:	d9f4      	bls.n	1000a6f6 <_printf_i+0x112>
1000a70c:	2b08      	cmp	r3, #8
1000a70e:	d10b      	bne.n	1000a728 <_printf_i+0x144>
1000a710:	6823      	ldr	r3, [r4, #0]
1000a712:	07df      	lsls	r7, r3, #31
1000a714:	d508      	bpl.n	1000a728 <_printf_i+0x144>
1000a716:	6923      	ldr	r3, [r4, #16]
1000a718:	6861      	ldr	r1, [r4, #4]
1000a71a:	4299      	cmp	r1, r3
1000a71c:	bfde      	ittt	le
1000a71e:	2330      	movle	r3, #48	@ 0x30
1000a720:	f806 3c01 	strble.w	r3, [r6, #-1]
1000a724:	f106 36ff 	addle.w	r6, r6, #4294967295
1000a728:	1b92      	subs	r2, r2, r6
1000a72a:	6122      	str	r2, [r4, #16]
1000a72c:	f8cd a000 	str.w	sl, [sp]
1000a730:	464b      	mov	r3, r9
1000a732:	aa03      	add	r2, sp, #12
1000a734:	4621      	mov	r1, r4
1000a736:	4640      	mov	r0, r8
1000a738:	f7ff fee6 	bl	1000a508 <_printf_common>
1000a73c:	3001      	adds	r0, #1
1000a73e:	d14a      	bne.n	1000a7d6 <_printf_i+0x1f2>
1000a740:	f04f 30ff 	mov.w	r0, #4294967295
1000a744:	b004      	add	sp, #16
1000a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000a74a:	6823      	ldr	r3, [r4, #0]
1000a74c:	f043 0320 	orr.w	r3, r3, #32
1000a750:	6023      	str	r3, [r4, #0]
1000a752:	4833      	ldr	r0, [pc, #204]	@ (1000a820 <_printf_i+0x23c>)
1000a754:	2778      	movs	r7, #120	@ 0x78
1000a756:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
1000a75a:	6823      	ldr	r3, [r4, #0]
1000a75c:	6831      	ldr	r1, [r6, #0]
1000a75e:	061f      	lsls	r7, r3, #24
1000a760:	f851 5b04 	ldr.w	r5, [r1], #4
1000a764:	d402      	bmi.n	1000a76c <_printf_i+0x188>
1000a766:	065f      	lsls	r7, r3, #25
1000a768:	bf48      	it	mi
1000a76a:	b2ad      	uxthmi	r5, r5
1000a76c:	6031      	str	r1, [r6, #0]
1000a76e:	07d9      	lsls	r1, r3, #31
1000a770:	bf44      	itt	mi
1000a772:	f043 0320 	orrmi.w	r3, r3, #32
1000a776:	6023      	strmi	r3, [r4, #0]
1000a778:	b11d      	cbz	r5, 1000a782 <_printf_i+0x19e>
1000a77a:	2310      	movs	r3, #16
1000a77c:	e7ac      	b.n	1000a6d8 <_printf_i+0xf4>
1000a77e:	4827      	ldr	r0, [pc, #156]	@ (1000a81c <_printf_i+0x238>)
1000a780:	e7e9      	b.n	1000a756 <_printf_i+0x172>
1000a782:	6823      	ldr	r3, [r4, #0]
1000a784:	f023 0320 	bic.w	r3, r3, #32
1000a788:	6023      	str	r3, [r4, #0]
1000a78a:	e7f6      	b.n	1000a77a <_printf_i+0x196>
1000a78c:	4616      	mov	r6, r2
1000a78e:	e7bd      	b.n	1000a70c <_printf_i+0x128>
1000a790:	6833      	ldr	r3, [r6, #0]
1000a792:	6825      	ldr	r5, [r4, #0]
1000a794:	6961      	ldr	r1, [r4, #20]
1000a796:	1d18      	adds	r0, r3, #4
1000a798:	6030      	str	r0, [r6, #0]
1000a79a:	062e      	lsls	r6, r5, #24
1000a79c:	681b      	ldr	r3, [r3, #0]
1000a79e:	d501      	bpl.n	1000a7a4 <_printf_i+0x1c0>
1000a7a0:	6019      	str	r1, [r3, #0]
1000a7a2:	e002      	b.n	1000a7aa <_printf_i+0x1c6>
1000a7a4:	0668      	lsls	r0, r5, #25
1000a7a6:	d5fb      	bpl.n	1000a7a0 <_printf_i+0x1bc>
1000a7a8:	8019      	strh	r1, [r3, #0]
1000a7aa:	2300      	movs	r3, #0
1000a7ac:	6123      	str	r3, [r4, #16]
1000a7ae:	4616      	mov	r6, r2
1000a7b0:	e7bc      	b.n	1000a72c <_printf_i+0x148>
1000a7b2:	6833      	ldr	r3, [r6, #0]
1000a7b4:	1d1a      	adds	r2, r3, #4
1000a7b6:	6032      	str	r2, [r6, #0]
1000a7b8:	681e      	ldr	r6, [r3, #0]
1000a7ba:	6862      	ldr	r2, [r4, #4]
1000a7bc:	2100      	movs	r1, #0
1000a7be:	4630      	mov	r0, r6
1000a7c0:	f7f5 fc4e 	bl	10000060 <memchr>
1000a7c4:	b108      	cbz	r0, 1000a7ca <_printf_i+0x1e6>
1000a7c6:	1b80      	subs	r0, r0, r6
1000a7c8:	6060      	str	r0, [r4, #4]
1000a7ca:	6863      	ldr	r3, [r4, #4]
1000a7cc:	6123      	str	r3, [r4, #16]
1000a7ce:	2300      	movs	r3, #0
1000a7d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000a7d4:	e7aa      	b.n	1000a72c <_printf_i+0x148>
1000a7d6:	6923      	ldr	r3, [r4, #16]
1000a7d8:	4632      	mov	r2, r6
1000a7da:	4649      	mov	r1, r9
1000a7dc:	4640      	mov	r0, r8
1000a7de:	47d0      	blx	sl
1000a7e0:	3001      	adds	r0, #1
1000a7e2:	d0ad      	beq.n	1000a740 <_printf_i+0x15c>
1000a7e4:	6823      	ldr	r3, [r4, #0]
1000a7e6:	079b      	lsls	r3, r3, #30
1000a7e8:	d413      	bmi.n	1000a812 <_printf_i+0x22e>
1000a7ea:	68e0      	ldr	r0, [r4, #12]
1000a7ec:	9b03      	ldr	r3, [sp, #12]
1000a7ee:	4298      	cmp	r0, r3
1000a7f0:	bfb8      	it	lt
1000a7f2:	4618      	movlt	r0, r3
1000a7f4:	e7a6      	b.n	1000a744 <_printf_i+0x160>
1000a7f6:	2301      	movs	r3, #1
1000a7f8:	4632      	mov	r2, r6
1000a7fa:	4649      	mov	r1, r9
1000a7fc:	4640      	mov	r0, r8
1000a7fe:	47d0      	blx	sl
1000a800:	3001      	adds	r0, #1
1000a802:	d09d      	beq.n	1000a740 <_printf_i+0x15c>
1000a804:	3501      	adds	r5, #1
1000a806:	68e3      	ldr	r3, [r4, #12]
1000a808:	9903      	ldr	r1, [sp, #12]
1000a80a:	1a5b      	subs	r3, r3, r1
1000a80c:	42ab      	cmp	r3, r5
1000a80e:	dcf2      	bgt.n	1000a7f6 <_printf_i+0x212>
1000a810:	e7eb      	b.n	1000a7ea <_printf_i+0x206>
1000a812:	2500      	movs	r5, #0
1000a814:	f104 0619 	add.w	r6, r4, #25
1000a818:	e7f5      	b.n	1000a806 <_printf_i+0x222>
1000a81a:	bf00      	nop
1000a81c:	1000b1a8 	.word	0x1000b1a8
1000a820:	1000b1b9 	.word	0x1000b1b9

1000a824 <__sflush_r>:
1000a824:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1000a828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000a82c:	0716      	lsls	r6, r2, #28
1000a82e:	4605      	mov	r5, r0
1000a830:	460c      	mov	r4, r1
1000a832:	d454      	bmi.n	1000a8de <__sflush_r+0xba>
1000a834:	684b      	ldr	r3, [r1, #4]
1000a836:	2b00      	cmp	r3, #0
1000a838:	dc02      	bgt.n	1000a840 <__sflush_r+0x1c>
1000a83a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
1000a83c:	2b00      	cmp	r3, #0
1000a83e:	dd48      	ble.n	1000a8d2 <__sflush_r+0xae>
1000a840:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000a842:	2e00      	cmp	r6, #0
1000a844:	d045      	beq.n	1000a8d2 <__sflush_r+0xae>
1000a846:	2300      	movs	r3, #0
1000a848:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
1000a84c:	682f      	ldr	r7, [r5, #0]
1000a84e:	6a21      	ldr	r1, [r4, #32]
1000a850:	602b      	str	r3, [r5, #0]
1000a852:	d030      	beq.n	1000a8b6 <__sflush_r+0x92>
1000a854:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1000a856:	89a3      	ldrh	r3, [r4, #12]
1000a858:	0759      	lsls	r1, r3, #29
1000a85a:	d505      	bpl.n	1000a868 <__sflush_r+0x44>
1000a85c:	6863      	ldr	r3, [r4, #4]
1000a85e:	1ad2      	subs	r2, r2, r3
1000a860:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1000a862:	b10b      	cbz	r3, 1000a868 <__sflush_r+0x44>
1000a864:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1000a866:	1ad2      	subs	r2, r2, r3
1000a868:	2300      	movs	r3, #0
1000a86a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000a86c:	6a21      	ldr	r1, [r4, #32]
1000a86e:	4628      	mov	r0, r5
1000a870:	47b0      	blx	r6
1000a872:	1c43      	adds	r3, r0, #1
1000a874:	89a3      	ldrh	r3, [r4, #12]
1000a876:	d106      	bne.n	1000a886 <__sflush_r+0x62>
1000a878:	6829      	ldr	r1, [r5, #0]
1000a87a:	291d      	cmp	r1, #29
1000a87c:	d82b      	bhi.n	1000a8d6 <__sflush_r+0xb2>
1000a87e:	4a2a      	ldr	r2, [pc, #168]	@ (1000a928 <__sflush_r+0x104>)
1000a880:	410a      	asrs	r2, r1
1000a882:	07d6      	lsls	r6, r2, #31
1000a884:	d427      	bmi.n	1000a8d6 <__sflush_r+0xb2>
1000a886:	2200      	movs	r2, #0
1000a888:	6062      	str	r2, [r4, #4]
1000a88a:	04d9      	lsls	r1, r3, #19
1000a88c:	6922      	ldr	r2, [r4, #16]
1000a88e:	6022      	str	r2, [r4, #0]
1000a890:	d504      	bpl.n	1000a89c <__sflush_r+0x78>
1000a892:	1c42      	adds	r2, r0, #1
1000a894:	d101      	bne.n	1000a89a <__sflush_r+0x76>
1000a896:	682b      	ldr	r3, [r5, #0]
1000a898:	b903      	cbnz	r3, 1000a89c <__sflush_r+0x78>
1000a89a:	6560      	str	r0, [r4, #84]	@ 0x54
1000a89c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1000a89e:	602f      	str	r7, [r5, #0]
1000a8a0:	b1b9      	cbz	r1, 1000a8d2 <__sflush_r+0xae>
1000a8a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000a8a6:	4299      	cmp	r1, r3
1000a8a8:	d002      	beq.n	1000a8b0 <__sflush_r+0x8c>
1000a8aa:	4628      	mov	r0, r5
1000a8ac:	f7ff fbf2 	bl	1000a094 <_free_r>
1000a8b0:	2300      	movs	r3, #0
1000a8b2:	6363      	str	r3, [r4, #52]	@ 0x34
1000a8b4:	e00d      	b.n	1000a8d2 <__sflush_r+0xae>
1000a8b6:	2301      	movs	r3, #1
1000a8b8:	4628      	mov	r0, r5
1000a8ba:	47b0      	blx	r6
1000a8bc:	4602      	mov	r2, r0
1000a8be:	1c50      	adds	r0, r2, #1
1000a8c0:	d1c9      	bne.n	1000a856 <__sflush_r+0x32>
1000a8c2:	682b      	ldr	r3, [r5, #0]
1000a8c4:	2b00      	cmp	r3, #0
1000a8c6:	d0c6      	beq.n	1000a856 <__sflush_r+0x32>
1000a8c8:	2b1d      	cmp	r3, #29
1000a8ca:	d001      	beq.n	1000a8d0 <__sflush_r+0xac>
1000a8cc:	2b16      	cmp	r3, #22
1000a8ce:	d11e      	bne.n	1000a90e <__sflush_r+0xea>
1000a8d0:	602f      	str	r7, [r5, #0]
1000a8d2:	2000      	movs	r0, #0
1000a8d4:	e022      	b.n	1000a91c <__sflush_r+0xf8>
1000a8d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000a8da:	b21b      	sxth	r3, r3
1000a8dc:	e01b      	b.n	1000a916 <__sflush_r+0xf2>
1000a8de:	690f      	ldr	r7, [r1, #16]
1000a8e0:	2f00      	cmp	r7, #0
1000a8e2:	d0f6      	beq.n	1000a8d2 <__sflush_r+0xae>
1000a8e4:	0793      	lsls	r3, r2, #30
1000a8e6:	680e      	ldr	r6, [r1, #0]
1000a8e8:	bf08      	it	eq
1000a8ea:	694b      	ldreq	r3, [r1, #20]
1000a8ec:	600f      	str	r7, [r1, #0]
1000a8ee:	bf18      	it	ne
1000a8f0:	2300      	movne	r3, #0
1000a8f2:	eba6 0807 	sub.w	r8, r6, r7
1000a8f6:	608b      	str	r3, [r1, #8]
1000a8f8:	f1b8 0f00 	cmp.w	r8, #0
1000a8fc:	dde9      	ble.n	1000a8d2 <__sflush_r+0xae>
1000a8fe:	6a21      	ldr	r1, [r4, #32]
1000a900:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
1000a902:	4643      	mov	r3, r8
1000a904:	463a      	mov	r2, r7
1000a906:	4628      	mov	r0, r5
1000a908:	47b0      	blx	r6
1000a90a:	2800      	cmp	r0, #0
1000a90c:	dc08      	bgt.n	1000a920 <__sflush_r+0xfc>
1000a90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000a916:	81a3      	strh	r3, [r4, #12]
1000a918:	f04f 30ff 	mov.w	r0, #4294967295
1000a91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000a920:	4407      	add	r7, r0
1000a922:	eba8 0800 	sub.w	r8, r8, r0
1000a926:	e7e7      	b.n	1000a8f8 <__sflush_r+0xd4>
1000a928:	dfbffffe 	.word	0xdfbffffe

1000a92c <_fflush_r>:
1000a92c:	b538      	push	{r3, r4, r5, lr}
1000a92e:	690b      	ldr	r3, [r1, #16]
1000a930:	4605      	mov	r5, r0
1000a932:	460c      	mov	r4, r1
1000a934:	b913      	cbnz	r3, 1000a93c <_fflush_r+0x10>
1000a936:	2500      	movs	r5, #0
1000a938:	4628      	mov	r0, r5
1000a93a:	bd38      	pop	{r3, r4, r5, pc}
1000a93c:	b118      	cbz	r0, 1000a946 <_fflush_r+0x1a>
1000a93e:	6a03      	ldr	r3, [r0, #32]
1000a940:	b90b      	cbnz	r3, 1000a946 <_fflush_r+0x1a>
1000a942:	f7ff fa67 	bl	10009e14 <__sinit>
1000a946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a94a:	2b00      	cmp	r3, #0
1000a94c:	d0f3      	beq.n	1000a936 <_fflush_r+0xa>
1000a94e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1000a950:	07d0      	lsls	r0, r2, #31
1000a952:	d404      	bmi.n	1000a95e <_fflush_r+0x32>
1000a954:	0599      	lsls	r1, r3, #22
1000a956:	d402      	bmi.n	1000a95e <_fflush_r+0x32>
1000a958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000a95a:	f7ff fb84 	bl	1000a066 <__retarget_lock_acquire_recursive>
1000a95e:	4628      	mov	r0, r5
1000a960:	4621      	mov	r1, r4
1000a962:	f7ff ff5f 	bl	1000a824 <__sflush_r>
1000a966:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1000a968:	07da      	lsls	r2, r3, #31
1000a96a:	4605      	mov	r5, r0
1000a96c:	d4e4      	bmi.n	1000a938 <_fflush_r+0xc>
1000a96e:	89a3      	ldrh	r3, [r4, #12]
1000a970:	059b      	lsls	r3, r3, #22
1000a972:	d4e1      	bmi.n	1000a938 <_fflush_r+0xc>
1000a974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000a976:	f7ff fb77 	bl	1000a068 <__retarget_lock_release_recursive>
1000a97a:	e7dd      	b.n	1000a938 <_fflush_r+0xc>

1000a97c <__swbuf_r>:
1000a97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a97e:	460e      	mov	r6, r1
1000a980:	4614      	mov	r4, r2
1000a982:	4605      	mov	r5, r0
1000a984:	b118      	cbz	r0, 1000a98e <__swbuf_r+0x12>
1000a986:	6a03      	ldr	r3, [r0, #32]
1000a988:	b90b      	cbnz	r3, 1000a98e <__swbuf_r+0x12>
1000a98a:	f7ff fa43 	bl	10009e14 <__sinit>
1000a98e:	69a3      	ldr	r3, [r4, #24]
1000a990:	60a3      	str	r3, [r4, #8]
1000a992:	89a3      	ldrh	r3, [r4, #12]
1000a994:	071a      	lsls	r2, r3, #28
1000a996:	d501      	bpl.n	1000a99c <__swbuf_r+0x20>
1000a998:	6923      	ldr	r3, [r4, #16]
1000a99a:	b943      	cbnz	r3, 1000a9ae <__swbuf_r+0x32>
1000a99c:	4621      	mov	r1, r4
1000a99e:	4628      	mov	r0, r5
1000a9a0:	f000 f82a 	bl	1000a9f8 <__swsetup_r>
1000a9a4:	b118      	cbz	r0, 1000a9ae <__swbuf_r+0x32>
1000a9a6:	f04f 37ff 	mov.w	r7, #4294967295
1000a9aa:	4638      	mov	r0, r7
1000a9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a9ae:	6823      	ldr	r3, [r4, #0]
1000a9b0:	6922      	ldr	r2, [r4, #16]
1000a9b2:	1a98      	subs	r0, r3, r2
1000a9b4:	6963      	ldr	r3, [r4, #20]
1000a9b6:	b2f6      	uxtb	r6, r6
1000a9b8:	4283      	cmp	r3, r0
1000a9ba:	4637      	mov	r7, r6
1000a9bc:	dc05      	bgt.n	1000a9ca <__swbuf_r+0x4e>
1000a9be:	4621      	mov	r1, r4
1000a9c0:	4628      	mov	r0, r5
1000a9c2:	f7ff ffb3 	bl	1000a92c <_fflush_r>
1000a9c6:	2800      	cmp	r0, #0
1000a9c8:	d1ed      	bne.n	1000a9a6 <__swbuf_r+0x2a>
1000a9ca:	68a3      	ldr	r3, [r4, #8]
1000a9cc:	3b01      	subs	r3, #1
1000a9ce:	60a3      	str	r3, [r4, #8]
1000a9d0:	6823      	ldr	r3, [r4, #0]
1000a9d2:	1c5a      	adds	r2, r3, #1
1000a9d4:	6022      	str	r2, [r4, #0]
1000a9d6:	701e      	strb	r6, [r3, #0]
1000a9d8:	6962      	ldr	r2, [r4, #20]
1000a9da:	1c43      	adds	r3, r0, #1
1000a9dc:	429a      	cmp	r2, r3
1000a9de:	d004      	beq.n	1000a9ea <__swbuf_r+0x6e>
1000a9e0:	89a3      	ldrh	r3, [r4, #12]
1000a9e2:	07db      	lsls	r3, r3, #31
1000a9e4:	d5e1      	bpl.n	1000a9aa <__swbuf_r+0x2e>
1000a9e6:	2e0a      	cmp	r6, #10
1000a9e8:	d1df      	bne.n	1000a9aa <__swbuf_r+0x2e>
1000a9ea:	4621      	mov	r1, r4
1000a9ec:	4628      	mov	r0, r5
1000a9ee:	f7ff ff9d 	bl	1000a92c <_fflush_r>
1000a9f2:	2800      	cmp	r0, #0
1000a9f4:	d0d9      	beq.n	1000a9aa <__swbuf_r+0x2e>
1000a9f6:	e7d6      	b.n	1000a9a6 <__swbuf_r+0x2a>

1000a9f8 <__swsetup_r>:
1000a9f8:	b538      	push	{r3, r4, r5, lr}
1000a9fa:	4b29      	ldr	r3, [pc, #164]	@ (1000aaa0 <__swsetup_r+0xa8>)
1000a9fc:	4605      	mov	r5, r0
1000a9fe:	6818      	ldr	r0, [r3, #0]
1000aa00:	460c      	mov	r4, r1
1000aa02:	b118      	cbz	r0, 1000aa0c <__swsetup_r+0x14>
1000aa04:	6a03      	ldr	r3, [r0, #32]
1000aa06:	b90b      	cbnz	r3, 1000aa0c <__swsetup_r+0x14>
1000aa08:	f7ff fa04 	bl	10009e14 <__sinit>
1000aa0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000aa10:	0719      	lsls	r1, r3, #28
1000aa12:	d422      	bmi.n	1000aa5a <__swsetup_r+0x62>
1000aa14:	06da      	lsls	r2, r3, #27
1000aa16:	d407      	bmi.n	1000aa28 <__swsetup_r+0x30>
1000aa18:	2209      	movs	r2, #9
1000aa1a:	602a      	str	r2, [r5, #0]
1000aa1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000aa20:	81a3      	strh	r3, [r4, #12]
1000aa22:	f04f 30ff 	mov.w	r0, #4294967295
1000aa26:	e033      	b.n	1000aa90 <__swsetup_r+0x98>
1000aa28:	0758      	lsls	r0, r3, #29
1000aa2a:	d512      	bpl.n	1000aa52 <__swsetup_r+0x5a>
1000aa2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1000aa2e:	b141      	cbz	r1, 1000aa42 <__swsetup_r+0x4a>
1000aa30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000aa34:	4299      	cmp	r1, r3
1000aa36:	d002      	beq.n	1000aa3e <__swsetup_r+0x46>
1000aa38:	4628      	mov	r0, r5
1000aa3a:	f7ff fb2b 	bl	1000a094 <_free_r>
1000aa3e:	2300      	movs	r3, #0
1000aa40:	6363      	str	r3, [r4, #52]	@ 0x34
1000aa42:	89a3      	ldrh	r3, [r4, #12]
1000aa44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
1000aa48:	81a3      	strh	r3, [r4, #12]
1000aa4a:	2300      	movs	r3, #0
1000aa4c:	6063      	str	r3, [r4, #4]
1000aa4e:	6923      	ldr	r3, [r4, #16]
1000aa50:	6023      	str	r3, [r4, #0]
1000aa52:	89a3      	ldrh	r3, [r4, #12]
1000aa54:	f043 0308 	orr.w	r3, r3, #8
1000aa58:	81a3      	strh	r3, [r4, #12]
1000aa5a:	6923      	ldr	r3, [r4, #16]
1000aa5c:	b94b      	cbnz	r3, 1000aa72 <__swsetup_r+0x7a>
1000aa5e:	89a3      	ldrh	r3, [r4, #12]
1000aa60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
1000aa64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
1000aa68:	d003      	beq.n	1000aa72 <__swsetup_r+0x7a>
1000aa6a:	4621      	mov	r1, r4
1000aa6c:	4628      	mov	r0, r5
1000aa6e:	f000 f893 	bl	1000ab98 <__smakebuf_r>
1000aa72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000aa76:	f013 0201 	ands.w	r2, r3, #1
1000aa7a:	d00a      	beq.n	1000aa92 <__swsetup_r+0x9a>
1000aa7c:	2200      	movs	r2, #0
1000aa7e:	60a2      	str	r2, [r4, #8]
1000aa80:	6962      	ldr	r2, [r4, #20]
1000aa82:	4252      	negs	r2, r2
1000aa84:	61a2      	str	r2, [r4, #24]
1000aa86:	6922      	ldr	r2, [r4, #16]
1000aa88:	b942      	cbnz	r2, 1000aa9c <__swsetup_r+0xa4>
1000aa8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
1000aa8e:	d1c5      	bne.n	1000aa1c <__swsetup_r+0x24>
1000aa90:	bd38      	pop	{r3, r4, r5, pc}
1000aa92:	0799      	lsls	r1, r3, #30
1000aa94:	bf58      	it	pl
1000aa96:	6962      	ldrpl	r2, [r4, #20]
1000aa98:	60a2      	str	r2, [r4, #8]
1000aa9a:	e7f4      	b.n	1000aa86 <__swsetup_r+0x8e>
1000aa9c:	2000      	movs	r0, #0
1000aa9e:	e7f7      	b.n	1000aa90 <__swsetup_r+0x98>
1000aaa0:	100200d4 	.word	0x100200d4

1000aaa4 <_raise_r>:
1000aaa4:	291f      	cmp	r1, #31
1000aaa6:	b538      	push	{r3, r4, r5, lr}
1000aaa8:	4605      	mov	r5, r0
1000aaaa:	460c      	mov	r4, r1
1000aaac:	d904      	bls.n	1000aab8 <_raise_r+0x14>
1000aaae:	2316      	movs	r3, #22
1000aab0:	6003      	str	r3, [r0, #0]
1000aab2:	f04f 30ff 	mov.w	r0, #4294967295
1000aab6:	bd38      	pop	{r3, r4, r5, pc}
1000aab8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
1000aaba:	b112      	cbz	r2, 1000aac2 <_raise_r+0x1e>
1000aabc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1000aac0:	b94b      	cbnz	r3, 1000aad6 <_raise_r+0x32>
1000aac2:	4628      	mov	r0, r5
1000aac4:	f000 f830 	bl	1000ab28 <_getpid_r>
1000aac8:	4622      	mov	r2, r4
1000aaca:	4601      	mov	r1, r0
1000aacc:	4628      	mov	r0, r5
1000aace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000aad2:	f000 b817 	b.w	1000ab04 <_kill_r>
1000aad6:	2b01      	cmp	r3, #1
1000aad8:	d00a      	beq.n	1000aaf0 <_raise_r+0x4c>
1000aada:	1c59      	adds	r1, r3, #1
1000aadc:	d103      	bne.n	1000aae6 <_raise_r+0x42>
1000aade:	2316      	movs	r3, #22
1000aae0:	6003      	str	r3, [r0, #0]
1000aae2:	2001      	movs	r0, #1
1000aae4:	e7e7      	b.n	1000aab6 <_raise_r+0x12>
1000aae6:	2100      	movs	r1, #0
1000aae8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
1000aaec:	4620      	mov	r0, r4
1000aaee:	4798      	blx	r3
1000aaf0:	2000      	movs	r0, #0
1000aaf2:	e7e0      	b.n	1000aab6 <_raise_r+0x12>

1000aaf4 <raise>:
1000aaf4:	4b02      	ldr	r3, [pc, #8]	@ (1000ab00 <raise+0xc>)
1000aaf6:	4601      	mov	r1, r0
1000aaf8:	6818      	ldr	r0, [r3, #0]
1000aafa:	f7ff bfd3 	b.w	1000aaa4 <_raise_r>
1000aafe:	bf00      	nop
1000ab00:	100200d4 	.word	0x100200d4

1000ab04 <_kill_r>:
1000ab04:	b538      	push	{r3, r4, r5, lr}
1000ab06:	4d07      	ldr	r5, [pc, #28]	@ (1000ab24 <_kill_r+0x20>)
1000ab08:	2300      	movs	r3, #0
1000ab0a:	4604      	mov	r4, r0
1000ab0c:	4608      	mov	r0, r1
1000ab0e:	4611      	mov	r1, r2
1000ab10:	602b      	str	r3, [r5, #0]
1000ab12:	f7f5 fdf5 	bl	10000700 <_kill>
1000ab16:	1c43      	adds	r3, r0, #1
1000ab18:	d102      	bne.n	1000ab20 <_kill_r+0x1c>
1000ab1a:	682b      	ldr	r3, [r5, #0]
1000ab1c:	b103      	cbz	r3, 1000ab20 <_kill_r+0x1c>
1000ab1e:	6023      	str	r3, [r4, #0]
1000ab20:	bd38      	pop	{r3, r4, r5, pc}
1000ab22:	bf00      	nop
1000ab24:	10021d6c 	.word	0x10021d6c

1000ab28 <_getpid_r>:
1000ab28:	f7f5 bde2 	b.w	100006f0 <_getpid>

1000ab2c <_sbrk_r>:
1000ab2c:	b538      	push	{r3, r4, r5, lr}
1000ab2e:	4d06      	ldr	r5, [pc, #24]	@ (1000ab48 <_sbrk_r+0x1c>)
1000ab30:	2300      	movs	r3, #0
1000ab32:	4604      	mov	r4, r0
1000ab34:	4608      	mov	r0, r1
1000ab36:	602b      	str	r3, [r5, #0]
1000ab38:	f7f5 fe6a 	bl	10000810 <_sbrk>
1000ab3c:	1c43      	adds	r3, r0, #1
1000ab3e:	d102      	bne.n	1000ab46 <_sbrk_r+0x1a>
1000ab40:	682b      	ldr	r3, [r5, #0]
1000ab42:	b103      	cbz	r3, 1000ab46 <_sbrk_r+0x1a>
1000ab44:	6023      	str	r3, [r4, #0]
1000ab46:	bd38      	pop	{r3, r4, r5, pc}
1000ab48:	10021d6c 	.word	0x10021d6c

1000ab4c <__swhatbuf_r>:
1000ab4c:	b570      	push	{r4, r5, r6, lr}
1000ab4e:	460c      	mov	r4, r1
1000ab50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000ab54:	2900      	cmp	r1, #0
1000ab56:	b096      	sub	sp, #88	@ 0x58
1000ab58:	4615      	mov	r5, r2
1000ab5a:	461e      	mov	r6, r3
1000ab5c:	da0d      	bge.n	1000ab7a <__swhatbuf_r+0x2e>
1000ab5e:	89a3      	ldrh	r3, [r4, #12]
1000ab60:	f013 0f80 	tst.w	r3, #128	@ 0x80
1000ab64:	f04f 0100 	mov.w	r1, #0
1000ab68:	bf14      	ite	ne
1000ab6a:	2340      	movne	r3, #64	@ 0x40
1000ab6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
1000ab70:	2000      	movs	r0, #0
1000ab72:	6031      	str	r1, [r6, #0]
1000ab74:	602b      	str	r3, [r5, #0]
1000ab76:	b016      	add	sp, #88	@ 0x58
1000ab78:	bd70      	pop	{r4, r5, r6, pc}
1000ab7a:	466a      	mov	r2, sp
1000ab7c:	f000 f848 	bl	1000ac10 <_fstat_r>
1000ab80:	2800      	cmp	r0, #0
1000ab82:	dbec      	blt.n	1000ab5e <__swhatbuf_r+0x12>
1000ab84:	9901      	ldr	r1, [sp, #4]
1000ab86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
1000ab8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
1000ab8e:	4259      	negs	r1, r3
1000ab90:	4159      	adcs	r1, r3
1000ab92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
1000ab96:	e7eb      	b.n	1000ab70 <__swhatbuf_r+0x24>

1000ab98 <__smakebuf_r>:
1000ab98:	898b      	ldrh	r3, [r1, #12]
1000ab9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ab9c:	079d      	lsls	r5, r3, #30
1000ab9e:	4606      	mov	r6, r0
1000aba0:	460c      	mov	r4, r1
1000aba2:	d507      	bpl.n	1000abb4 <__smakebuf_r+0x1c>
1000aba4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
1000aba8:	6023      	str	r3, [r4, #0]
1000abaa:	6123      	str	r3, [r4, #16]
1000abac:	2301      	movs	r3, #1
1000abae:	6163      	str	r3, [r4, #20]
1000abb0:	b003      	add	sp, #12
1000abb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000abb4:	ab01      	add	r3, sp, #4
1000abb6:	466a      	mov	r2, sp
1000abb8:	f7ff ffc8 	bl	1000ab4c <__swhatbuf_r>
1000abbc:	9f00      	ldr	r7, [sp, #0]
1000abbe:	4605      	mov	r5, r0
1000abc0:	4639      	mov	r1, r7
1000abc2:	4630      	mov	r0, r6
1000abc4:	f7ff fad2 	bl	1000a16c <_malloc_r>
1000abc8:	b948      	cbnz	r0, 1000abde <__smakebuf_r+0x46>
1000abca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000abce:	059a      	lsls	r2, r3, #22
1000abd0:	d4ee      	bmi.n	1000abb0 <__smakebuf_r+0x18>
1000abd2:	f023 0303 	bic.w	r3, r3, #3
1000abd6:	f043 0302 	orr.w	r3, r3, #2
1000abda:	81a3      	strh	r3, [r4, #12]
1000abdc:	e7e2      	b.n	1000aba4 <__smakebuf_r+0xc>
1000abde:	89a3      	ldrh	r3, [r4, #12]
1000abe0:	6020      	str	r0, [r4, #0]
1000abe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1000abe6:	81a3      	strh	r3, [r4, #12]
1000abe8:	9b01      	ldr	r3, [sp, #4]
1000abea:	e9c4 0704 	strd	r0, r7, [r4, #16]
1000abee:	b15b      	cbz	r3, 1000ac08 <__smakebuf_r+0x70>
1000abf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000abf4:	4630      	mov	r0, r6
1000abf6:	f000 f81d 	bl	1000ac34 <_isatty_r>
1000abfa:	b128      	cbz	r0, 1000ac08 <__smakebuf_r+0x70>
1000abfc:	89a3      	ldrh	r3, [r4, #12]
1000abfe:	f023 0303 	bic.w	r3, r3, #3
1000ac02:	f043 0301 	orr.w	r3, r3, #1
1000ac06:	81a3      	strh	r3, [r4, #12]
1000ac08:	89a3      	ldrh	r3, [r4, #12]
1000ac0a:	431d      	orrs	r5, r3
1000ac0c:	81a5      	strh	r5, [r4, #12]
1000ac0e:	e7cf      	b.n	1000abb0 <__smakebuf_r+0x18>

1000ac10 <_fstat_r>:
1000ac10:	b538      	push	{r3, r4, r5, lr}
1000ac12:	4d07      	ldr	r5, [pc, #28]	@ (1000ac30 <_fstat_r+0x20>)
1000ac14:	2300      	movs	r3, #0
1000ac16:	4604      	mov	r4, r0
1000ac18:	4608      	mov	r0, r1
1000ac1a:	4611      	mov	r1, r2
1000ac1c:	602b      	str	r3, [r5, #0]
1000ac1e:	f7f5 fdcf 	bl	100007c0 <_fstat>
1000ac22:	1c43      	adds	r3, r0, #1
1000ac24:	d102      	bne.n	1000ac2c <_fstat_r+0x1c>
1000ac26:	682b      	ldr	r3, [r5, #0]
1000ac28:	b103      	cbz	r3, 1000ac2c <_fstat_r+0x1c>
1000ac2a:	6023      	str	r3, [r4, #0]
1000ac2c:	bd38      	pop	{r3, r4, r5, pc}
1000ac2e:	bf00      	nop
1000ac30:	10021d6c 	.word	0x10021d6c

1000ac34 <_isatty_r>:
1000ac34:	b538      	push	{r3, r4, r5, lr}
1000ac36:	4d06      	ldr	r5, [pc, #24]	@ (1000ac50 <_isatty_r+0x1c>)
1000ac38:	2300      	movs	r3, #0
1000ac3a:	4604      	mov	r4, r0
1000ac3c:	4608      	mov	r0, r1
1000ac3e:	602b      	str	r3, [r5, #0]
1000ac40:	f7f5 fdce 	bl	100007e0 <_isatty>
1000ac44:	1c43      	adds	r3, r0, #1
1000ac46:	d102      	bne.n	1000ac4e <_isatty_r+0x1a>
1000ac48:	682b      	ldr	r3, [r5, #0]
1000ac4a:	b103      	cbz	r3, 1000ac4e <_isatty_r+0x1a>
1000ac4c:	6023      	str	r3, [r4, #0]
1000ac4e:	bd38      	pop	{r3, r4, r5, pc}
1000ac50:	10021d6c 	.word	0x10021d6c

1000ac54 <_init>:
1000ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ac56:	bf00      	nop
1000ac58:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000ac5a:	bc08      	pop	{r3}
1000ac5c:	469e      	mov	lr, r3
1000ac5e:	4770      	bx	lr

1000ac60 <_fini>:
1000ac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ac62:	bf00      	nop
1000ac64:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000ac66:	bc08      	pop	{r3}
1000ac68:	469e      	mov	lr, r3
1000ac6a:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

1000ac6c <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
1000ac6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 1000aca4 <LoopForever+0x2>
  movs  r1, #0
1000ac70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000ac72:	e003      	b.n	1000ac7c <LoopCopyDataInit>

1000ac74 <CopyDataInit>:
  ldr  r3, =_sidata
1000ac74:	4b0c      	ldr	r3, [pc, #48]	@ (1000aca8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000ac76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000ac78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000ac7a:	3104      	adds	r1, #4

1000ac7c <LoopCopyDataInit>:
  ldr  r0, =_sdata
1000ac7c:	480b      	ldr	r0, [pc, #44]	@ (1000acac <LoopForever+0xa>)
  ldr  r3, =_edata
1000ac7e:	4b0c      	ldr	r3, [pc, #48]	@ (1000acb0 <LoopForever+0xe>)
  adds  r2, r0, r1
1000ac80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000ac82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000ac84:	d3f6      	bcc.n	1000ac74 <CopyDataInit>
  ldr  r2, =_sbss
1000ac86:	4a0b      	ldr	r2, [pc, #44]	@ (1000acb4 <LoopForever+0x12>)
  b  LoopFillZerobss
1000ac88:	e002      	b.n	1000ac90 <LoopFillZerobss>

1000ac8a <FillZerobss>:
  movs  r3, #0
1000ac8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
1000ac8c:	f842 3b04 	str.w	r3, [r2], #4

1000ac90 <LoopFillZerobss>:
  ldr  r3, = _ebss
1000ac90:	4b09      	ldr	r3, [pc, #36]	@ (1000acb8 <LoopForever+0x16>)
  cmp  r2, r3
1000ac92:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000ac94:	d3f9      	bcc.n	1000ac8a <FillZerobss>
  bl  SystemInit
1000ac96:	f7f5 fa33 	bl	10000100 <SystemInit>
 bl __libc_init_array
1000ac9a:	f7ff f9bf 	bl	1000a01c <__libc_init_array>
  bl main
1000ac9e:	f7f5 fa55 	bl	1000014c <main>

1000aca2 <LoopForever>:
    b LoopForever
1000aca2:	e7fe      	b.n	1000aca2 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000aca4:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
1000aca8:	1000b1dc 	.word	0x1000b1dc
  ldr  r0, =_sdata
1000acac:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1000acb0:	10020124 	.word	0x10020124
  ldr  r2, =_sbss
1000acb4:	100201b0 	.word	0x100201b0
  ldr  r3, = _ebss
1000acb8:	10021d7c 	.word	0x10021d7c
